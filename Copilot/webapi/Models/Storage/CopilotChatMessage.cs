// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

using CopilotChat.WebApi.Models.Response;
using CopilotChat.WebApi.Storage;

namespace CopilotChat.WebApi.Models.Storage;

/// <summary>
///     Information about a single chat message.
/// </summary>
public sealed record CopilotChatMessage : IStorageEntity
{
	/// <summary>
	///     Role of the author of a chat message.
	/// </summary>
	public enum AuthorRoles
	{
		/// <summary>
		///     The current user of the chat.
		/// </summary>
		User = 0,

		/// <summary>
		///     The bot.
		/// </summary>
		Bot
	}

	/// <summary>
	///     Type of the chat message.
	/// </summary>
	public enum ChatMessageType
	{
		/// <summary>
		///     A standard message
		/// </summary>
		Message,

		/// <summary>
		///     A message for a Plan
		/// </summary>
		Plan,

		/// <summary>
		///     An uploaded document notification
		/// </summary>
		Document
	}

	private static readonly JsonSerializerOptions s_serializerSettings =
		new() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };

	/// <summary>
	///     Timestamp of the message.
	/// </summary>
	public DateTimeOffset Timestamp { get; init; } = TimeProvider.System.GetUtcNow();

	/// <summary>
	///     Id of the user who sent this message.
	/// </summary>
	public required string UserId { get; init; }

	/// <summary>
	///     Name of the user who sent this message.
	/// </summary>
	public required string UserName { get; init; }

	/// <summary>
	///     Id of the chat this message belongs to.
	/// </summary>
	public required string ChatId { get; init; }

	/// <summary>
	///     Content of the message.
	/// </summary>
	public required string Content { get; init; }

	/// <summary>
	///     Role of the author of the message.
	/// </summary>
	public AuthorRoles AuthorRole { get; init; } = AuthorRoles.User;

	/// <summary>
	///     Prompt used to generate the message.
	///     Will be empty if the message is not generated by a prompt.
	/// </summary>
	public required string Prompt { get; init; }

	/// <summary>
	///     Citations of the message.
	/// </summary>
	public IEnumerable<CitationSource>? Citations { get; init; }

	/// <summary>
	///     Type of the message.
	/// </summary>
	public ChatMessageType Type { get; init; } = ChatMessageType.Message;

	/// <summary>
	///     Counts of total token usage used to generate bot response.
	/// </summary>
	public IDictionary<string, int>? TokenUsage { get; init; }

	/// <summary>
	///     Id of the message.
	/// </summary>
	public string Id { get; init; } = Guid.NewGuid().ToString();

	/// <summary>
	///     The partition key for the source.
	/// </summary>
	[JsonIgnore]
	public string Partition => ChatId;

	/// <summary>
	///     Create a new chat message for the bot response.
	/// </summary>
	/// <param name="chatId">The chat ID that this message belongs to</param>
	/// <param name="content">The message</param>
	/// <param name="prompt">The prompt used to generate the message</param>
	/// <param name="citations"></param>
	/// <param name="tokenUsage">Total token usage of response completion</param>
	public static CopilotChatMessage CreateBotResponseMessage(
		string chatId,
		string content,
		string prompt,
		IEnumerable<CitationSource>? citations,
		IDictionary<string, int>? tokenUsage = null)
	{
		return new()
		{
			UserId = "Bot",
			UserName = "Bot",
			ChatId = chatId,
			Content = content,
			Prompt = prompt,
			Citations = citations,
			TokenUsage = tokenUsage,
			AuthorRole = AuthorRoles.Bot
		};
	}

	/// <summary>
	///     Create a new chat message for a document upload.
	/// </summary>
	/// <param name="userId">The user ID that uploaded the document</param>
	/// <param name="userName">The user name that uploaded the document</param>
	/// <param name="chatId">The chat ID that this message belongs to</param>
	/// <param name="documentMessageContent">The document message content</param>
	public static CopilotChatMessage CreateDocumentMessage(
		string userId,
		string userName,
		string chatId,
		DocumentMessageContent documentMessageContent)
	{
		return new()
		{
			UserId = userName,
			UserName = userId,
			ChatId = chatId,
			Content = documentMessageContent.ToString(),
			AuthorRole = AuthorRoles.User,
			Type = ChatMessageType.Document,
			Prompt = string.Empty
		};
	}

	/// <summary>
	///     Serialize the object to a formatted string.
	/// </summary>
	/// <returns>A formatted string</returns>
	public string ToFormattedString()
	{
		string messagePrefix = $"[{Timestamp.ToString("G", CultureInfo.CurrentCulture)}]";
		switch (Type)
		{
			case ChatMessageType.Document:
				DocumentMessageContent? documentMessage = DocumentMessageContent.FromString(Content);
				string documentMessageContent =
					documentMessage is not null ? documentMessage.ToFormattedString() : "documents";

				return $"{messagePrefix} {UserName} uploaded: {documentMessageContent}";

			case ChatMessageType.Plan: // Fall through
			case ChatMessageType.Message:
				return $"{messagePrefix} {UserName} said: {Content}";

			default:
				// This should never happen.
				throw new InvalidOperationException($"Unknown message type: {Type}");
		}
	}

	/// <summary>
	///     Serialize the object to a JSON string.
	/// </summary>
	/// <returns>A serialized json string</returns>
	public override string ToString()
	{
		return JsonSerializer.Serialize(this, s_serializerSettings);
	}

	/// <summary>
	///     Deserialize a JSON string to a ChatMessage object.
	/// </summary>
	/// <param name="json">A json string</param>
	/// <returns>A ChatMessage object</returns>
	public static CopilotChatMessage? FromString(string json)
	{
		return JsonSerializer.Deserialize<CopilotChatMessage>(json, s_serializerSettings);
	}
}
