/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DataExtractionApi
    /// </summary>
    public sealed class DataExtractionApiTests : ApiTestsBase
    {
        private readonly IDataExtractionApi _instance;

        public DataExtractionApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDataExtractionApi>();
        }

        /// <summary>
        /// Test ApiExtractThematicSimilarityClusterPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiExtractThematicSimilarityClusterPostAsyncTest()
        {
            ApiExtractThematicSimilarityClusterPostRequest apiExtractThematicSimilarityClusterPostRequest = default!;
            var response = await _instance.ApiExtractThematicSimilarityClusterPostAsync(apiExtractThematicSimilarityClusterPostRequest);
            var model = response.Ok();
            Assert.IsType<KMeansCluster>(model);
        }

        /// <summary>
        /// Test Embedding
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmbeddingAsyncTest()
        {
            EmbeddingRequest embeddingRequest = default!;
            var response = await _instance.EmbeddingAsync(embeddingRequest);
            var model = response.Ok();
            Assert.IsType<EmbeddingResponse>(model);
        }

        /// <summary>
        /// Test KeywordExtraction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task KeywordExtractionAsyncTest()
        {
            KeywordExtractionRequestBody keywordExtractionRequestBody = default!;
            var response = await _instance.KeywordExtractionAsync(keywordExtractionRequestBody);
            var model = response.Ok();
            Assert.IsType<KeywordExtractionResponse>(model);
        }

        /// <summary>
        /// Test NamedEntityRecognition
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NamedEntityRecognitionAsyncTest()
        {
            NamedEntityRecognitionRequest namedEntityRecognitionRequest = default!;
            var response = await _instance.NamedEntityRecognitionAsync(namedEntityRecognitionRequest);
            var model = response.Ok();
            Assert.IsType<NamedEntityRecognitionResponse>(model);
        }

        /// <summary>
        /// Test SemanticSimilarity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SemanticSimilarityAsyncTest()
        {
            SemanticSimilarityRequest semanticSimilarityRequest = default!;
            var response = await _instance.SemanticSimilarityAsync(semanticSimilarityRequest);
            var model = response.Ok();
            Assert.IsType<SemanticSimilarityResponse>(model);
        }

        /// <summary>
        /// Test TokenCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TokenCountAsyncTest()
        {
            TokenCountRequest tokenCountRequest = default!;
            var response = await _instance.TokenCountAsync(tokenCountRequest);
            var model = response.Ok();
            Assert.IsType<TokenCountResponse>(model);
        }

        /// <summary>
        /// Test Tokenize
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TokenizeAsyncTest()
        {
            TokenizerRequest tokenizerRequest = default!;
            var response = await _instance.TokenizeAsync(tokenizerRequest);
            var model = response.Ok();
            Assert.IsType<TokenizerResponse>(model);
        }

        /// <summary>
        /// Test TranscriptionSynchronous
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TranscriptionSynchronousAsyncTest()
        {
            List<System.IO.Stream> files = default!;
            Client.Option<string> model = default!;
            Client.Option<string> language = default!;
            Client.Option<string> prompt = default!;
            Client.Option<double> temperature = default!;
            Client.Option<bool> splitOnWord = default!;
            Client.Option<bool> languageDetection = default!;
            Client.Option<bool> enableNoiseReduction = default!;
            var response = await _instance.TranscriptionSynchronousAsync(files, model, language, prompt, temperature, splitOnWord, languageDetection, enableNoiseReduction);
            var model = response.Ok();
            Assert.IsType<TranscriptionResponse>(model);
        }
    }
}
