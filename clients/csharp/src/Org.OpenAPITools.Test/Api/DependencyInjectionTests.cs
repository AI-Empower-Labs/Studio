/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Extensions;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var dataExtractionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDataExtractionApi>();
            Assert.True(dataExtractionApi.HttpClient.BaseAddress != null);

            var kernelMemoryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IKernelMemoryApi>();
            Assert.True(kernelMemoryApi.HttpClient.BaseAddress != null);

            var languageApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);

            var miscellaneousApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMiscellaneousApi>();
            Assert.True(miscellaneousApi.HttpClient.BaseAddress != null);

            var semanticSearchApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISemanticSearchApi>();
            Assert.True(semanticSearchApi.HttpClient.BaseAddress != null);

            var transcriptionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITranscriptionApi>();
            Assert.True(transcriptionApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var dataExtractionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDataExtractionApi>();
            Assert.True(dataExtractionApi.HttpClient.BaseAddress != null);

            var kernelMemoryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IKernelMemoryApi>();
            Assert.True(kernelMemoryApi.HttpClient.BaseAddress != null);

            var languageApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);

            var miscellaneousApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMiscellaneousApi>();
            Assert.True(miscellaneousApi.HttpClient.BaseAddress != null);

            var semanticSearchApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISemanticSearchApi>();
            Assert.True(semanticSearchApi.HttpClient.BaseAddress != null);

            var transcriptionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITranscriptionApi>();
            Assert.True(transcriptionApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var dataExtractionApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDataExtractionApi>();
            Assert.True(dataExtractionApi.HttpClient.BaseAddress != null);
            
            var kernelMemoryApi = _hostUsingAddWithAClient.Services.GetRequiredService<IKernelMemoryApi>();
            Assert.True(kernelMemoryApi.HttpClient.BaseAddress != null);
            
            var languageApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);
            
            var miscellaneousApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMiscellaneousApi>();
            Assert.True(miscellaneousApi.HttpClient.BaseAddress != null);
            
            var semanticSearchApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISemanticSearchApi>();
            Assert.True(semanticSearchApi.HttpClient.BaseAddress != null);
            
            var transcriptionApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITranscriptionApi>();
            Assert.True(transcriptionApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var dataExtractionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDataExtractionApi>();
            Assert.True(dataExtractionApi.HttpClient.BaseAddress != null);

            var kernelMemoryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IKernelMemoryApi>();
            Assert.True(kernelMemoryApi.HttpClient.BaseAddress != null);

            var languageApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILanguageApi>();
            Assert.True(languageApi.HttpClient.BaseAddress != null);

            var miscellaneousApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMiscellaneousApi>();
            Assert.True(miscellaneousApi.HttpClient.BaseAddress != null);

            var semanticSearchApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISemanticSearchApi>();
            Assert.True(semanticSearchApi.HttpClient.BaseAddress != null);

            var transcriptionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITranscriptionApi>();
            Assert.True(transcriptionApi.HttpClient.BaseAddress != null);
        }
    }
}
