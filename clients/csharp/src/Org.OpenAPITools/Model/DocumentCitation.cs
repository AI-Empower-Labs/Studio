// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentCitation
    /// </summary>
    public partial class DocumentCitation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCitation" /> class.
        /// </summary>
        /// <param name="link">URL or reference to the original source document</param>
        /// <param name="index">Identifier or position of the citation within the source</param>
        /// <param name="documentId">Unique identifier for the document</param>
        /// <param name="fileId">Unique identifier for the file in storage</param>
        /// <param name="sourceContentType">Format of the source (e.g., &#39;pdf&#39;, &#39;docx&#39;, &#39;chat&#39;)</param>
        /// <param name="sourceName">Human-readable name or title of the source</param>
        /// <param name="sourceUrl">Web URL of the source for online content</param>
        /// <param name="partitions">Array of text segments used from the source</param>
        [JsonConstructor]
        public DocumentCitation(Option<string?> link = default, Option<string?> index = default, Option<string?> documentId = default, Option<string?> fileId = default, Option<string?> sourceContentType = default, Option<string?> sourceName = default, Option<string?> sourceUrl = default, Option<List<DocumentPartition>?> partitions = default)
        {
            LinkOption = link;
            IndexOption = index;
            DocumentIdOption = documentId;
            FileIdOption = fileId;
            SourceContentTypeOption = sourceContentType;
            SourceNameOption = sourceName;
            SourceUrlOption = sourceUrl;
            PartitionsOption = partitions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Link
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkOption { get; private set; }

        /// <summary>
        /// URL or reference to the original source document
        /// </summary>
        /// <value>URL or reference to the original source document</value>
        [JsonPropertyName("link")]
        public string? Link { get { return this.LinkOption; } set { this.LinkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexOption { get; private set; }

        /// <summary>
        /// Identifier or position of the citation within the source
        /// </summary>
        /// <value>Identifier or position of the citation within the source</value>
        [JsonPropertyName("index")]
        public string? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocumentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DocumentIdOption { get; private set; }

        /// <summary>
        /// Unique identifier for the document
        /// </summary>
        /// <value>Unique identifier for the document</value>
        [JsonPropertyName("documentId")]
        public string? DocumentId { get { return this.DocumentIdOption; } set { this.DocumentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileIdOption { get; private set; }

        /// <summary>
        /// Unique identifier for the file in storage
        /// </summary>
        /// <value>Unique identifier for the file in storage</value>
        [JsonPropertyName("fileId")]
        public string? FileId { get { return this.FileIdOption; } set { this.FileIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceContentTypeOption { get; private set; }

        /// <summary>
        /// Format of the source (e.g., &#39;pdf&#39;, &#39;docx&#39;, &#39;chat&#39;)
        /// </summary>
        /// <value>Format of the source (e.g., &#39;pdf&#39;, &#39;docx&#39;, &#39;chat&#39;)</value>
        [JsonPropertyName("sourceContentType")]
        public string? SourceContentType { get { return this.SourceContentTypeOption; } set { this.SourceContentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceNameOption { get; private set; }

        /// <summary>
        /// Human-readable name or title of the source
        /// </summary>
        /// <value>Human-readable name or title of the source</value>
        [JsonPropertyName("sourceName")]
        public string? SourceName { get { return this.SourceNameOption; } set { this.SourceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceUrlOption { get; private set; }

        /// <summary>
        /// Web URL of the source for online content
        /// </summary>
        /// <value>Web URL of the source for online content</value>
        [JsonPropertyName("sourceUrl")]
        public string? SourceUrl { get { return this.SourceUrlOption; } set { this.SourceUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Partitions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DocumentPartition>?> PartitionsOption { get; private set; }

        /// <summary>
        /// Array of text segments used from the source
        /// </summary>
        /// <value>Array of text segments used from the source</value>
        [JsonPropertyName("partitions")]
        public List<DocumentPartition>? Partitions { get { return this.PartitionsOption; } set { this.PartitionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentCitation {\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  SourceContentType: ").Append(SourceContentType).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Partitions: ").Append(Partitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentCitation" />
    /// </summary>
    public class DocumentCitationJsonConverter : JsonConverter<DocumentCitation>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentCitation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentCitation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> link = default;
            Option<string?> index = default;
            Option<string?> documentId = default;
            Option<string?> fileId = default;
            Option<string?> sourceContentType = default;
            Option<string?> sourceName = default;
            Option<string?> sourceUrl = default;
            Option<List<DocumentPartition>?> partitions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "link":
                            link = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "index":
                            index = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "documentId":
                            documentId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fileId":
                            fileId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sourceContentType":
                            sourceContentType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sourceName":
                            sourceName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sourceUrl":
                            sourceUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "partitions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                partitions = new Option<List<DocumentPartition>?>(JsonSerializer.Deserialize<List<DocumentPartition>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DocumentCitation(link, index, documentId, fileId, sourceContentType, sourceName, sourceUrl, partitions);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentCitation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentCitation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentCitation documentCitation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentCitation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentCitation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentCitation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentCitation documentCitation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentCitation.LinkOption.IsSet)
                if (documentCitation.LinkOption.Value != null)
                    writer.WriteString("link", documentCitation.Link);
                else
                    writer.WriteNull("link");

            if (documentCitation.IndexOption.IsSet)
                if (documentCitation.IndexOption.Value != null)
                    writer.WriteString("index", documentCitation.Index);
                else
                    writer.WriteNull("index");

            if (documentCitation.DocumentIdOption.IsSet)
                if (documentCitation.DocumentIdOption.Value != null)
                    writer.WriteString("documentId", documentCitation.DocumentId);
                else
                    writer.WriteNull("documentId");

            if (documentCitation.FileIdOption.IsSet)
                if (documentCitation.FileIdOption.Value != null)
                    writer.WriteString("fileId", documentCitation.FileId);
                else
                    writer.WriteNull("fileId");

            if (documentCitation.SourceContentTypeOption.IsSet)
                if (documentCitation.SourceContentTypeOption.Value != null)
                    writer.WriteString("sourceContentType", documentCitation.SourceContentType);
                else
                    writer.WriteNull("sourceContentType");

            if (documentCitation.SourceNameOption.IsSet)
                if (documentCitation.SourceNameOption.Value != null)
                    writer.WriteString("sourceName", documentCitation.SourceName);
                else
                    writer.WriteNull("sourceName");

            if (documentCitation.SourceUrlOption.IsSet)
                if (documentCitation.SourceUrlOption.Value != null)
                    writer.WriteString("sourceUrl", documentCitation.SourceUrl);
                else
                    writer.WriteNull("sourceUrl");

            if (documentCitation.PartitionsOption.IsSet)
                if (documentCitation.PartitionsOption.Value != null)
                {
                    writer.WritePropertyName("partitions");
                    JsonSerializer.Serialize(writer, documentCitation.Partitions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("partitions");
        }
    }
}
