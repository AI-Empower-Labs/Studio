// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApiExtractThematicSimilarityClusterPostRequest
    /// </summary>
    public partial class ApiExtractThematicSimilarityClusterPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiExtractThematicSimilarityClusterPostRequest" /> class.
        /// </summary>
        /// <param name="input">The input texts for generating clusters</param>
        /// <param name="clusterCount">The number of clusters requested for generating clusters</param>
        /// <param name="maxDegreeOfParallelism">The maximum degree of parallelism for the KMeans clustering algorithm (default to 1)</param>
        /// <param name="llmModel">The name of the LLM model. Optional.</param>
        /// <param name="embeddingModel">The name of the embedding model used in the GenerateClusterHttpRequest. Optional.</param>
        /// <param name="seed">Randomization seed. Optional.</param>
        [JsonConstructor]
        public ApiExtractThematicSimilarityClusterPostRequest(List<string> input, int clusterCount, Option<int?> maxDegreeOfParallelism = default, Option<string?> llmModel = default, Option<string?> embeddingModel = default, Option<int?> seed = default)
        {
            Input = input;
            ClusterCount = clusterCount;
            MaxDegreeOfParallelismOption = maxDegreeOfParallelism;
            LlmModelOption = llmModel;
            EmbeddingModelOption = embeddingModel;
            SeedOption = seed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The input texts for generating clusters
        /// </summary>
        /// <value>The input texts for generating clusters</value>
        [JsonPropertyName("input")]
        public List<string> Input { get; set; }

        /// <summary>
        /// The number of clusters requested for generating clusters
        /// </summary>
        /// <value>The number of clusters requested for generating clusters</value>
        [JsonPropertyName("clusterCount")]
        public int ClusterCount { get; set; }

        /// <summary>
        /// Used to track the state of MaxDegreeOfParallelism
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxDegreeOfParallelismOption { get; private set; }

        /// <summary>
        /// The maximum degree of parallelism for the KMeans clustering algorithm
        /// </summary>
        /// <value>The maximum degree of parallelism for the KMeans clustering algorithm</value>
        [JsonPropertyName("maxDegreeOfParallelism")]
        public int? MaxDegreeOfParallelism { get { return this.MaxDegreeOfParallelismOption; } set { this.MaxDegreeOfParallelismOption = new(value); } }

        /// <summary>
        /// Used to track the state of LlmModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LlmModelOption { get; private set; }

        /// <summary>
        /// The name of the LLM model. Optional.
        /// </summary>
        /// <value>The name of the LLM model. Optional.</value>
        [JsonPropertyName("llmModel")]
        public string? LlmModel { get { return this.LlmModelOption; } set { this.LlmModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmbeddingModelOption { get; private set; }

        /// <summary>
        /// The name of the embedding model used in the GenerateClusterHttpRequest. Optional.
        /// </summary>
        /// <value>The name of the embedding model used in the GenerateClusterHttpRequest. Optional.</value>
        [JsonPropertyName("embeddingModel")]
        public string? EmbeddingModel { get { return this.EmbeddingModelOption; } set { this.EmbeddingModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Seed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SeedOption { get; private set; }

        /// <summary>
        /// Randomization seed. Optional.
        /// </summary>
        /// <value>Randomization seed. Optional.</value>
        [JsonPropertyName("seed")]
        public int? Seed { get { return this.SeedOption; } set { this.SeedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiExtractThematicSimilarityClusterPostRequest {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  ClusterCount: ").Append(ClusterCount).Append("\n");
            sb.Append("  MaxDegreeOfParallelism: ").Append(MaxDegreeOfParallelism).Append("\n");
            sb.Append("  LlmModel: ").Append(LlmModel).Append("\n");
            sb.Append("  EmbeddingModel: ").Append(EmbeddingModel).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClusterCount (int) maximum
            if (this.ClusterCount > (int)1000)
            {
                yield return new ValidationResult("Invalid value for ClusterCount, must be a value less than or equal to 1000.", new [] { "ClusterCount" });
            }

            // ClusterCount (int) minimum
            if (this.ClusterCount < (int)2)
            {
                yield return new ValidationResult("Invalid value for ClusterCount, must be a value greater than or equal to 2.", new [] { "ClusterCount" });
            }

            // MaxDegreeOfParallelism (int) maximum
            if (this.MaxDegreeOfParallelismOption.IsSet && this.MaxDegreeOfParallelismOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for MaxDegreeOfParallelism, must be a value less than or equal to 100.", new [] { "MaxDegreeOfParallelism" });
            }

            // MaxDegreeOfParallelism (int) minimum
            if (this.MaxDegreeOfParallelismOption.IsSet && this.MaxDegreeOfParallelismOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for MaxDegreeOfParallelism, must be a value greater than or equal to 1.", new [] { "MaxDegreeOfParallelism" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiExtractThematicSimilarityClusterPostRequest" />
    /// </summary>
    public class ApiExtractThematicSimilarityClusterPostRequestJsonConverter : JsonConverter<ApiExtractThematicSimilarityClusterPostRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiExtractThematicSimilarityClusterPostRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiExtractThematicSimilarityClusterPostRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> input = default;
            Option<int?> clusterCount = default;
            Option<int?> maxDegreeOfParallelism = default;
            Option<string?> llmModel = default;
            Option<string?> embeddingModel = default;
            Option<int?> seed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "input":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                input = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clusterCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                clusterCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "maxDegreeOfParallelism":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxDegreeOfParallelism = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "llmModel":
                            llmModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "embeddingModel":
                            embeddingModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "seed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                seed = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!input.IsSet)
                throw new ArgumentException("Property is required for class ApiExtractThematicSimilarityClusterPostRequest.", nameof(input));

            if (!clusterCount.IsSet)
                throw new ArgumentException("Property is required for class ApiExtractThematicSimilarityClusterPostRequest.", nameof(clusterCount));

            if (input.IsSet && input.Value == null)
                throw new ArgumentNullException(nameof(input), "Property is not nullable for class ApiExtractThematicSimilarityClusterPostRequest.");

            if (clusterCount.IsSet && clusterCount.Value == null)
                throw new ArgumentNullException(nameof(clusterCount), "Property is not nullable for class ApiExtractThematicSimilarityClusterPostRequest.");

            if (maxDegreeOfParallelism.IsSet && maxDegreeOfParallelism.Value == null)
                throw new ArgumentNullException(nameof(maxDegreeOfParallelism), "Property is not nullable for class ApiExtractThematicSimilarityClusterPostRequest.");

            return new ApiExtractThematicSimilarityClusterPostRequest(input.Value!, clusterCount.Value!.Value!, maxDegreeOfParallelism, llmModel, embeddingModel, seed);
        }

        /// <summary>
        /// Serializes a <see cref="ApiExtractThematicSimilarityClusterPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiExtractThematicSimilarityClusterPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiExtractThematicSimilarityClusterPostRequest apiExtractThematicSimilarityClusterPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiExtractThematicSimilarityClusterPostRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiExtractThematicSimilarityClusterPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiExtractThematicSimilarityClusterPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiExtractThematicSimilarityClusterPostRequest apiExtractThematicSimilarityClusterPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiExtractThematicSimilarityClusterPostRequest.Input == null)
                throw new ArgumentNullException(nameof(apiExtractThematicSimilarityClusterPostRequest.Input), "Property is required for class ApiExtractThematicSimilarityClusterPostRequest.");

            writer.WritePropertyName("input");
            JsonSerializer.Serialize(writer, apiExtractThematicSimilarityClusterPostRequest.Input, jsonSerializerOptions);
            writer.WriteNumber("clusterCount", apiExtractThematicSimilarityClusterPostRequest.ClusterCount);

            if (apiExtractThematicSimilarityClusterPostRequest.MaxDegreeOfParallelismOption.IsSet)
                writer.WriteNumber("maxDegreeOfParallelism", apiExtractThematicSimilarityClusterPostRequest.MaxDegreeOfParallelismOption.Value!.Value);

            if (apiExtractThematicSimilarityClusterPostRequest.LlmModelOption.IsSet)
                if (apiExtractThematicSimilarityClusterPostRequest.LlmModelOption.Value != null)
                    writer.WriteString("llmModel", apiExtractThematicSimilarityClusterPostRequest.LlmModel);
                else
                    writer.WriteNull("llmModel");

            if (apiExtractThematicSimilarityClusterPostRequest.EmbeddingModelOption.IsSet)
                if (apiExtractThematicSimilarityClusterPostRequest.EmbeddingModelOption.Value != null)
                    writer.WriteString("embeddingModel", apiExtractThematicSimilarityClusterPostRequest.EmbeddingModel);
                else
                    writer.WriteNull("embeddingModel");

            if (apiExtractThematicSimilarityClusterPostRequest.SeedOption.IsSet)
                if (apiExtractThematicSimilarityClusterPostRequest.SeedOption.Value != null)
                    writer.WriteNumber("seed", apiExtractThematicSimilarityClusterPostRequest.SeedOption.Value!.Value);
                else
                    writer.WriteNull("seed");
        }
    }
}
