/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeSpan
    /// </summary>
    [DataContract(Name = "TimeSpan")]
    public partial class TimeSpan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSpan" /> class.
        /// </summary>
        /// <param name="ticks">ticks.</param>
        public TimeSpan(long ticks = default(long))
        {
            this.Ticks = ticks;
        }

        /// <summary>
        /// Gets or Sets Ticks
        /// </summary>
        [DataMember(Name = "ticks", EmitDefaultValue = false)]
        public long Ticks { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public int Days { get; private set; }

        /// <summary>
        /// Returns false as Days should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDays()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [DataMember(Name = "hours", EmitDefaultValue = false)]
        public int Hours { get; private set; }

        /// <summary>
        /// Returns false as Hours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHours()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Milliseconds
        /// </summary>
        [DataMember(Name = "milliseconds", EmitDefaultValue = false)]
        public int Milliseconds { get; private set; }

        /// <summary>
        /// Returns false as Milliseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMilliseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Microseconds
        /// </summary>
        [DataMember(Name = "microseconds", EmitDefaultValue = false)]
        public int Microseconds { get; private set; }

        /// <summary>
        /// Returns false as Microseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMicroseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Nanoseconds
        /// </summary>
        [DataMember(Name = "nanoseconds", EmitDefaultValue = false)]
        public int Nanoseconds { get; private set; }

        /// <summary>
        /// Returns false as Nanoseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNanoseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Minutes
        /// </summary>
        [DataMember(Name = "minutes", EmitDefaultValue = false)]
        public int Minutes { get; private set; }

        /// <summary>
        /// Returns false as Minutes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinutes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [DataMember(Name = "seconds", EmitDefaultValue = false)]
        public int Seconds { get; private set; }

        /// <summary>
        /// Returns false as Seconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSeconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalDays
        /// </summary>
        [DataMember(Name = "totalDays", EmitDefaultValue = false)]
        public double TotalDays { get; private set; }

        /// <summary>
        /// Returns false as TotalDays should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalDays()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [DataMember(Name = "totalHours", EmitDefaultValue = false)]
        public double TotalHours { get; private set; }

        /// <summary>
        /// Returns false as TotalHours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalHours()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalMilliseconds
        /// </summary>
        [DataMember(Name = "totalMilliseconds", EmitDefaultValue = false)]
        public double TotalMilliseconds { get; private set; }

        /// <summary>
        /// Returns false as TotalMilliseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalMilliseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalMicroseconds
        /// </summary>
        [DataMember(Name = "totalMicroseconds", EmitDefaultValue = false)]
        public double TotalMicroseconds { get; private set; }

        /// <summary>
        /// Returns false as TotalMicroseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalMicroseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalNanoseconds
        /// </summary>
        [DataMember(Name = "totalNanoseconds", EmitDefaultValue = false)]
        public double TotalNanoseconds { get; private set; }

        /// <summary>
        /// Returns false as TotalNanoseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalNanoseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalMinutes
        /// </summary>
        [DataMember(Name = "totalMinutes", EmitDefaultValue = false)]
        public double TotalMinutes { get; private set; }

        /// <summary>
        /// Returns false as TotalMinutes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalMinutes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalSeconds
        /// </summary>
        [DataMember(Name = "totalSeconds", EmitDefaultValue = false)]
        public double TotalSeconds { get; private set; }

        /// <summary>
        /// Returns false as TotalSeconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalSeconds()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSpan {\n");
            sb.Append("  Ticks: ").Append(Ticks).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Milliseconds: ").Append(Milliseconds).Append("\n");
            sb.Append("  Microseconds: ").Append(Microseconds).Append("\n");
            sb.Append("  Nanoseconds: ").Append(Nanoseconds).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  TotalDays: ").Append(TotalDays).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  TotalMilliseconds: ").Append(TotalMilliseconds).Append("\n");
            sb.Append("  TotalMicroseconds: ").Append(TotalMicroseconds).Append("\n");
            sb.Append("  TotalNanoseconds: ").Append(TotalNanoseconds).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  TotalSeconds: ").Append(TotalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
