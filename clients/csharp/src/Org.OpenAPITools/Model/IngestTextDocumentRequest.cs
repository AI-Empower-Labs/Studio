// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IngestTextDocumentRequest
    /// </summary>
    public partial class IngestTextDocumentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IngestTextDocumentRequest" /> class.
        /// </summary>
        /// <param name="text">Text to ingest</param>
        /// <param name="documentId">Unique identifier for the document to ingest.</param>
        /// <param name="index">Optional index name where the document will be stored.</param>
        /// <param name="webHookUrl">Optional webhook URL to notify upon completion.</param>
        /// <param name="embeddingModelName">Optional name of the embedding model to use during ingestion.</param>
        /// <param name="context">Optional key-value pairs for additional context or metadata.</param>
        /// <param name="tags">A collection of tags associated with the document. Tags can be language-specific.</param>
        /// <param name="ingestionPipeline">Optional list of ingestion pipeline steps. Allows custom processing.</param>
        /// <param name="languageAutoDetection">Enable automatic language detection for document content. (default to false)</param>
        /// <param name="language">Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.</param>
        [JsonConstructor]
        public IngestTextDocumentRequest(string text, string documentId, Option<string?> index = default, Option<string?> webHookUrl = default, Option<string?> embeddingModelName = default, Option<Dictionary<string, string>?> context = default, Option<Dictionary<string, List<string>>?> tags = default, Option<List<string>?> ingestionPipeline = default, Option<bool?> languageAutoDetection = default, Option<LanguageEnum?> language = default)
        {
            Text = text;
            DocumentId = documentId;
            IndexOption = index;
            WebHookUrlOption = webHookUrl;
            EmbeddingModelNameOption = embeddingModelName;
            ContextOption = context;
            TagsOption = tags;
            IngestionPipelineOption = ingestionPipeline;
            LanguageAutoDetectionOption = languageAutoDetection;
            LanguageOption = language;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.
        /// </summary>
        /// <value>Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.</value>
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Arabic for value: arabic
            /// </summary>
            Arabic = 1,

            /// <summary>
            /// Enum Armenian for value: armenian
            /// </summary>
            Armenian = 2,

            /// <summary>
            /// Enum Basque for value: basque
            /// </summary>
            Basque = 3,

            /// <summary>
            /// Enum Catalan for value: catalan
            /// </summary>
            Catalan = 4,

            /// <summary>
            /// Enum Danish for value: danish
            /// </summary>
            Danish = 5,

            /// <summary>
            /// Enum Dutch for value: dutch
            /// </summary>
            Dutch = 6,

            /// <summary>
            /// Enum English for value: english
            /// </summary>
            English = 7,

            /// <summary>
            /// Enum Finnish for value: finnish
            /// </summary>
            Finnish = 8,

            /// <summary>
            /// Enum French for value: french
            /// </summary>
            French = 9,

            /// <summary>
            /// Enum German for value: german
            /// </summary>
            German = 10,

            /// <summary>
            /// Enum Greek for value: greek
            /// </summary>
            Greek = 11,

            /// <summary>
            /// Enum Hindi for value: hindi
            /// </summary>
            Hindi = 12,

            /// <summary>
            /// Enum Hungarian for value: hungarian
            /// </summary>
            Hungarian = 13,

            /// <summary>
            /// Enum Indonesian for value: indonesian
            /// </summary>
            Indonesian = 14,

            /// <summary>
            /// Enum Irish for value: irish
            /// </summary>
            Irish = 15,

            /// <summary>
            /// Enum Italian for value: italian
            /// </summary>
            Italian = 16,

            /// <summary>
            /// Enum Lithuanian for value: lithuanian
            /// </summary>
            Lithuanian = 17,

            /// <summary>
            /// Enum Nepali for value: nepali
            /// </summary>
            Nepali = 18,

            /// <summary>
            /// Enum Norwegian for value: norwegian
            /// </summary>
            Norwegian = 19,

            /// <summary>
            /// Enum Portuguese for value: portuguese
            /// </summary>
            Portuguese = 20,

            /// <summary>
            /// Enum Romanian for value: romanian
            /// </summary>
            Romanian = 21,

            /// <summary>
            /// Enum Russian for value: russian
            /// </summary>
            Russian = 22,

            /// <summary>
            /// Enum Serbian for value: serbian
            /// </summary>
            Serbian = 23,

            /// <summary>
            /// Enum Spanish for value: spanish
            /// </summary>
            Spanish = 24,

            /// <summary>
            /// Enum Swedish for value: swedish
            /// </summary>
            Swedish = 25,

            /// <summary>
            /// Enum Tamil for value: tamil
            /// </summary>
            Tamil = 26,

            /// <summary>
            /// Enum Turkish for value: turkish
            /// </summary>
            Turkish = 27,

            /// <summary>
            /// Enum Yiddish for value: yiddish
            /// </summary>
            Yiddish = 28,

            /// <summary>
            /// Enum Simple for value: simple
            /// </summary>
            Simple = 29
        }

        /// <summary>
        /// Returns a <see cref="LanguageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LanguageEnum LanguageEnumFromString(string value)
        {
            if (value.Equals("arabic"))
                return LanguageEnum.Arabic;

            if (value.Equals("armenian"))
                return LanguageEnum.Armenian;

            if (value.Equals("basque"))
                return LanguageEnum.Basque;

            if (value.Equals("catalan"))
                return LanguageEnum.Catalan;

            if (value.Equals("danish"))
                return LanguageEnum.Danish;

            if (value.Equals("dutch"))
                return LanguageEnum.Dutch;

            if (value.Equals("english"))
                return LanguageEnum.English;

            if (value.Equals("finnish"))
                return LanguageEnum.Finnish;

            if (value.Equals("french"))
                return LanguageEnum.French;

            if (value.Equals("german"))
                return LanguageEnum.German;

            if (value.Equals("greek"))
                return LanguageEnum.Greek;

            if (value.Equals("hindi"))
                return LanguageEnum.Hindi;

            if (value.Equals("hungarian"))
                return LanguageEnum.Hungarian;

            if (value.Equals("indonesian"))
                return LanguageEnum.Indonesian;

            if (value.Equals("irish"))
                return LanguageEnum.Irish;

            if (value.Equals("italian"))
                return LanguageEnum.Italian;

            if (value.Equals("lithuanian"))
                return LanguageEnum.Lithuanian;

            if (value.Equals("nepali"))
                return LanguageEnum.Nepali;

            if (value.Equals("norwegian"))
                return LanguageEnum.Norwegian;

            if (value.Equals("portuguese"))
                return LanguageEnum.Portuguese;

            if (value.Equals("romanian"))
                return LanguageEnum.Romanian;

            if (value.Equals("russian"))
                return LanguageEnum.Russian;

            if (value.Equals("serbian"))
                return LanguageEnum.Serbian;

            if (value.Equals("spanish"))
                return LanguageEnum.Spanish;

            if (value.Equals("swedish"))
                return LanguageEnum.Swedish;

            if (value.Equals("tamil"))
                return LanguageEnum.Tamil;

            if (value.Equals("turkish"))
                return LanguageEnum.Turkish;

            if (value.Equals("yiddish"))
                return LanguageEnum.Yiddish;

            if (value.Equals("simple"))
                return LanguageEnum.Simple;

            throw new NotImplementedException($"Could not convert value to type LanguageEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LanguageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LanguageEnum? LanguageEnumFromStringOrDefault(string value)
        {
            if (value.Equals("arabic"))
                return LanguageEnum.Arabic;

            if (value.Equals("armenian"))
                return LanguageEnum.Armenian;

            if (value.Equals("basque"))
                return LanguageEnum.Basque;

            if (value.Equals("catalan"))
                return LanguageEnum.Catalan;

            if (value.Equals("danish"))
                return LanguageEnum.Danish;

            if (value.Equals("dutch"))
                return LanguageEnum.Dutch;

            if (value.Equals("english"))
                return LanguageEnum.English;

            if (value.Equals("finnish"))
                return LanguageEnum.Finnish;

            if (value.Equals("french"))
                return LanguageEnum.French;

            if (value.Equals("german"))
                return LanguageEnum.German;

            if (value.Equals("greek"))
                return LanguageEnum.Greek;

            if (value.Equals("hindi"))
                return LanguageEnum.Hindi;

            if (value.Equals("hungarian"))
                return LanguageEnum.Hungarian;

            if (value.Equals("indonesian"))
                return LanguageEnum.Indonesian;

            if (value.Equals("irish"))
                return LanguageEnum.Irish;

            if (value.Equals("italian"))
                return LanguageEnum.Italian;

            if (value.Equals("lithuanian"))
                return LanguageEnum.Lithuanian;

            if (value.Equals("nepali"))
                return LanguageEnum.Nepali;

            if (value.Equals("norwegian"))
                return LanguageEnum.Norwegian;

            if (value.Equals("portuguese"))
                return LanguageEnum.Portuguese;

            if (value.Equals("romanian"))
                return LanguageEnum.Romanian;

            if (value.Equals("russian"))
                return LanguageEnum.Russian;

            if (value.Equals("serbian"))
                return LanguageEnum.Serbian;

            if (value.Equals("spanish"))
                return LanguageEnum.Spanish;

            if (value.Equals("swedish"))
                return LanguageEnum.Swedish;

            if (value.Equals("tamil"))
                return LanguageEnum.Tamil;

            if (value.Equals("turkish"))
                return LanguageEnum.Turkish;

            if (value.Equals("yiddish"))
                return LanguageEnum.Yiddish;

            if (value.Equals("simple"))
                return LanguageEnum.Simple;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LanguageEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? LanguageEnumToJsonValue(LanguageEnum? value)
        {
            if (value == null)
                return null;

            if (value == LanguageEnum.Arabic)
                return "arabic";

            if (value == LanguageEnum.Armenian)
                return "armenian";

            if (value == LanguageEnum.Basque)
                return "basque";

            if (value == LanguageEnum.Catalan)
                return "catalan";

            if (value == LanguageEnum.Danish)
                return "danish";

            if (value == LanguageEnum.Dutch)
                return "dutch";

            if (value == LanguageEnum.English)
                return "english";

            if (value == LanguageEnum.Finnish)
                return "finnish";

            if (value == LanguageEnum.French)
                return "french";

            if (value == LanguageEnum.German)
                return "german";

            if (value == LanguageEnum.Greek)
                return "greek";

            if (value == LanguageEnum.Hindi)
                return "hindi";

            if (value == LanguageEnum.Hungarian)
                return "hungarian";

            if (value == LanguageEnum.Indonesian)
                return "indonesian";

            if (value == LanguageEnum.Irish)
                return "irish";

            if (value == LanguageEnum.Italian)
                return "italian";

            if (value == LanguageEnum.Lithuanian)
                return "lithuanian";

            if (value == LanguageEnum.Nepali)
                return "nepali";

            if (value == LanguageEnum.Norwegian)
                return "norwegian";

            if (value == LanguageEnum.Portuguese)
                return "portuguese";

            if (value == LanguageEnum.Romanian)
                return "romanian";

            if (value == LanguageEnum.Russian)
                return "russian";

            if (value == LanguageEnum.Serbian)
                return "serbian";

            if (value == LanguageEnum.Spanish)
                return "spanish";

            if (value == LanguageEnum.Swedish)
                return "swedish";

            if (value == LanguageEnum.Tamil)
                return "tamil";

            if (value == LanguageEnum.Turkish)
                return "turkish";

            if (value == LanguageEnum.Yiddish)
                return "yiddish";

            if (value == LanguageEnum.Simple)
                return "simple";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LanguageEnum?> LanguageOption { get; private set; }

        /// <summary>
        /// Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.
        /// </summary>
        /// <value>Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.</value>
        /* <example>english</example> */
        [JsonPropertyName("language")]
        public LanguageEnum? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Text to ingest
        /// </summary>
        /// <value>Text to ingest</value>
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Unique identifier for the document to ingest.
        /// </summary>
        /// <value>Unique identifier for the document to ingest.</value>
        /* <example>20250225.103045.abcd1234efgh5678</example> */
        [JsonPropertyName("documentId")]
        public string DocumentId { get; set; }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexOption { get; private set; }

        /// <summary>
        /// Optional index name where the document will be stored.
        /// </summary>
        /// <value>Optional index name where the document will be stored.</value>
        /* <example>my-index</example> */
        [JsonPropertyName("index")]
        public string? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebHookUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebHookUrlOption { get; private set; }

        /// <summary>
        /// Optional webhook URL to notify upon completion.
        /// </summary>
        /// <value>Optional webhook URL to notify upon completion.</value>
        /* <example>https://example.com/webhook</example> */
        [JsonPropertyName("webHookUrl")]
        public string? WebHookUrl { get { return this.WebHookUrlOption; } set { this.WebHookUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddingModelName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmbeddingModelNameOption { get; private set; }

        /// <summary>
        /// Optional name of the embedding model to use during ingestion.
        /// </summary>
        /// <value>Optional name of the embedding model to use during ingestion.</value>
        /* <example>embedding</example> */
        [JsonPropertyName("embeddingModelName")]
        public string? EmbeddingModelName { get { return this.EmbeddingModelNameOption; } set { this.EmbeddingModelNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Context
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ContextOption { get; private set; }

        /// <summary>
        /// Optional key-value pairs for additional context or metadata.
        /// </summary>
        /// <value>Optional key-value pairs for additional context or metadata.</value>
        /* <example>{&quot;userId&quot;:&quot;12345&quot;,&quot;priority&quot;:10,&quot;isTest&quot;:false}</example> */
        [JsonPropertyName("context")]
        public Dictionary<string, string>? Context { get { return this.ContextOption; } set { this.ContextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, List<string>>?> TagsOption { get; private set; }

        /// <summary>
        /// A collection of tags associated with the document. Tags can be language-specific.
        /// </summary>
        /// <value>A collection of tags associated with the document. Tags can be language-specific.</value>
        /* <example>{&quot;en&quot;:[&quot;Hello&quot;,&quot;World&quot;],&quot;fr&quot;:[&quot;Bonjour&quot;]}</example> */
        [JsonPropertyName("tags")]
        public Dictionary<string, List<string>>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IngestionPipeline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> IngestionPipelineOption { get; private set; }

        /// <summary>
        /// Optional list of ingestion pipeline steps. Allows custom processing.
        /// </summary>
        /// <value>Optional list of ingestion pipeline steps. Allows custom processing.</value>
        /* <example>[&quot;step1&quot;,&quot;step2&quot;,&quot;step3&quot;]</example> */
        [JsonPropertyName("ingestionPipeline")]
        public List<string>? IngestionPipeline { get { return this.IngestionPipelineOption; } set { this.IngestionPipelineOption = new(value); } }

        /// <summary>
        /// Used to track the state of LanguageAutoDetection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LanguageAutoDetectionOption { get; private set; }

        /// <summary>
        /// Enable automatic language detection for document content.
        /// </summary>
        /// <value>Enable automatic language detection for document content.</value>
        /* <example>true</example> */
        [JsonPropertyName("languageAutoDetection")]
        public bool? LanguageAutoDetection { get { return this.LanguageAutoDetectionOption; } set { this.LanguageAutoDetectionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IngestTextDocumentRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  WebHookUrl: ").Append(WebHookUrl).Append("\n");
            sb.Append("  EmbeddingModelName: ").Append(EmbeddingModelName).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IngestionPipeline: ").Append(IngestionPipeline).Append("\n");
            sb.Append("  LanguageAutoDetection: ").Append(LanguageAutoDetection).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IngestTextDocumentRequest" />
    /// </summary>
    public class IngestTextDocumentRequestJsonConverter : JsonConverter<IngestTextDocumentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="IngestTextDocumentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IngestTextDocumentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> text = default;
            Option<string?> documentId = default;
            Option<string?> index = default;
            Option<string?> webHookUrl = default;
            Option<string?> embeddingModelName = default;
            Option<Dictionary<string, string>?> context = default;
            Option<Dictionary<string, List<string>>?> tags = default;
            Option<List<string>?> ingestionPipeline = default;
            Option<bool?> languageAutoDetection = default;
            Option<IngestTextDocumentRequest.LanguageEnum?> language = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "documentId":
                            documentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "index":
                            index = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "webHookUrl":
                            webHookUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "embeddingModelName":
                            embeddingModelName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "context":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                context = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<Dictionary<string, List<string>>?>(JsonSerializer.Deserialize<Dictionary<string, List<string>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ingestionPipeline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ingestionPipeline = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "languageAutoDetection":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                languageAutoDetection = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "language":
                            string? languageRawValue = utf8JsonReader.GetString();
                            if (languageRawValue != null)
                                language = new Option<IngestTextDocumentRequest.LanguageEnum?>(IngestTextDocumentRequest.LanguageEnumFromStringOrDefault(languageRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class IngestTextDocumentRequest.", nameof(text));

            if (!documentId.IsSet)
                throw new ArgumentException("Property is required for class IngestTextDocumentRequest.", nameof(documentId));

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class IngestTextDocumentRequest.");

            if (documentId.IsSet && documentId.Value == null)
                throw new ArgumentNullException(nameof(documentId), "Property is not nullable for class IngestTextDocumentRequest.");

            if (languageAutoDetection.IsSet && languageAutoDetection.Value == null)
                throw new ArgumentNullException(nameof(languageAutoDetection), "Property is not nullable for class IngestTextDocumentRequest.");

            return new IngestTextDocumentRequest(text.Value!, documentId.Value!, index, webHookUrl, embeddingModelName, context, tags, ingestionPipeline, languageAutoDetection, language);
        }

        /// <summary>
        /// Serializes a <see cref="IngestTextDocumentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ingestTextDocumentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IngestTextDocumentRequest ingestTextDocumentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ingestTextDocumentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IngestTextDocumentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ingestTextDocumentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IngestTextDocumentRequest ingestTextDocumentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ingestTextDocumentRequest.Text == null)
                throw new ArgumentNullException(nameof(ingestTextDocumentRequest.Text), "Property is required for class IngestTextDocumentRequest.");

            if (ingestTextDocumentRequest.DocumentId == null)
                throw new ArgumentNullException(nameof(ingestTextDocumentRequest.DocumentId), "Property is required for class IngestTextDocumentRequest.");

            writer.WriteString("text", ingestTextDocumentRequest.Text);

            writer.WriteString("documentId", ingestTextDocumentRequest.DocumentId);

            if (ingestTextDocumentRequest.IndexOption.IsSet)
                if (ingestTextDocumentRequest.IndexOption.Value != null)
                    writer.WriteString("index", ingestTextDocumentRequest.Index);
                else
                    writer.WriteNull("index");

            if (ingestTextDocumentRequest.WebHookUrlOption.IsSet)
                if (ingestTextDocumentRequest.WebHookUrlOption.Value != null)
                    writer.WriteString("webHookUrl", ingestTextDocumentRequest.WebHookUrl);
                else
                    writer.WriteNull("webHookUrl");

            if (ingestTextDocumentRequest.EmbeddingModelNameOption.IsSet)
                if (ingestTextDocumentRequest.EmbeddingModelNameOption.Value != null)
                    writer.WriteString("embeddingModelName", ingestTextDocumentRequest.EmbeddingModelName);
                else
                    writer.WriteNull("embeddingModelName");

            if (ingestTextDocumentRequest.ContextOption.IsSet)
                if (ingestTextDocumentRequest.ContextOption.Value != null)
                {
                    writer.WritePropertyName("context");
                    JsonSerializer.Serialize(writer, ingestTextDocumentRequest.Context, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("context");
            if (ingestTextDocumentRequest.TagsOption.IsSet)
                if (ingestTextDocumentRequest.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, ingestTextDocumentRequest.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (ingestTextDocumentRequest.IngestionPipelineOption.IsSet)
                if (ingestTextDocumentRequest.IngestionPipelineOption.Value != null)
                {
                    writer.WritePropertyName("ingestionPipeline");
                    JsonSerializer.Serialize(writer, ingestTextDocumentRequest.IngestionPipeline, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ingestionPipeline");
            if (ingestTextDocumentRequest.LanguageAutoDetectionOption.IsSet)
                writer.WriteBoolean("languageAutoDetection", ingestTextDocumentRequest.LanguageAutoDetectionOption.Value!.Value);

            var languageRawValue = IngestTextDocumentRequest.LanguageEnumToJsonValue(ingestTextDocumentRequest.LanguageOption.Value!.Value);
            if (languageRawValue != null)
                writer.WriteString("language", languageRawValue);
            else
                writer.WriteNull("language");
        }
    }
}
