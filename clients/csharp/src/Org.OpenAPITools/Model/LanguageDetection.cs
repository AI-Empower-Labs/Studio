// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LanguageDetection
    /// </summary>
    public partial class LanguageDetection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageDetection" /> class.
        /// </summary>
        /// <param name="languageCode">languageCode</param>
        /// <param name="confidence">confidence</param>
        [JsonConstructor]
        public LanguageDetection(Option<LanguageCodeEnum?> languageCode = default, Option<float?> confidence = default)
        {
            LanguageCodeOption = languageCode;
            ConfidenceOption = confidence;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines LanguageCode
        /// </summary>
        public enum LanguageCodeEnum
        {
            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            Ar = 1,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            Az = 2,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            Bg = 3,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            Bn = 4,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            Ca = 5,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            Cs = 6,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            Da = 7,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            De = 8,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            El = 9,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            En = 10,

            /// <summary>
            /// Enum Eo for value: eo
            /// </summary>
            Eo = 11,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            Es = 12,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            Et = 13,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            Fa = 14,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            Fi = 15,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            Fr = 16,

            /// <summary>
            /// Enum Ga for value: ga
            /// </summary>
            Ga = 17,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            He = 18,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            Hi = 19,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            Hu = 20,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            Id = 21,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            It = 22,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            Ja = 23,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            Ko = 24,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            Lt = 25,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            Lv = 26,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            Ms = 27,

            /// <summary>
            /// Enum Nb for value: nb
            /// </summary>
            Nb = 28,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            Nl = 29,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            Pl = 30,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            Pt = 31,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            Ro = 32,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            Ru = 33,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            Sk = 34,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            Sl = 35,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            Sq = 36,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            Sv = 37,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            Th = 38,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            Tl = 39,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            Tr = 40,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            Uk = 41,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            Zh = 42,

            /// <summary>
            /// Enum Zt for value: zt
            /// </summary>
            Zt = 43
        }

        /// <summary>
        /// Returns a <see cref="LanguageCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LanguageCodeEnum LanguageCodeEnumFromString(string value)
        {
            if (value.Equals("ar"))
                return LanguageCodeEnum.Ar;

            if (value.Equals("az"))
                return LanguageCodeEnum.Az;

            if (value.Equals("bg"))
                return LanguageCodeEnum.Bg;

            if (value.Equals("bn"))
                return LanguageCodeEnum.Bn;

            if (value.Equals("ca"))
                return LanguageCodeEnum.Ca;

            if (value.Equals("cs"))
                return LanguageCodeEnum.Cs;

            if (value.Equals("da"))
                return LanguageCodeEnum.Da;

            if (value.Equals("de"))
                return LanguageCodeEnum.De;

            if (value.Equals("el"))
                return LanguageCodeEnum.El;

            if (value.Equals("en"))
                return LanguageCodeEnum.En;

            if (value.Equals("eo"))
                return LanguageCodeEnum.Eo;

            if (value.Equals("es"))
                return LanguageCodeEnum.Es;

            if (value.Equals("et"))
                return LanguageCodeEnum.Et;

            if (value.Equals("fa"))
                return LanguageCodeEnum.Fa;

            if (value.Equals("fi"))
                return LanguageCodeEnum.Fi;

            if (value.Equals("fr"))
                return LanguageCodeEnum.Fr;

            if (value.Equals("ga"))
                return LanguageCodeEnum.Ga;

            if (value.Equals("he"))
                return LanguageCodeEnum.He;

            if (value.Equals("hi"))
                return LanguageCodeEnum.Hi;

            if (value.Equals("hu"))
                return LanguageCodeEnum.Hu;

            if (value.Equals("id"))
                return LanguageCodeEnum.Id;

            if (value.Equals("it"))
                return LanguageCodeEnum.It;

            if (value.Equals("ja"))
                return LanguageCodeEnum.Ja;

            if (value.Equals("ko"))
                return LanguageCodeEnum.Ko;

            if (value.Equals("lt"))
                return LanguageCodeEnum.Lt;

            if (value.Equals("lv"))
                return LanguageCodeEnum.Lv;

            if (value.Equals("ms"))
                return LanguageCodeEnum.Ms;

            if (value.Equals("nb"))
                return LanguageCodeEnum.Nb;

            if (value.Equals("nl"))
                return LanguageCodeEnum.Nl;

            if (value.Equals("pl"))
                return LanguageCodeEnum.Pl;

            if (value.Equals("pt"))
                return LanguageCodeEnum.Pt;

            if (value.Equals("ro"))
                return LanguageCodeEnum.Ro;

            if (value.Equals("ru"))
                return LanguageCodeEnum.Ru;

            if (value.Equals("sk"))
                return LanguageCodeEnum.Sk;

            if (value.Equals("sl"))
                return LanguageCodeEnum.Sl;

            if (value.Equals("sq"))
                return LanguageCodeEnum.Sq;

            if (value.Equals("sv"))
                return LanguageCodeEnum.Sv;

            if (value.Equals("th"))
                return LanguageCodeEnum.Th;

            if (value.Equals("tl"))
                return LanguageCodeEnum.Tl;

            if (value.Equals("tr"))
                return LanguageCodeEnum.Tr;

            if (value.Equals("uk"))
                return LanguageCodeEnum.Uk;

            if (value.Equals("zh"))
                return LanguageCodeEnum.Zh;

            if (value.Equals("zt"))
                return LanguageCodeEnum.Zt;

            throw new NotImplementedException($"Could not convert value to type LanguageCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LanguageCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LanguageCodeEnum? LanguageCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ar"))
                return LanguageCodeEnum.Ar;

            if (value.Equals("az"))
                return LanguageCodeEnum.Az;

            if (value.Equals("bg"))
                return LanguageCodeEnum.Bg;

            if (value.Equals("bn"))
                return LanguageCodeEnum.Bn;

            if (value.Equals("ca"))
                return LanguageCodeEnum.Ca;

            if (value.Equals("cs"))
                return LanguageCodeEnum.Cs;

            if (value.Equals("da"))
                return LanguageCodeEnum.Da;

            if (value.Equals("de"))
                return LanguageCodeEnum.De;

            if (value.Equals("el"))
                return LanguageCodeEnum.El;

            if (value.Equals("en"))
                return LanguageCodeEnum.En;

            if (value.Equals("eo"))
                return LanguageCodeEnum.Eo;

            if (value.Equals("es"))
                return LanguageCodeEnum.Es;

            if (value.Equals("et"))
                return LanguageCodeEnum.Et;

            if (value.Equals("fa"))
                return LanguageCodeEnum.Fa;

            if (value.Equals("fi"))
                return LanguageCodeEnum.Fi;

            if (value.Equals("fr"))
                return LanguageCodeEnum.Fr;

            if (value.Equals("ga"))
                return LanguageCodeEnum.Ga;

            if (value.Equals("he"))
                return LanguageCodeEnum.He;

            if (value.Equals("hi"))
                return LanguageCodeEnum.Hi;

            if (value.Equals("hu"))
                return LanguageCodeEnum.Hu;

            if (value.Equals("id"))
                return LanguageCodeEnum.Id;

            if (value.Equals("it"))
                return LanguageCodeEnum.It;

            if (value.Equals("ja"))
                return LanguageCodeEnum.Ja;

            if (value.Equals("ko"))
                return LanguageCodeEnum.Ko;

            if (value.Equals("lt"))
                return LanguageCodeEnum.Lt;

            if (value.Equals("lv"))
                return LanguageCodeEnum.Lv;

            if (value.Equals("ms"))
                return LanguageCodeEnum.Ms;

            if (value.Equals("nb"))
                return LanguageCodeEnum.Nb;

            if (value.Equals("nl"))
                return LanguageCodeEnum.Nl;

            if (value.Equals("pl"))
                return LanguageCodeEnum.Pl;

            if (value.Equals("pt"))
                return LanguageCodeEnum.Pt;

            if (value.Equals("ro"))
                return LanguageCodeEnum.Ro;

            if (value.Equals("ru"))
                return LanguageCodeEnum.Ru;

            if (value.Equals("sk"))
                return LanguageCodeEnum.Sk;

            if (value.Equals("sl"))
                return LanguageCodeEnum.Sl;

            if (value.Equals("sq"))
                return LanguageCodeEnum.Sq;

            if (value.Equals("sv"))
                return LanguageCodeEnum.Sv;

            if (value.Equals("th"))
                return LanguageCodeEnum.Th;

            if (value.Equals("tl"))
                return LanguageCodeEnum.Tl;

            if (value.Equals("tr"))
                return LanguageCodeEnum.Tr;

            if (value.Equals("uk"))
                return LanguageCodeEnum.Uk;

            if (value.Equals("zh"))
                return LanguageCodeEnum.Zh;

            if (value.Equals("zt"))
                return LanguageCodeEnum.Zt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LanguageCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LanguageCodeEnumToJsonValue(LanguageCodeEnum? value)
        {
            if (value == LanguageCodeEnum.Ar)
                return "ar";

            if (value == LanguageCodeEnum.Az)
                return "az";

            if (value == LanguageCodeEnum.Bg)
                return "bg";

            if (value == LanguageCodeEnum.Bn)
                return "bn";

            if (value == LanguageCodeEnum.Ca)
                return "ca";

            if (value == LanguageCodeEnum.Cs)
                return "cs";

            if (value == LanguageCodeEnum.Da)
                return "da";

            if (value == LanguageCodeEnum.De)
                return "de";

            if (value == LanguageCodeEnum.El)
                return "el";

            if (value == LanguageCodeEnum.En)
                return "en";

            if (value == LanguageCodeEnum.Eo)
                return "eo";

            if (value == LanguageCodeEnum.Es)
                return "es";

            if (value == LanguageCodeEnum.Et)
                return "et";

            if (value == LanguageCodeEnum.Fa)
                return "fa";

            if (value == LanguageCodeEnum.Fi)
                return "fi";

            if (value == LanguageCodeEnum.Fr)
                return "fr";

            if (value == LanguageCodeEnum.Ga)
                return "ga";

            if (value == LanguageCodeEnum.He)
                return "he";

            if (value == LanguageCodeEnum.Hi)
                return "hi";

            if (value == LanguageCodeEnum.Hu)
                return "hu";

            if (value == LanguageCodeEnum.Id)
                return "id";

            if (value == LanguageCodeEnum.It)
                return "it";

            if (value == LanguageCodeEnum.Ja)
                return "ja";

            if (value == LanguageCodeEnum.Ko)
                return "ko";

            if (value == LanguageCodeEnum.Lt)
                return "lt";

            if (value == LanguageCodeEnum.Lv)
                return "lv";

            if (value == LanguageCodeEnum.Ms)
                return "ms";

            if (value == LanguageCodeEnum.Nb)
                return "nb";

            if (value == LanguageCodeEnum.Nl)
                return "nl";

            if (value == LanguageCodeEnum.Pl)
                return "pl";

            if (value == LanguageCodeEnum.Pt)
                return "pt";

            if (value == LanguageCodeEnum.Ro)
                return "ro";

            if (value == LanguageCodeEnum.Ru)
                return "ru";

            if (value == LanguageCodeEnum.Sk)
                return "sk";

            if (value == LanguageCodeEnum.Sl)
                return "sl";

            if (value == LanguageCodeEnum.Sq)
                return "sq";

            if (value == LanguageCodeEnum.Sv)
                return "sv";

            if (value == LanguageCodeEnum.Th)
                return "th";

            if (value == LanguageCodeEnum.Tl)
                return "tl";

            if (value == LanguageCodeEnum.Tr)
                return "tr";

            if (value == LanguageCodeEnum.Uk)
                return "uk";

            if (value == LanguageCodeEnum.Zh)
                return "zh";

            if (value == LanguageCodeEnum.Zt)
                return "zt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of LanguageCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LanguageCodeEnum?> LanguageCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [JsonPropertyName("languageCode")]
        public LanguageCodeEnum? LanguageCode { get { return this.LanguageCodeOption; } set { this.LanguageCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Confidence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> ConfidenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [JsonPropertyName("confidence")]
        public float? Confidence { get { return this.ConfidenceOption; } set { this.ConfidenceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LanguageDetection {\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LanguageDetection" />
    /// </summary>
    public class LanguageDetectionJsonConverter : JsonConverter<LanguageDetection>
    {
        /// <summary>
        /// Deserializes json to <see cref="LanguageDetection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LanguageDetection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<LanguageDetection.LanguageCodeEnum?> languageCode = default;
            Option<float?> confidence = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "languageCode":
                            string? languageCodeRawValue = utf8JsonReader.GetString();
                            if (languageCodeRawValue != null)
                                languageCode = new Option<LanguageDetection.LanguageCodeEnum?>(LanguageDetection.LanguageCodeEnumFromStringOrDefault(languageCodeRawValue));
                            break;
                        case "confidence":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                confidence = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (languageCode.IsSet && languageCode.Value == null)
                throw new ArgumentNullException(nameof(languageCode), "Property is not nullable for class LanguageDetection.");

            if (confidence.IsSet && confidence.Value == null)
                throw new ArgumentNullException(nameof(confidence), "Property is not nullable for class LanguageDetection.");

            return new LanguageDetection(languageCode, confidence);
        }

        /// <summary>
        /// Serializes a <see cref="LanguageDetection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="languageDetection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LanguageDetection languageDetection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, languageDetection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LanguageDetection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="languageDetection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LanguageDetection languageDetection, JsonSerializerOptions jsonSerializerOptions)
        {
            var languageCodeRawValue = LanguageDetection.LanguageCodeEnumToJsonValue(languageDetection.LanguageCodeOption.Value!.Value);
            writer.WriteString("languageCode", languageCodeRawValue);
            if (languageDetection.ConfidenceOption.IsSet)
                writer.WriteNumber("confidence", languageDetection.ConfidenceOption.Value!.Value);
        }
    }
}
