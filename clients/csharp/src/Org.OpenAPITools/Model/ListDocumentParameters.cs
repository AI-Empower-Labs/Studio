// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ListDocumentParameters
    /// </summary>
    public partial class ListDocumentParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListDocumentParameters" /> class.
        /// </summary>
        /// <param name="index">Optional index to specify which index to search in. Defaults to &#39;default&#39;</param>
        /// <param name="filter">Optional filtering of document id(s) and/or tags</param>
        /// <param name="withEmbeddings">Optionally specifies if embedding should be returned in response. Default is false</param>
        /// <param name="limit">Optional filter for specifying maximum number of entries to return. Defaults to 3</param>
        /// <param name="offset">Optional filter for specifying list offset for paging. Default is 0</param>
        [JsonConstructor]
        public ListDocumentParameters(Option<string?> index = default, Option<List<DocumentFilters>?> filter = default, Option<bool?> withEmbeddings = default, Option<int?> limit = default, Option<int?> offset = default)
        {
            IndexOption = index;
            FilterOption = filter;
            WithEmbeddingsOption = withEmbeddings;
            LimitOption = limit;
            OffsetOption = offset;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexOption { get; private set; }

        /// <summary>
        /// Optional index to specify which index to search in. Defaults to &#39;default&#39;
        /// </summary>
        /// <value>Optional index to specify which index to search in. Defaults to &#39;default&#39;</value>
        [JsonPropertyName("index")]
        public string? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Filter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DocumentFilters>?> FilterOption { get; private set; }

        /// <summary>
        /// Optional filtering of document id(s) and/or tags
        /// </summary>
        /// <value>Optional filtering of document id(s) and/or tags</value>
        [JsonPropertyName("filter")]
        public List<DocumentFilters>? Filter { get { return this.FilterOption; } set { this.FilterOption = new(value); } }

        /// <summary>
        /// Used to track the state of WithEmbeddings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WithEmbeddingsOption { get; private set; }

        /// <summary>
        /// Optionally specifies if embedding should be returned in response. Default is false
        /// </summary>
        /// <value>Optionally specifies if embedding should be returned in response. Default is false</value>
        [JsonPropertyName("withEmbeddings")]
        public bool? WithEmbeddings { get { return this.WithEmbeddingsOption; } set { this.WithEmbeddingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Optional filter for specifying maximum number of entries to return. Defaults to 3
        /// </summary>
        /// <value>Optional filter for specifying maximum number of entries to return. Defaults to 3</value>
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Offset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OffsetOption { get; private set; }

        /// <summary>
        /// Optional filter for specifying list offset for paging. Default is 0
        /// </summary>
        /// <value>Optional filter for specifying list offset for paging. Default is 0</value>
        [JsonPropertyName("offset")]
        public int? Offset { get { return this.OffsetOption; } set { this.OffsetOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListDocumentParameters {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  WithEmbeddings: ").Append(WithEmbeddings).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListDocumentParameters" />
    /// </summary>
    public class ListDocumentParametersJsonConverter : JsonConverter<ListDocumentParameters>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListDocumentParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListDocumentParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> index = default;
            Option<List<DocumentFilters>?> filter = default;
            Option<bool?> withEmbeddings = default;
            Option<int?> limit = default;
            Option<int?> offset = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "index":
                            index = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "filter":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                filter = new Option<List<DocumentFilters>?>(JsonSerializer.Deserialize<List<DocumentFilters>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "withEmbeddings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                withEmbeddings = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "limit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limit = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "offset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                offset = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ListDocumentParameters(index, filter, withEmbeddings, limit, offset);
        }

        /// <summary>
        /// Serializes a <see cref="ListDocumentParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listDocumentParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListDocumentParameters listDocumentParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listDocumentParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListDocumentParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listDocumentParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListDocumentParameters listDocumentParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listDocumentParameters.IndexOption.IsSet)
                if (listDocumentParameters.IndexOption.Value != null)
                    writer.WriteString("index", listDocumentParameters.Index);
                else
                    writer.WriteNull("index");

            if (listDocumentParameters.FilterOption.IsSet)
                if (listDocumentParameters.FilterOption.Value != null)
                {
                    writer.WritePropertyName("filter");
                    JsonSerializer.Serialize(writer, listDocumentParameters.Filter, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("filter");
            if (listDocumentParameters.WithEmbeddingsOption.IsSet)
                if (listDocumentParameters.WithEmbeddingsOption.Value != null)
                    writer.WriteBoolean("withEmbeddings", listDocumentParameters.WithEmbeddingsOption.Value!.Value);
                else
                    writer.WriteNull("withEmbeddings");

            if (listDocumentParameters.LimitOption.IsSet)
                if (listDocumentParameters.LimitOption.Value != null)
                    writer.WriteNumber("limit", listDocumentParameters.LimitOption.Value!.Value);
                else
                    writer.WriteNull("limit");

            if (listDocumentParameters.OffsetOption.IsSet)
                if (listDocumentParameters.OffsetOption.Value != null)
                    writer.WriteNumber("offset", listDocumentParameters.OffsetOption.Value!.Value);
                else
                    writer.WriteNull("offset");
        }
    }
}
