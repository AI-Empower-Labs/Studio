/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ReRankDocumentsRequest
    /// </summary>
    [DataContract(Name = "ReRankDocumentsRequest")]
    public partial class ReRankDocumentsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReRankDocumentsRequest" /> class.
        /// </summary>
        /// <param name="model">Optional embedding model. Defaults to configured default.</param>
        /// <param name="query">Semantic query to find matching documents.</param>
        /// <param name="documents">Optional index to specify which index to search in. Defaults to &#39;default&#39;.</param>
        /// <param name="limit">Optional filter for specifying maximum number of entries to return. Defaults to 3.</param>
        public ReRankDocumentsRequest(string model = default(string), string query = default(string), List<string> documents = default(List<string>), int? limit = default(int?))
        {
            this.Model = model;
            this.Query = query;
            this.Documents = documents;
            this.Limit = limit;
        }

        /// <summary>
        /// Optional embedding model. Defaults to configured default
        /// </summary>
        /// <value>Optional embedding model. Defaults to configured default</value>
        [DataMember(Name = "model", EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Semantic query to find matching documents
        /// </summary>
        /// <value>Semantic query to find matching documents</value>
        [DataMember(Name = "query", EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Optional index to specify which index to search in. Defaults to &#39;default&#39;
        /// </summary>
        /// <value>Optional index to specify which index to search in. Defaults to &#39;default&#39;</value>
        [DataMember(Name = "documents", EmitDefaultValue = true)]
        public List<string> Documents { get; set; }

        /// <summary>
        /// Optional filter for specifying maximum number of entries to return. Defaults to 3
        /// </summary>
        /// <value>Optional filter for specifying maximum number of entries to return. Defaults to 3</value>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public int? Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReRankDocumentsRequest {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
