// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ReRankDocumentsRequest
    /// </summary>
    public partial class ReRankDocumentsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReRankDocumentsRequest" /> class.
        /// </summary>
        /// <param name="model">Optional embedding model. Defaults to configured default</param>
        /// <param name="query">Semantic query to find matching documents</param>
        /// <param name="documents">Optional index to specify which index to search in. Defaults to &#39;default&#39;</param>
        /// <param name="limit">Optional filter for specifying maximum number of entries to return. Defaults to 3</param>
        [JsonConstructor]
        public ReRankDocumentsRequest(Option<string?> model = default, Option<string?> query = default, Option<List<string>?> documents = default, Option<int?> limit = default)
        {
            ModelOption = model;
            QueryOption = query;
            DocumentsOption = documents;
            LimitOption = limit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Model
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModelOption { get; private set; }

        /// <summary>
        /// Optional embedding model. Defaults to configured default
        /// </summary>
        /// <value>Optional embedding model. Defaults to configured default</value>
        [JsonPropertyName("model")]
        public string? Model { get { return this.ModelOption; } set { this.ModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Query
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryOption { get; private set; }

        /// <summary>
        /// Semantic query to find matching documents
        /// </summary>
        /// <value>Semantic query to find matching documents</value>
        [JsonPropertyName("query")]
        public string? Query { get { return this.QueryOption; } set { this.QueryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Documents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DocumentsOption { get; private set; }

        /// <summary>
        /// Optional index to specify which index to search in. Defaults to &#39;default&#39;
        /// </summary>
        /// <value>Optional index to specify which index to search in. Defaults to &#39;default&#39;</value>
        [JsonPropertyName("documents")]
        public List<string>? Documents { get { return this.DocumentsOption; } set { this.DocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Optional filter for specifying maximum number of entries to return. Defaults to 3
        /// </summary>
        /// <value>Optional filter for specifying maximum number of entries to return. Defaults to 3</value>
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReRankDocumentsRequest {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReRankDocumentsRequest" />
    /// </summary>
    public class ReRankDocumentsRequestJsonConverter : JsonConverter<ReRankDocumentsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReRankDocumentsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReRankDocumentsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> model = default;
            Option<string?> query = default;
            Option<List<string>?> documents = default;
            Option<int?> limit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "query":
                            query = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "documents":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                documents = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "limit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limit = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReRankDocumentsRequest(model, query, documents, limit);
        }

        /// <summary>
        /// Serializes a <see cref="ReRankDocumentsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reRankDocumentsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReRankDocumentsRequest reRankDocumentsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, reRankDocumentsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReRankDocumentsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reRankDocumentsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReRankDocumentsRequest reRankDocumentsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reRankDocumentsRequest.ModelOption.IsSet)
                if (reRankDocumentsRequest.ModelOption.Value != null)
                    writer.WriteString("model", reRankDocumentsRequest.Model);
                else
                    writer.WriteNull("model");

            if (reRankDocumentsRequest.QueryOption.IsSet)
                if (reRankDocumentsRequest.QueryOption.Value != null)
                    writer.WriteString("query", reRankDocumentsRequest.Query);
                else
                    writer.WriteNull("query");

            if (reRankDocumentsRequest.DocumentsOption.IsSet)
                if (reRankDocumentsRequest.DocumentsOption.Value != null)
                {
                    writer.WritePropertyName("documents");
                    JsonSerializer.Serialize(writer, reRankDocumentsRequest.Documents, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("documents");
            if (reRankDocumentsRequest.LimitOption.IsSet)
                if (reRankDocumentsRequest.LimitOption.Value != null)
                    writer.WriteNumber("limit", reRankDocumentsRequest.LimitOption.Value!.Value);
                else
                    writer.WriteNull("limit");
        }
    }
}
