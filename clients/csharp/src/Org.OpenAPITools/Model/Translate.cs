// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a translation request with the source text, source language, and target language.
    /// </summary>
    public partial class Translate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Translate" /> class.
        /// </summary>
        /// <param name="text">The input text to be translated.</param>
        /// <param name="source">The language code of the input text.</param>
        /// <param name="target">The language code of the desired output translation.</param>
        [JsonConstructor]
        public Translate(Option<string?> text = default, Option<SourceEnum?> source = default, Option<TargetEnum?> target = default)
        {
            TextOption = text;
            SourceOption = source;
            TargetOption = target;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The language code of the input text.
        /// </summary>
        /// <value>The language code of the input text.</value>
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            Auto = 1,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            Ar = 2,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            Az = 3,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            Bg = 4,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            Bn = 5,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            Ca = 6,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            Cs = 7,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            Da = 8,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            De = 9,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            El = 10,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            En = 11,

            /// <summary>
            /// Enum Eo for value: eo
            /// </summary>
            Eo = 12,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            Es = 13,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            Et = 14,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            Fa = 15,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            Fi = 16,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            Fr = 17,

            /// <summary>
            /// Enum Ga for value: ga
            /// </summary>
            Ga = 18,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            He = 19,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            Hi = 20,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            Hu = 21,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            Id = 22,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            It = 23,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            Ja = 24,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            Ko = 25,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            Lt = 26,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            Lv = 27,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            Ms = 28,

            /// <summary>
            /// Enum Nb for value: nb
            /// </summary>
            Nb = 29,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            Nl = 30,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            Pl = 31,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            Pt = 32,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            Ro = 33,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            Ru = 34,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            Sk = 35,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            Sl = 36,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            Sq = 37,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            Sv = 38,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            Th = 39,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            Tl = 40,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            Tr = 41,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            Uk = 42,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            Zh = 43,

            /// <summary>
            /// Enum Zt for value: zt
            /// </summary>
            Zt = 44
        }

        /// <summary>
        /// Returns a <see cref="SourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SourceEnum SourceEnumFromString(string value)
        {
            if (value.Equals("auto"))
                return SourceEnum.Auto;

            if (value.Equals("ar"))
                return SourceEnum.Ar;

            if (value.Equals("az"))
                return SourceEnum.Az;

            if (value.Equals("bg"))
                return SourceEnum.Bg;

            if (value.Equals("bn"))
                return SourceEnum.Bn;

            if (value.Equals("ca"))
                return SourceEnum.Ca;

            if (value.Equals("cs"))
                return SourceEnum.Cs;

            if (value.Equals("da"))
                return SourceEnum.Da;

            if (value.Equals("de"))
                return SourceEnum.De;

            if (value.Equals("el"))
                return SourceEnum.El;

            if (value.Equals("en"))
                return SourceEnum.En;

            if (value.Equals("eo"))
                return SourceEnum.Eo;

            if (value.Equals("es"))
                return SourceEnum.Es;

            if (value.Equals("et"))
                return SourceEnum.Et;

            if (value.Equals("fa"))
                return SourceEnum.Fa;

            if (value.Equals("fi"))
                return SourceEnum.Fi;

            if (value.Equals("fr"))
                return SourceEnum.Fr;

            if (value.Equals("ga"))
                return SourceEnum.Ga;

            if (value.Equals("he"))
                return SourceEnum.He;

            if (value.Equals("hi"))
                return SourceEnum.Hi;

            if (value.Equals("hu"))
                return SourceEnum.Hu;

            if (value.Equals("id"))
                return SourceEnum.Id;

            if (value.Equals("it"))
                return SourceEnum.It;

            if (value.Equals("ja"))
                return SourceEnum.Ja;

            if (value.Equals("ko"))
                return SourceEnum.Ko;

            if (value.Equals("lt"))
                return SourceEnum.Lt;

            if (value.Equals("lv"))
                return SourceEnum.Lv;

            if (value.Equals("ms"))
                return SourceEnum.Ms;

            if (value.Equals("nb"))
                return SourceEnum.Nb;

            if (value.Equals("nl"))
                return SourceEnum.Nl;

            if (value.Equals("pl"))
                return SourceEnum.Pl;

            if (value.Equals("pt"))
                return SourceEnum.Pt;

            if (value.Equals("ro"))
                return SourceEnum.Ro;

            if (value.Equals("ru"))
                return SourceEnum.Ru;

            if (value.Equals("sk"))
                return SourceEnum.Sk;

            if (value.Equals("sl"))
                return SourceEnum.Sl;

            if (value.Equals("sq"))
                return SourceEnum.Sq;

            if (value.Equals("sv"))
                return SourceEnum.Sv;

            if (value.Equals("th"))
                return SourceEnum.Th;

            if (value.Equals("tl"))
                return SourceEnum.Tl;

            if (value.Equals("tr"))
                return SourceEnum.Tr;

            if (value.Equals("uk"))
                return SourceEnum.Uk;

            if (value.Equals("zh"))
                return SourceEnum.Zh;

            if (value.Equals("zt"))
                return SourceEnum.Zt;

            throw new NotImplementedException($"Could not convert value to type SourceEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SourceEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SourceEnum? SourceEnumFromStringOrDefault(string value)
        {
            if (value.Equals("auto"))
                return SourceEnum.Auto;

            if (value.Equals("ar"))
                return SourceEnum.Ar;

            if (value.Equals("az"))
                return SourceEnum.Az;

            if (value.Equals("bg"))
                return SourceEnum.Bg;

            if (value.Equals("bn"))
                return SourceEnum.Bn;

            if (value.Equals("ca"))
                return SourceEnum.Ca;

            if (value.Equals("cs"))
                return SourceEnum.Cs;

            if (value.Equals("da"))
                return SourceEnum.Da;

            if (value.Equals("de"))
                return SourceEnum.De;

            if (value.Equals("el"))
                return SourceEnum.El;

            if (value.Equals("en"))
                return SourceEnum.En;

            if (value.Equals("eo"))
                return SourceEnum.Eo;

            if (value.Equals("es"))
                return SourceEnum.Es;

            if (value.Equals("et"))
                return SourceEnum.Et;

            if (value.Equals("fa"))
                return SourceEnum.Fa;

            if (value.Equals("fi"))
                return SourceEnum.Fi;

            if (value.Equals("fr"))
                return SourceEnum.Fr;

            if (value.Equals("ga"))
                return SourceEnum.Ga;

            if (value.Equals("he"))
                return SourceEnum.He;

            if (value.Equals("hi"))
                return SourceEnum.Hi;

            if (value.Equals("hu"))
                return SourceEnum.Hu;

            if (value.Equals("id"))
                return SourceEnum.Id;

            if (value.Equals("it"))
                return SourceEnum.It;

            if (value.Equals("ja"))
                return SourceEnum.Ja;

            if (value.Equals("ko"))
                return SourceEnum.Ko;

            if (value.Equals("lt"))
                return SourceEnum.Lt;

            if (value.Equals("lv"))
                return SourceEnum.Lv;

            if (value.Equals("ms"))
                return SourceEnum.Ms;

            if (value.Equals("nb"))
                return SourceEnum.Nb;

            if (value.Equals("nl"))
                return SourceEnum.Nl;

            if (value.Equals("pl"))
                return SourceEnum.Pl;

            if (value.Equals("pt"))
                return SourceEnum.Pt;

            if (value.Equals("ro"))
                return SourceEnum.Ro;

            if (value.Equals("ru"))
                return SourceEnum.Ru;

            if (value.Equals("sk"))
                return SourceEnum.Sk;

            if (value.Equals("sl"))
                return SourceEnum.Sl;

            if (value.Equals("sq"))
                return SourceEnum.Sq;

            if (value.Equals("sv"))
                return SourceEnum.Sv;

            if (value.Equals("th"))
                return SourceEnum.Th;

            if (value.Equals("tl"))
                return SourceEnum.Tl;

            if (value.Equals("tr"))
                return SourceEnum.Tr;

            if (value.Equals("uk"))
                return SourceEnum.Uk;

            if (value.Equals("zh"))
                return SourceEnum.Zh;

            if (value.Equals("zt"))
                return SourceEnum.Zt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SourceEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SourceEnumToJsonValue(SourceEnum? value)
        {
            if (value == SourceEnum.Auto)
                return "auto";

            if (value == SourceEnum.Ar)
                return "ar";

            if (value == SourceEnum.Az)
                return "az";

            if (value == SourceEnum.Bg)
                return "bg";

            if (value == SourceEnum.Bn)
                return "bn";

            if (value == SourceEnum.Ca)
                return "ca";

            if (value == SourceEnum.Cs)
                return "cs";

            if (value == SourceEnum.Da)
                return "da";

            if (value == SourceEnum.De)
                return "de";

            if (value == SourceEnum.El)
                return "el";

            if (value == SourceEnum.En)
                return "en";

            if (value == SourceEnum.Eo)
                return "eo";

            if (value == SourceEnum.Es)
                return "es";

            if (value == SourceEnum.Et)
                return "et";

            if (value == SourceEnum.Fa)
                return "fa";

            if (value == SourceEnum.Fi)
                return "fi";

            if (value == SourceEnum.Fr)
                return "fr";

            if (value == SourceEnum.Ga)
                return "ga";

            if (value == SourceEnum.He)
                return "he";

            if (value == SourceEnum.Hi)
                return "hi";

            if (value == SourceEnum.Hu)
                return "hu";

            if (value == SourceEnum.Id)
                return "id";

            if (value == SourceEnum.It)
                return "it";

            if (value == SourceEnum.Ja)
                return "ja";

            if (value == SourceEnum.Ko)
                return "ko";

            if (value == SourceEnum.Lt)
                return "lt";

            if (value == SourceEnum.Lv)
                return "lv";

            if (value == SourceEnum.Ms)
                return "ms";

            if (value == SourceEnum.Nb)
                return "nb";

            if (value == SourceEnum.Nl)
                return "nl";

            if (value == SourceEnum.Pl)
                return "pl";

            if (value == SourceEnum.Pt)
                return "pt";

            if (value == SourceEnum.Ro)
                return "ro";

            if (value == SourceEnum.Ru)
                return "ru";

            if (value == SourceEnum.Sk)
                return "sk";

            if (value == SourceEnum.Sl)
                return "sl";

            if (value == SourceEnum.Sq)
                return "sq";

            if (value == SourceEnum.Sv)
                return "sv";

            if (value == SourceEnum.Th)
                return "th";

            if (value == SourceEnum.Tl)
                return "tl";

            if (value == SourceEnum.Tr)
                return "tr";

            if (value == SourceEnum.Uk)
                return "uk";

            if (value == SourceEnum.Zh)
                return "zh";

            if (value == SourceEnum.Zt)
                return "zt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Source
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SourceEnum?> SourceOption { get; private set; }

        /// <summary>
        /// The language code of the input text.
        /// </summary>
        /// <value>The language code of the input text.</value>
        [JsonPropertyName("source")]
        public SourceEnum? Source { get { return this.SourceOption; } set { this.SourceOption = new(value); } }

        /// <summary>
        /// The language code of the desired output translation.
        /// </summary>
        /// <value>The language code of the desired output translation.</value>
        public enum TargetEnum
        {
            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            Ar = 1,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            Az = 2,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            Bg = 3,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            Bn = 4,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            Ca = 5,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            Cs = 6,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            Da = 7,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            De = 8,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            El = 9,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            En = 10,

            /// <summary>
            /// Enum Eo for value: eo
            /// </summary>
            Eo = 11,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            Es = 12,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            Et = 13,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            Fa = 14,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            Fi = 15,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            Fr = 16,

            /// <summary>
            /// Enum Ga for value: ga
            /// </summary>
            Ga = 17,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            He = 18,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            Hi = 19,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            Hu = 20,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            Id = 21,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            It = 22,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            Ja = 23,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            Ko = 24,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            Lt = 25,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            Lv = 26,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            Ms = 27,

            /// <summary>
            /// Enum Nb for value: nb
            /// </summary>
            Nb = 28,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            Nl = 29,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            Pl = 30,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            Pt = 31,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            Ro = 32,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            Ru = 33,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            Sk = 34,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            Sl = 35,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            Sq = 36,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            Sv = 37,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            Th = 38,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            Tl = 39,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            Tr = 40,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            Uk = 41,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            Zh = 42,

            /// <summary>
            /// Enum Zt for value: zt
            /// </summary>
            Zt = 43
        }

        /// <summary>
        /// Returns a <see cref="TargetEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TargetEnum TargetEnumFromString(string value)
        {
            if (value.Equals("ar"))
                return TargetEnum.Ar;

            if (value.Equals("az"))
                return TargetEnum.Az;

            if (value.Equals("bg"))
                return TargetEnum.Bg;

            if (value.Equals("bn"))
                return TargetEnum.Bn;

            if (value.Equals("ca"))
                return TargetEnum.Ca;

            if (value.Equals("cs"))
                return TargetEnum.Cs;

            if (value.Equals("da"))
                return TargetEnum.Da;

            if (value.Equals("de"))
                return TargetEnum.De;

            if (value.Equals("el"))
                return TargetEnum.El;

            if (value.Equals("en"))
                return TargetEnum.En;

            if (value.Equals("eo"))
                return TargetEnum.Eo;

            if (value.Equals("es"))
                return TargetEnum.Es;

            if (value.Equals("et"))
                return TargetEnum.Et;

            if (value.Equals("fa"))
                return TargetEnum.Fa;

            if (value.Equals("fi"))
                return TargetEnum.Fi;

            if (value.Equals("fr"))
                return TargetEnum.Fr;

            if (value.Equals("ga"))
                return TargetEnum.Ga;

            if (value.Equals("he"))
                return TargetEnum.He;

            if (value.Equals("hi"))
                return TargetEnum.Hi;

            if (value.Equals("hu"))
                return TargetEnum.Hu;

            if (value.Equals("id"))
                return TargetEnum.Id;

            if (value.Equals("it"))
                return TargetEnum.It;

            if (value.Equals("ja"))
                return TargetEnum.Ja;

            if (value.Equals("ko"))
                return TargetEnum.Ko;

            if (value.Equals("lt"))
                return TargetEnum.Lt;

            if (value.Equals("lv"))
                return TargetEnum.Lv;

            if (value.Equals("ms"))
                return TargetEnum.Ms;

            if (value.Equals("nb"))
                return TargetEnum.Nb;

            if (value.Equals("nl"))
                return TargetEnum.Nl;

            if (value.Equals("pl"))
                return TargetEnum.Pl;

            if (value.Equals("pt"))
                return TargetEnum.Pt;

            if (value.Equals("ro"))
                return TargetEnum.Ro;

            if (value.Equals("ru"))
                return TargetEnum.Ru;

            if (value.Equals("sk"))
                return TargetEnum.Sk;

            if (value.Equals("sl"))
                return TargetEnum.Sl;

            if (value.Equals("sq"))
                return TargetEnum.Sq;

            if (value.Equals("sv"))
                return TargetEnum.Sv;

            if (value.Equals("th"))
                return TargetEnum.Th;

            if (value.Equals("tl"))
                return TargetEnum.Tl;

            if (value.Equals("tr"))
                return TargetEnum.Tr;

            if (value.Equals("uk"))
                return TargetEnum.Uk;

            if (value.Equals("zh"))
                return TargetEnum.Zh;

            if (value.Equals("zt"))
                return TargetEnum.Zt;

            throw new NotImplementedException($"Could not convert value to type TargetEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TargetEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TargetEnum? TargetEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ar"))
                return TargetEnum.Ar;

            if (value.Equals("az"))
                return TargetEnum.Az;

            if (value.Equals("bg"))
                return TargetEnum.Bg;

            if (value.Equals("bn"))
                return TargetEnum.Bn;

            if (value.Equals("ca"))
                return TargetEnum.Ca;

            if (value.Equals("cs"))
                return TargetEnum.Cs;

            if (value.Equals("da"))
                return TargetEnum.Da;

            if (value.Equals("de"))
                return TargetEnum.De;

            if (value.Equals("el"))
                return TargetEnum.El;

            if (value.Equals("en"))
                return TargetEnum.En;

            if (value.Equals("eo"))
                return TargetEnum.Eo;

            if (value.Equals("es"))
                return TargetEnum.Es;

            if (value.Equals("et"))
                return TargetEnum.Et;

            if (value.Equals("fa"))
                return TargetEnum.Fa;

            if (value.Equals("fi"))
                return TargetEnum.Fi;

            if (value.Equals("fr"))
                return TargetEnum.Fr;

            if (value.Equals("ga"))
                return TargetEnum.Ga;

            if (value.Equals("he"))
                return TargetEnum.He;

            if (value.Equals("hi"))
                return TargetEnum.Hi;

            if (value.Equals("hu"))
                return TargetEnum.Hu;

            if (value.Equals("id"))
                return TargetEnum.Id;

            if (value.Equals("it"))
                return TargetEnum.It;

            if (value.Equals("ja"))
                return TargetEnum.Ja;

            if (value.Equals("ko"))
                return TargetEnum.Ko;

            if (value.Equals("lt"))
                return TargetEnum.Lt;

            if (value.Equals("lv"))
                return TargetEnum.Lv;

            if (value.Equals("ms"))
                return TargetEnum.Ms;

            if (value.Equals("nb"))
                return TargetEnum.Nb;

            if (value.Equals("nl"))
                return TargetEnum.Nl;

            if (value.Equals("pl"))
                return TargetEnum.Pl;

            if (value.Equals("pt"))
                return TargetEnum.Pt;

            if (value.Equals("ro"))
                return TargetEnum.Ro;

            if (value.Equals("ru"))
                return TargetEnum.Ru;

            if (value.Equals("sk"))
                return TargetEnum.Sk;

            if (value.Equals("sl"))
                return TargetEnum.Sl;

            if (value.Equals("sq"))
                return TargetEnum.Sq;

            if (value.Equals("sv"))
                return TargetEnum.Sv;

            if (value.Equals("th"))
                return TargetEnum.Th;

            if (value.Equals("tl"))
                return TargetEnum.Tl;

            if (value.Equals("tr"))
                return TargetEnum.Tr;

            if (value.Equals("uk"))
                return TargetEnum.Uk;

            if (value.Equals("zh"))
                return TargetEnum.Zh;

            if (value.Equals("zt"))
                return TargetEnum.Zt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TargetEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TargetEnumToJsonValue(TargetEnum? value)
        {
            if (value == TargetEnum.Ar)
                return "ar";

            if (value == TargetEnum.Az)
                return "az";

            if (value == TargetEnum.Bg)
                return "bg";

            if (value == TargetEnum.Bn)
                return "bn";

            if (value == TargetEnum.Ca)
                return "ca";

            if (value == TargetEnum.Cs)
                return "cs";

            if (value == TargetEnum.Da)
                return "da";

            if (value == TargetEnum.De)
                return "de";

            if (value == TargetEnum.El)
                return "el";

            if (value == TargetEnum.En)
                return "en";

            if (value == TargetEnum.Eo)
                return "eo";

            if (value == TargetEnum.Es)
                return "es";

            if (value == TargetEnum.Et)
                return "et";

            if (value == TargetEnum.Fa)
                return "fa";

            if (value == TargetEnum.Fi)
                return "fi";

            if (value == TargetEnum.Fr)
                return "fr";

            if (value == TargetEnum.Ga)
                return "ga";

            if (value == TargetEnum.He)
                return "he";

            if (value == TargetEnum.Hi)
                return "hi";

            if (value == TargetEnum.Hu)
                return "hu";

            if (value == TargetEnum.Id)
                return "id";

            if (value == TargetEnum.It)
                return "it";

            if (value == TargetEnum.Ja)
                return "ja";

            if (value == TargetEnum.Ko)
                return "ko";

            if (value == TargetEnum.Lt)
                return "lt";

            if (value == TargetEnum.Lv)
                return "lv";

            if (value == TargetEnum.Ms)
                return "ms";

            if (value == TargetEnum.Nb)
                return "nb";

            if (value == TargetEnum.Nl)
                return "nl";

            if (value == TargetEnum.Pl)
                return "pl";

            if (value == TargetEnum.Pt)
                return "pt";

            if (value == TargetEnum.Ro)
                return "ro";

            if (value == TargetEnum.Ru)
                return "ru";

            if (value == TargetEnum.Sk)
                return "sk";

            if (value == TargetEnum.Sl)
                return "sl";

            if (value == TargetEnum.Sq)
                return "sq";

            if (value == TargetEnum.Sv)
                return "sv";

            if (value == TargetEnum.Th)
                return "th";

            if (value == TargetEnum.Tl)
                return "tl";

            if (value == TargetEnum.Tr)
                return "tr";

            if (value == TargetEnum.Uk)
                return "uk";

            if (value == TargetEnum.Zh)
                return "zh";

            if (value == TargetEnum.Zt)
                return "zt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Target
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TargetEnum?> TargetOption { get; private set; }

        /// <summary>
        /// The language code of the desired output translation.
        /// </summary>
        /// <value>The language code of the desired output translation.</value>
        [JsonPropertyName("target")]
        public TargetEnum? Target { get { return this.TargetOption; } set { this.TargetOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// The input text to be translated.
        /// </summary>
        /// <value>The input text to be translated.</value>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Translate {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Translate" />
    /// </summary>
    public class TranslateJsonConverter : JsonConverter<Translate>
    {
        /// <summary>
        /// Deserializes json to <see cref="Translate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Translate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> text = default;
            Option<Translate.SourceEnum?> source = default;
            Option<Translate.TargetEnum?> target = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source":
                            string? sourceRawValue = utf8JsonReader.GetString();
                            if (sourceRawValue != null)
                                source = new Option<Translate.SourceEnum?>(Translate.SourceEnumFromStringOrDefault(sourceRawValue));
                            break;
                        case "target":
                            string? targetRawValue = utf8JsonReader.GetString();
                            if (targetRawValue != null)
                                target = new Option<Translate.TargetEnum?>(Translate.TargetEnumFromStringOrDefault(targetRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class Translate.");

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class Translate.");

            return new Translate(text, source, target);
        }

        /// <summary>
        /// Serializes a <see cref="Translate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="translate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Translate translate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, translate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Translate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="translate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Translate translate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (translate.TextOption.IsSet)
                if (translate.TextOption.Value != null)
                    writer.WriteString("text", translate.Text);
                else
                    writer.WriteNull("text");

            var sourceRawValue = Translate.SourceEnumToJsonValue(translate.SourceOption.Value!.Value);
            writer.WriteString("source", sourceRawValue);
            var targetRawValue = Translate.TargetEnumToJsonValue(translate.TargetOption.Value!.Value);
            writer.WriteString("target", targetRawValue);
        }
    }
}
