// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueryDocumentRequest
    /// </summary>
    public partial class QueryDocumentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryDocumentRequest" /> class.
        /// </summary>
        /// <param name="query">Semantic query to find matching documents</param>
        /// <param name="index">Optional index to specify which index to search in. Defaults to &#39;default&#39;</param>
        /// <param name="filter">Optional filtering of document id(s) and/or tags</param>
        /// <param name="searchMode">Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;</param>
        /// <param name="language">Specifies the language of the content.</param>
        /// <param name="languageDetection">Indicates whether language detection is enabled.</param>
        /// <param name="ftsMinScore">Minimum score for full-text search.</param>
        /// <param name="ftsWeight">Weight for full-text search.</param>
        /// <param name="semanticMinRelevance">Minimum relevance score for semantic search.</param>
        /// <param name="semanticWeight">Weight applied for semantic search.</param>
        /// <param name="smoothingFactorK">Smoothing factor (k) used in calculations.</param>
        /// <param name="minRelevance">Optional filter to specify minimum relevance. Typically values between 0 and 1</param>
        /// <param name="limit">Optional filter for specifying maximum number of entries to return. Defaults to 3</param>
        /// <param name="embeddingModel">Embedding model to use in query</param>
        /// <param name="args">args</param>
        [JsonConstructor]
        public QueryDocumentRequest(Option<string?> query = default, Option<string?> index = default, Option<List<DocumentFilters>?> filter = default, Option<SearchModeEnum?> searchMode = default, Option<string?> language = default, Option<bool?> languageDetection = default, Option<float?> ftsMinScore = default, Option<float?> ftsWeight = default, Option<double?> semanticMinRelevance = default, Option<float?> semanticWeight = default, Option<float?> smoothingFactorK = default, Option<double?> minRelevance = default, Option<int?> limit = default, Option<string?> embeddingModel = default, Option<Dictionary<string, Object>?> args = default)
        {
            QueryOption = query;
            IndexOption = index;
            FilterOption = filter;
            SearchModeOption = searchMode;
            LanguageOption = language;
            LanguageDetectionOption = languageDetection;
            FtsMinScoreOption = ftsMinScore;
            FtsWeightOption = ftsWeight;
            SemanticMinRelevanceOption = semanticMinRelevance;
            SemanticWeightOption = semanticWeight;
            SmoothingFactorKOption = smoothingFactorK;
            MinRelevanceOption = minRelevance;
            LimitOption = limit;
            EmbeddingModelOption = embeddingModel;
            ArgsOption = args;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;
        /// </summary>
        /// <value>Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;</value>
        public enum SearchModeEnum
        {
            /// <summary>
            /// Enum Hybrid for value: hybrid
            /// </summary>
            Hybrid = 1,

            /// <summary>
            /// Enum Semantic for value: semantic
            /// </summary>
            Semantic = 2
        }

        /// <summary>
        /// Returns a <see cref="SearchModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SearchModeEnum SearchModeEnumFromString(string value)
        {
            if (value.Equals("hybrid"))
                return SearchModeEnum.Hybrid;

            if (value.Equals("semantic"))
                return SearchModeEnum.Semantic;

            throw new NotImplementedException($"Could not convert value to type SearchModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SearchModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchModeEnum? SearchModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("hybrid"))
                return SearchModeEnum.Hybrid;

            if (value.Equals("semantic"))
                return SearchModeEnum.Semantic;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SearchModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? SearchModeEnumToJsonValue(SearchModeEnum? value)
        {
            if (value == null)
                return null;

            if (value == SearchModeEnum.Hybrid)
                return "hybrid";

            if (value == SearchModeEnum.Semantic)
                return "semantic";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SearchMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SearchModeEnum?> SearchModeOption { get; private set; }

        /// <summary>
        /// Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;
        /// </summary>
        /// <value>Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;</value>
        [JsonPropertyName("searchMode")]
        public SearchModeEnum? SearchMode { get { return this.SearchModeOption; } set { this.SearchModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Query
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryOption { get; private set; }

        /// <summary>
        /// Semantic query to find matching documents
        /// </summary>
        /// <value>Semantic query to find matching documents</value>
        [JsonPropertyName("query")]
        public string? Query { get { return this.QueryOption; } set { this.QueryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Index
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexOption { get; private set; }

        /// <summary>
        /// Optional index to specify which index to search in. Defaults to &#39;default&#39;
        /// </summary>
        /// <value>Optional index to specify which index to search in. Defaults to &#39;default&#39;</value>
        [JsonPropertyName("index")]
        public string? Index { get { return this.IndexOption; } set { this.IndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Filter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DocumentFilters>?> FilterOption { get; private set; }

        /// <summary>
        /// Optional filtering of document id(s) and/or tags
        /// </summary>
        /// <value>Optional filtering of document id(s) and/or tags</value>
        [JsonPropertyName("filter")]
        public List<DocumentFilters>? Filter { get { return this.FilterOption; } set { this.FilterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Specifies the language of the content.
        /// </summary>
        /// <value>Specifies the language of the content.</value>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of LanguageDetection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LanguageDetectionOption { get; private set; }

        /// <summary>
        /// Indicates whether language detection is enabled.
        /// </summary>
        /// <value>Indicates whether language detection is enabled.</value>
        [JsonPropertyName("languageDetection")]
        public bool? LanguageDetection { get { return this.LanguageDetectionOption; } set { this.LanguageDetectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of FtsMinScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> FtsMinScoreOption { get; private set; }

        /// <summary>
        /// Minimum score for full-text search.
        /// </summary>
        /// <value>Minimum score for full-text search.</value>
        [JsonPropertyName("ftsMinScore")]
        public float? FtsMinScore { get { return this.FtsMinScoreOption; } set { this.FtsMinScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of FtsWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> FtsWeightOption { get; private set; }

        /// <summary>
        /// Weight for full-text search.
        /// </summary>
        /// <value>Weight for full-text search.</value>
        [JsonPropertyName("ftsWeight")]
        public float? FtsWeight { get { return this.FtsWeightOption; } set { this.FtsWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticMinRelevance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SemanticMinRelevanceOption { get; private set; }

        /// <summary>
        /// Minimum relevance score for semantic search.
        /// </summary>
        /// <value>Minimum relevance score for semantic search.</value>
        [JsonPropertyName("semanticMinRelevance")]
        public double? SemanticMinRelevance { get { return this.SemanticMinRelevanceOption; } set { this.SemanticMinRelevanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> SemanticWeightOption { get; private set; }

        /// <summary>
        /// Weight applied for semantic search.
        /// </summary>
        /// <value>Weight applied for semantic search.</value>
        [JsonPropertyName("semanticWeight")]
        public float? SemanticWeight { get { return this.SemanticWeightOption; } set { this.SemanticWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of SmoothingFactorK
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> SmoothingFactorKOption { get; private set; }

        /// <summary>
        /// Smoothing factor (k) used in calculations.
        /// </summary>
        /// <value>Smoothing factor (k) used in calculations.</value>
        [JsonPropertyName("smoothingFactorK")]
        public float? SmoothingFactorK { get { return this.SmoothingFactorKOption; } set { this.SmoothingFactorKOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinRelevance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MinRelevanceOption { get; private set; }

        /// <summary>
        /// Optional filter to specify minimum relevance. Typically values between 0 and 1
        /// </summary>
        /// <value>Optional filter to specify minimum relevance. Typically values between 0 and 1</value>
        [JsonPropertyName("minRelevance")]
        public double? MinRelevance { get { return this.MinRelevanceOption; } set { this.MinRelevanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Optional filter for specifying maximum number of entries to return. Defaults to 3
        /// </summary>
        /// <value>Optional filter for specifying maximum number of entries to return. Defaults to 3</value>
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddingModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmbeddingModelOption { get; private set; }

        /// <summary>
        /// Embedding model to use in query
        /// </summary>
        /// <value>Embedding model to use in query</value>
        [JsonPropertyName("embeddingModel")]
        public string? EmbeddingModel { get { return this.EmbeddingModelOption; } set { this.EmbeddingModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Args
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> ArgsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Args
        /// </summary>
        [JsonPropertyName("args")]
        public Dictionary<string, Object>? Args { get { return this.ArgsOption; } set { this.ArgsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryDocumentRequest {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  SearchMode: ").Append(SearchMode).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LanguageDetection: ").Append(LanguageDetection).Append("\n");
            sb.Append("  FtsMinScore: ").Append(FtsMinScore).Append("\n");
            sb.Append("  FtsWeight: ").Append(FtsWeight).Append("\n");
            sb.Append("  SemanticMinRelevance: ").Append(SemanticMinRelevance).Append("\n");
            sb.Append("  SemanticWeight: ").Append(SemanticWeight).Append("\n");
            sb.Append("  SmoothingFactorK: ").Append(SmoothingFactorK).Append("\n");
            sb.Append("  MinRelevance: ").Append(MinRelevance).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  EmbeddingModel: ").Append(EmbeddingModel).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QueryDocumentRequest" />
    /// </summary>
    public class QueryDocumentRequestJsonConverter : JsonConverter<QueryDocumentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="QueryDocumentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QueryDocumentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> query = default;
            Option<string?> index = default;
            Option<List<DocumentFilters>?> filter = default;
            Option<QueryDocumentRequest.SearchModeEnum?> searchMode = default;
            Option<string?> language = default;
            Option<bool?> languageDetection = default;
            Option<float?> ftsMinScore = default;
            Option<float?> ftsWeight = default;
            Option<double?> semanticMinRelevance = default;
            Option<float?> semanticWeight = default;
            Option<float?> smoothingFactorK = default;
            Option<double?> minRelevance = default;
            Option<int?> limit = default;
            Option<string?> embeddingModel = default;
            Option<Dictionary<string, Object>?> args = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "query":
                            query = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "index":
                            index = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "filter":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                filter = new Option<List<DocumentFilters>?>(JsonSerializer.Deserialize<List<DocumentFilters>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "searchMode":
                            string? searchModeRawValue = utf8JsonReader.GetString();
                            if (searchModeRawValue != null)
                                searchMode = new Option<QueryDocumentRequest.SearchModeEnum?>(QueryDocumentRequest.SearchModeEnumFromStringOrDefault(searchModeRawValue));
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "languageDetection":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                languageDetection = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ftsMinScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ftsMinScore = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "ftsWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ftsWeight = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "semanticMinRelevance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                semanticMinRelevance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "semanticWeight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                semanticWeight = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "smoothingFactorK":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                smoothingFactorK = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "minRelevance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minRelevance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "limit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limit = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "embeddingModel":
                            embeddingModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "args":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                args = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new QueryDocumentRequest(query, index, filter, searchMode, language, languageDetection, ftsMinScore, ftsWeight, semanticMinRelevance, semanticWeight, smoothingFactorK, minRelevance, limit, embeddingModel, args);
        }

        /// <summary>
        /// Serializes a <see cref="QueryDocumentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queryDocumentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QueryDocumentRequest queryDocumentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, queryDocumentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QueryDocumentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queryDocumentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QueryDocumentRequest queryDocumentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (queryDocumentRequest.QueryOption.IsSet)
                if (queryDocumentRequest.QueryOption.Value != null)
                    writer.WriteString("query", queryDocumentRequest.Query);
                else
                    writer.WriteNull("query");

            if (queryDocumentRequest.IndexOption.IsSet)
                if (queryDocumentRequest.IndexOption.Value != null)
                    writer.WriteString("index", queryDocumentRequest.Index);
                else
                    writer.WriteNull("index");

            if (queryDocumentRequest.FilterOption.IsSet)
                if (queryDocumentRequest.FilterOption.Value != null)
                {
                    writer.WritePropertyName("filter");
                    JsonSerializer.Serialize(writer, queryDocumentRequest.Filter, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("filter");
            var searchModeRawValue = QueryDocumentRequest.SearchModeEnumToJsonValue(queryDocumentRequest.SearchModeOption.Value!.Value);
            if (searchModeRawValue != null)
                writer.WriteString("searchMode", searchModeRawValue);
            else
                writer.WriteNull("searchMode");

            if (queryDocumentRequest.LanguageOption.IsSet)
                if (queryDocumentRequest.LanguageOption.Value != null)
                    writer.WriteString("language", queryDocumentRequest.Language);
                else
                    writer.WriteNull("language");

            if (queryDocumentRequest.LanguageDetectionOption.IsSet)
                if (queryDocumentRequest.LanguageDetectionOption.Value != null)
                    writer.WriteBoolean("languageDetection", queryDocumentRequest.LanguageDetectionOption.Value!.Value);
                else
                    writer.WriteNull("languageDetection");

            if (queryDocumentRequest.FtsMinScoreOption.IsSet)
                if (queryDocumentRequest.FtsMinScoreOption.Value != null)
                    writer.WriteNumber("ftsMinScore", queryDocumentRequest.FtsMinScoreOption.Value!.Value);
                else
                    writer.WriteNull("ftsMinScore");

            if (queryDocumentRequest.FtsWeightOption.IsSet)
                if (queryDocumentRequest.FtsWeightOption.Value != null)
                    writer.WriteNumber("ftsWeight", queryDocumentRequest.FtsWeightOption.Value!.Value);
                else
                    writer.WriteNull("ftsWeight");

            if (queryDocumentRequest.SemanticMinRelevanceOption.IsSet)
                if (queryDocumentRequest.SemanticMinRelevanceOption.Value != null)
                    writer.WriteNumber("semanticMinRelevance", queryDocumentRequest.SemanticMinRelevanceOption.Value!.Value);
                else
                    writer.WriteNull("semanticMinRelevance");

            if (queryDocumentRequest.SemanticWeightOption.IsSet)
                if (queryDocumentRequest.SemanticWeightOption.Value != null)
                    writer.WriteNumber("semanticWeight", queryDocumentRequest.SemanticWeightOption.Value!.Value);
                else
                    writer.WriteNull("semanticWeight");

            if (queryDocumentRequest.SmoothingFactorKOption.IsSet)
                if (queryDocumentRequest.SmoothingFactorKOption.Value != null)
                    writer.WriteNumber("smoothingFactorK", queryDocumentRequest.SmoothingFactorKOption.Value!.Value);
                else
                    writer.WriteNull("smoothingFactorK");

            if (queryDocumentRequest.MinRelevanceOption.IsSet)
                if (queryDocumentRequest.MinRelevanceOption.Value != null)
                    writer.WriteNumber("minRelevance", queryDocumentRequest.MinRelevanceOption.Value!.Value);
                else
                    writer.WriteNull("minRelevance");

            if (queryDocumentRequest.LimitOption.IsSet)
                if (queryDocumentRequest.LimitOption.Value != null)
                    writer.WriteNumber("limit", queryDocumentRequest.LimitOption.Value!.Value);
                else
                    writer.WriteNull("limit");

            if (queryDocumentRequest.EmbeddingModelOption.IsSet)
                if (queryDocumentRequest.EmbeddingModelOption.Value != null)
                    writer.WriteString("embeddingModel", queryDocumentRequest.EmbeddingModel);
                else
                    writer.WriteNull("embeddingModel");

            if (queryDocumentRequest.ArgsOption.IsSet)
                if (queryDocumentRequest.ArgsOption.Value != null)
                {
                    writer.WritePropertyName("args");
                    JsonSerializer.Serialize(writer, queryDocumentRequest.Args, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("args");
        }
    }
}
