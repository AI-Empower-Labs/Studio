/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SemanticSearchQueryResultsClusteringRequest
    /// </summary>
    [DataContract(Name = "semantic_search_query_results_clustering_request")]
    public partial class SemanticSearchQueryResultsClusteringRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SemanticSearchQueryResultsClusteringRequest" /> class.
        /// </summary>
        /// <param name="clusterCount">The number of clusters to be used in k-means clustering. (default to 3).</param>
        /// <param name="maxDegreeOfParallelism">The Maximum Degrees Of Parallelism (default to 1).</param>
        /// <param name="maxTokens">The maximum number of tokens to be used in the KMeans clustering algorithm. (default to 10).</param>
        /// <param name="index">Optional index to specify which index to search in. Defaults to &#39;default&#39;..</param>
        /// <param name="minRelevance">The minimum relevance value used for querying the search result audit..</param>
        /// <param name="maxRelevance">The maximum relevance value to be used in the search query..</param>
        /// <param name="llmModel">Specifies the name of the LLM (Language Model) to be used in the KMeans clustering algorithm..</param>
        /// <param name="embeddingModel">The name of the embedding model used for clustering..</param>
        public SemanticSearchQueryResultsClusteringRequest(int clusterCount = 3, int maxDegreeOfParallelism = 1, int maxTokens = 10, string index = default(string), decimal minRelevance = default(decimal), decimal maxRelevance = default(decimal), string llmModel = default(string), string embeddingModel = default(string))
        {
            this.ClusterCount = clusterCount;
            this.MaxDegreeOfParallelism = maxDegreeOfParallelism;
            this.MaxTokens = maxTokens;
            this.Index = index;
            this.MinRelevance = minRelevance;
            this.MaxRelevance = maxRelevance;
            this.LlmModel = llmModel;
            this.EmbeddingModel = embeddingModel;
        }

        /// <summary>
        /// The number of clusters to be used in k-means clustering.
        /// </summary>
        /// <value>The number of clusters to be used in k-means clustering.</value>
        [DataMember(Name = "clusterCount", EmitDefaultValue = false)]
        public int ClusterCount { get; set; }

        /// <summary>
        /// The Maximum Degrees Of Parallelism
        /// </summary>
        /// <value>The Maximum Degrees Of Parallelism</value>
        [DataMember(Name = "maxDegreeOfParallelism", EmitDefaultValue = false)]
        public int MaxDegreeOfParallelism { get; set; }

        /// <summary>
        /// The maximum number of tokens to be used in the KMeans clustering algorithm.
        /// </summary>
        /// <value>The maximum number of tokens to be used in the KMeans clustering algorithm.</value>
        [DataMember(Name = "maxTokens", EmitDefaultValue = false)]
        public int MaxTokens { get; set; }

        /// <summary>
        /// Optional index to specify which index to search in. Defaults to &#39;default&#39;.
        /// </summary>
        /// <value>Optional index to specify which index to search in. Defaults to &#39;default&#39;.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public string Index { get; set; }

        /// <summary>
        /// The minimum relevance value used for querying the search result audit.
        /// </summary>
        /// <value>The minimum relevance value used for querying the search result audit.</value>
        [DataMember(Name = "minRelevance", EmitDefaultValue = false)]
        public decimal MinRelevance { get; set; }

        /// <summary>
        /// The maximum relevance value to be used in the search query.
        /// </summary>
        /// <value>The maximum relevance value to be used in the search query.</value>
        [DataMember(Name = "maxRelevance", EmitDefaultValue = false)]
        public decimal MaxRelevance { get; set; }

        /// <summary>
        /// Specifies the name of the LLM (Language Model) to be used in the KMeans clustering algorithm.
        /// </summary>
        /// <value>Specifies the name of the LLM (Language Model) to be used in the KMeans clustering algorithm.</value>
        [DataMember(Name = "llmModel", EmitDefaultValue = false)]
        public string LlmModel { get; set; }

        /// <summary>
        /// The name of the embedding model used for clustering.
        /// </summary>
        /// <value>The name of the embedding model used for clustering.</value>
        [DataMember(Name = "embeddingModel", EmitDefaultValue = false)]
        public string EmbeddingModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SemanticSearchQueryResultsClusteringRequest {\n");
            sb.Append("  ClusterCount: ").Append(ClusterCount).Append("\n");
            sb.Append("  MaxDegreeOfParallelism: ").Append(MaxDegreeOfParallelism).Append("\n");
            sb.Append("  MaxTokens: ").Append(MaxTokens).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  MinRelevance: ").Append(MinRelevance).Append("\n");
            sb.Append("  MaxRelevance: ").Append(MaxRelevance).Append("\n");
            sb.Append("  LlmModel: ").Append(LlmModel).Append("\n");
            sb.Append("  EmbeddingModel: ").Append(EmbeddingModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClusterCount (int) maximum
            if (this.ClusterCount > (int)100)
            {
                yield return new ValidationResult("Invalid value for ClusterCount, must be a value less than or equal to 100.", new [] { "ClusterCount" });
            }

            // ClusterCount (int) minimum
            if (this.ClusterCount < (int)2)
            {
                yield return new ValidationResult("Invalid value for ClusterCount, must be a value greater than or equal to 2.", new [] { "ClusterCount" });
            }

            // MaxDegreeOfParallelism (int) maximum
            if (this.MaxDegreeOfParallelism > (int)100)
            {
                yield return new ValidationResult("Invalid value for MaxDegreeOfParallelism, must be a value less than or equal to 100.", new [] { "MaxDegreeOfParallelism" });
            }

            // MaxDegreeOfParallelism (int) minimum
            if (this.MaxDegreeOfParallelism < (int)1)
            {
                yield return new ValidationResult("Invalid value for MaxDegreeOfParallelism, must be a value greater than or equal to 1.", new [] { "MaxDegreeOfParallelism" });
            }

            // MaxTokens (int) maximum
            if (this.MaxTokens > (int)100)
            {
                yield return new ValidationResult("Invalid value for MaxTokens, must be a value less than or equal to 100.", new [] { "MaxTokens" });
            }

            // MaxTokens (int) minimum
            if (this.MaxTokens < (int)1)
            {
                yield return new ValidationResult("Invalid value for MaxTokens, must be a value greater than or equal to 1.", new [] { "MaxTokens" });
            }

            yield break;
        }
    }

}
