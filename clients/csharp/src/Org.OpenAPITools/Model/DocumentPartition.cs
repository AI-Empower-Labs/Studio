// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentPartition
    /// </summary>
    public partial class DocumentPartition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPartition" /> class.
        /// </summary>
        /// <param name="text">Content of the document partition, aka chunk/block of text.</param>
        /// <param name="fullTextSearchRank">Rank value calculated from full-text search, used to determine the relevance of search results.</param>
        /// <param name="semanticSimilarity">Represents the semantic similarity score associated with a record.</param>
        /// <param name="fullTextSearchRrf">Reciprocal rank fusion (RRF) score specifically derived from full-text search relevance.</param>
        /// <param name="semanticRrf">Reciprocal Rank Fusion (RRF) score based on semantic similarity</param>
        /// <param name="rrfScore">Represents the combined Reciprocal Rank Fusion (RRF) score, which integrates results from multiple ranking methods such as semantic similarity and full-text search to enhance result relevance.</param>
        /// <param name="language">Language of partition if any. Optional.</param>
        /// <param name="lastUpdate">Timestamp about the file/text partition.</param>
        /// <param name="tags">List of document tags</param>
        [JsonConstructor]
        public DocumentPartition(Option<string?> text = default, Option<float?> fullTextSearchRank = default, Option<float?> semanticSimilarity = default, Option<float?> fullTextSearchRrf = default, Option<float?> semanticRrf = default, Option<float?> rrfScore = default, Option<string?> language = default, Option<DateTime?> lastUpdate = default, Option<Dictionary<string, List<string>>?> tags = default)
        {
            TextOption = text;
            FullTextSearchRankOption = fullTextSearchRank;
            SemanticSimilarityOption = semanticSimilarity;
            FullTextSearchRrfOption = fullTextSearchRrf;
            SemanticRrfOption = semanticRrf;
            RrfScoreOption = rrfScore;
            LanguageOption = language;
            LastUpdateOption = lastUpdate;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Content of the document partition, aka chunk/block of text.
        /// </summary>
        /// <value>Content of the document partition, aka chunk/block of text.</value>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullTextSearchRank
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> FullTextSearchRankOption { get; private set; }

        /// <summary>
        /// Rank value calculated from full-text search, used to determine the relevance of search results.
        /// </summary>
        /// <value>Rank value calculated from full-text search, used to determine the relevance of search results.</value>
        [JsonPropertyName("fullTextSearchRank")]
        public float? FullTextSearchRank { get { return this.FullTextSearchRankOption; } set { this.FullTextSearchRankOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticSimilarity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> SemanticSimilarityOption { get; private set; }

        /// <summary>
        /// Represents the semantic similarity score associated with a record.
        /// </summary>
        /// <value>Represents the semantic similarity score associated with a record.</value>
        [JsonPropertyName("semanticSimilarity")]
        public float? SemanticSimilarity { get { return this.SemanticSimilarityOption; } set { this.SemanticSimilarityOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullTextSearchRrf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> FullTextSearchRrfOption { get; private set; }

        /// <summary>
        /// Reciprocal rank fusion (RRF) score specifically derived from full-text search relevance.
        /// </summary>
        /// <value>Reciprocal rank fusion (RRF) score specifically derived from full-text search relevance.</value>
        [JsonPropertyName("fullTextSearchRrf")]
        public float? FullTextSearchRrf { get { return this.FullTextSearchRrfOption; } set { this.FullTextSearchRrfOption = new(value); } }

        /// <summary>
        /// Used to track the state of SemanticRrf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> SemanticRrfOption { get; private set; }

        /// <summary>
        /// Reciprocal Rank Fusion (RRF) score based on semantic similarity
        /// </summary>
        /// <value>Reciprocal Rank Fusion (RRF) score based on semantic similarity</value>
        [JsonPropertyName("semanticRrf")]
        public float? SemanticRrf { get { return this.SemanticRrfOption; } set { this.SemanticRrfOption = new(value); } }

        /// <summary>
        /// Used to track the state of RrfScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> RrfScoreOption { get; private set; }

        /// <summary>
        /// Represents the combined Reciprocal Rank Fusion (RRF) score, which integrates results from multiple ranking methods such as semantic similarity and full-text search to enhance result relevance.
        /// </summary>
        /// <value>Represents the combined Reciprocal Rank Fusion (RRF) score, which integrates results from multiple ranking methods such as semantic similarity and full-text search to enhance result relevance.</value>
        [JsonPropertyName("rrfScore")]
        public float? RrfScore { get { return this.RrfScoreOption; } set { this.RrfScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Language of partition if any. Optional.
        /// </summary>
        /// <value>Language of partition if any. Optional.</value>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateOption { get; private set; }

        /// <summary>
        /// Timestamp about the file/text partition.
        /// </summary>
        /// <value>Timestamp about the file/text partition.</value>
        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, List<string>>?> TagsOption { get; private set; }

        /// <summary>
        /// List of document tags
        /// </summary>
        /// <value>List of document tags</value>
        [JsonPropertyName("tags")]
        public Dictionary<string, List<string>>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentPartition {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  FullTextSearchRank: ").Append(FullTextSearchRank).Append("\n");
            sb.Append("  SemanticSimilarity: ").Append(SemanticSimilarity).Append("\n");
            sb.Append("  FullTextSearchRrf: ").Append(FullTextSearchRrf).Append("\n");
            sb.Append("  SemanticRrf: ").Append(SemanticRrf).Append("\n");
            sb.Append("  RrfScore: ").Append(RrfScore).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentPartition" />
    /// </summary>
    public class DocumentPartitionJsonConverter : JsonConverter<DocumentPartition>
    {
        /// <summary>
        /// The format to use to serialize LastUpdate
        /// </summary>
        public static string LastUpdateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DocumentPartition" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentPartition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> text = default;
            Option<float?> fullTextSearchRank = default;
            Option<float?> semanticSimilarity = default;
            Option<float?> fullTextSearchRrf = default;
            Option<float?> semanticRrf = default;
            Option<float?> rrfScore = default;
            Option<string?> language = default;
            Option<DateTime?> lastUpdate = default;
            Option<Dictionary<string, List<string>>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fullTextSearchRank":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fullTextSearchRank = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "semanticSimilarity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                semanticSimilarity = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "fullTextSearchRrf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fullTextSearchRrf = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "semanticRrf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                semanticRrf = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "rrfScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rrfScore = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lastUpdate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastUpdate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<Dictionary<string, List<string>>?>(JsonSerializer.Deserialize<Dictionary<string, List<string>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class DocumentPartition.");

            return new DocumentPartition(text, fullTextSearchRank, semanticSimilarity, fullTextSearchRrf, semanticRrf, rrfScore, language, lastUpdate, tags);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentPartition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentPartition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentPartition documentPartition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentPartition, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentPartition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentPartition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentPartition documentPartition, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentPartition.TextOption.IsSet)
                if (documentPartition.TextOption.Value != null)
                    writer.WriteString("text", documentPartition.Text);
                else
                    writer.WriteNull("text");

            if (documentPartition.FullTextSearchRankOption.IsSet)
                if (documentPartition.FullTextSearchRankOption.Value != null)
                    writer.WriteNumber("fullTextSearchRank", documentPartition.FullTextSearchRankOption.Value!.Value);
                else
                    writer.WriteNull("fullTextSearchRank");

            if (documentPartition.SemanticSimilarityOption.IsSet)
                if (documentPartition.SemanticSimilarityOption.Value != null)
                    writer.WriteNumber("semanticSimilarity", documentPartition.SemanticSimilarityOption.Value!.Value);
                else
                    writer.WriteNull("semanticSimilarity");

            if (documentPartition.FullTextSearchRrfOption.IsSet)
                if (documentPartition.FullTextSearchRrfOption.Value != null)
                    writer.WriteNumber("fullTextSearchRrf", documentPartition.FullTextSearchRrfOption.Value!.Value);
                else
                    writer.WriteNull("fullTextSearchRrf");

            if (documentPartition.SemanticRrfOption.IsSet)
                if (documentPartition.SemanticRrfOption.Value != null)
                    writer.WriteNumber("semanticRrf", documentPartition.SemanticRrfOption.Value!.Value);
                else
                    writer.WriteNull("semanticRrf");

            if (documentPartition.RrfScoreOption.IsSet)
                if (documentPartition.RrfScoreOption.Value != null)
                    writer.WriteNumber("rrfScore", documentPartition.RrfScoreOption.Value!.Value);
                else
                    writer.WriteNull("rrfScore");

            if (documentPartition.LanguageOption.IsSet)
                if (documentPartition.LanguageOption.Value != null)
                    writer.WriteString("language", documentPartition.Language);
                else
                    writer.WriteNull("language");

            if (documentPartition.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", documentPartition.LastUpdateOption.Value!.Value.ToString(LastUpdateFormat));

            if (documentPartition.TagsOption.IsSet)
                if (documentPartition.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, documentPartition.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
        }
    }
}
