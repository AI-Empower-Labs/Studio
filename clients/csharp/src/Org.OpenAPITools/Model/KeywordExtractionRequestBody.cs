// <auto-generated>
/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KeywordExtractionRequestBody
    /// </summary>
    public partial class KeywordExtractionRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordExtractionRequestBody" /> class.
        /// </summary>
        /// <param name="text">Text to perform keyword extraction on</param>
        /// <param name="model">Text to perform keyword extraction on</param>
        [JsonConstructor]
        public KeywordExtractionRequestBody(string text, Option<string?> model = default)
        {
            Text = text;
            ModelOption = model;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Text to perform keyword extraction on
        /// </summary>
        /// <value>Text to perform keyword extraction on</value>
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Used to track the state of Model
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModelOption { get; private set; }

        /// <summary>
        /// Text to perform keyword extraction on
        /// </summary>
        /// <value>Text to perform keyword extraction on</value>
        [JsonPropertyName("model")]
        public string? Model { get { return this.ModelOption; } set { this.ModelOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KeywordExtractionRequestBody {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Model (string) maxLength
            if (this.Model != null && this.Model.Length > 250)
            {
                yield return new ValidationResult("Invalid value for Model, length must be less than 250.", new [] { "Model" });
            }

            // Model (string) minLength
            if (this.Model != null && this.Model.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Model, length must be greater than 1.", new [] { "Model" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KeywordExtractionRequestBody" />
    /// </summary>
    public class KeywordExtractionRequestBodyJsonConverter : JsonConverter<KeywordExtractionRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="KeywordExtractionRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KeywordExtractionRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> text = default;
            Option<string?> model = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class KeywordExtractionRequestBody.", nameof(text));

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class KeywordExtractionRequestBody.");

            return new KeywordExtractionRequestBody(text.Value!, model);
        }

        /// <summary>
        /// Serializes a <see cref="KeywordExtractionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="keywordExtractionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KeywordExtractionRequestBody keywordExtractionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, keywordExtractionRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KeywordExtractionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="keywordExtractionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KeywordExtractionRequestBody keywordExtractionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (keywordExtractionRequestBody.Text == null)
                throw new ArgumentNullException(nameof(keywordExtractionRequestBody.Text), "Property is required for class KeywordExtractionRequestBody.");

            writer.WriteString("text", keywordExtractionRequestBody.Text);

            if (keywordExtractionRequestBody.ModelOption.IsSet)
                if (keywordExtractionRequestBody.ModelOption.Value != null)
                    writer.WriteString("model", keywordExtractionRequestBody.Model);
                else
                    writer.WriteNull("model");
        }
    }
}
