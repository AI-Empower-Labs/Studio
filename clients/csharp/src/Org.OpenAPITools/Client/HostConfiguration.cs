/*
 * Studio - AI Empower Labs
 *
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Provides hosting configuration for Org.OpenAPITools
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new ApiExtractThematicSimilarityClusterPostRequestJsonConverter());
            _jsonOptions.Converters.Add(new CentroidJsonConverter());
            _jsonOptions.Converters.Add(new CitationJsonConverter());
            _jsonOptions.Converters.Add(new CoordinateJsonConverter());
            _jsonOptions.Converters.Add(new DataPipelineStatusJsonConverter());
            _jsonOptions.Converters.Add(new DeleteAcceptedJsonConverter());
            _jsonOptions.Converters.Add(new DetectLanguageResponseJsonConverter());
            _jsonOptions.Converters.Add(new DocumentCitationJsonConverter());
            _jsonOptions.Converters.Add(new DocumentFiltersJsonConverter());
            _jsonOptions.Converters.Add(new DocumentPartitionJsonConverter());
            _jsonOptions.Converters.Add(new EmbeddingRequestJsonConverter());
            _jsonOptions.Converters.Add(new EmbeddingResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetLanguageResponseJsonConverter());
            _jsonOptions.Converters.Add(new HttpValidationProblemDetailsJsonConverter());
            _jsonOptions.Converters.Add(new IndexCollectionJsonConverter());
            _jsonOptions.Converters.Add(new IndexDetailsJsonConverter());
            _jsonOptions.Converters.Add(new IngestDocumentResponseJsonConverter());
            _jsonOptions.Converters.Add(new IngestTextDocumentRequestJsonConverter());
            _jsonOptions.Converters.Add(new IngestWebPageDocumentRequestJsonConverter());
            _jsonOptions.Converters.Add(new KMeansClusterJsonConverter());
            _jsonOptions.Converters.Add(new KeywordExtractionRequestBodyJsonConverter());
            _jsonOptions.Converters.Add(new KeywordExtractionResponseJsonConverter());
            _jsonOptions.Converters.Add(new LanguageDetectionJsonConverter());
            _jsonOptions.Converters.Add(new ListDocumentParametersJsonConverter());
            _jsonOptions.Converters.Add(new ListDocumentResponseJsonConverter());
            _jsonOptions.Converters.Add(new MemoryAnswerJsonConverter());
            _jsonOptions.Converters.Add(new MemoryQueryJsonConverter());
            _jsonOptions.Converters.Add(new NamedEntityRecognitionRequestJsonConverter());
            _jsonOptions.Converters.Add(new NamedEntityRecognitionResponseJsonConverter());
            _jsonOptions.Converters.Add(new PartitionJsonConverter());
            _jsonOptions.Converters.Add(new ProblemDetailsJsonConverter());
            _jsonOptions.Converters.Add(new QueryDocumentRequestJsonConverter());
            _jsonOptions.Converters.Add(new QueryDocumentResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReRankDocumentJsonConverter());
            _jsonOptions.Converters.Add(new ReRankDocumentsRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReRankDocumentsResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchQueryJsonConverter());
            _jsonOptions.Converters.Add(new SearchResultJsonConverter());
            _jsonOptions.Converters.Add(new SegmentDataJsonConverter());
            _jsonOptions.Converters.Add(new SemanticSearchQueryResultsClusteringRequestJsonConverter());
            _jsonOptions.Converters.Add(new SemanticSimilarityDocumentJsonConverter());
            _jsonOptions.Converters.Add(new SemanticSimilarityRequestJsonConverter());
            _jsonOptions.Converters.Add(new SemanticSimilarityResponseJsonConverter());
            _jsonOptions.Converters.Add(new StreamableFileContentJsonConverter());
            _jsonOptions.Converters.Add(new SupportedLanguageJsonConverter());
            _jsonOptions.Converters.Add(new TimeSpanJsonConverter());
            _jsonOptions.Converters.Add(new TokenCountRequestJsonConverter());
            _jsonOptions.Converters.Add(new TokenCountResponseJsonConverter());
            _jsonOptions.Converters.Add(new TokenizerRequestJsonConverter());
            _jsonOptions.Converters.Add(new TokenizerResponseJsonConverter());
            _jsonOptions.Converters.Add(new TranscriptionAudioUploadResultJsonConverter());
            _jsonOptions.Converters.Add(new TranscriptionResponseJsonConverter());
            _jsonOptions.Converters.Add(new TranslateJsonConverter());
            _jsonOptions.Converters.Add(new TranslateResponseJsonConverter());
            _jsonOptions.Converters.Add(new UploadAcceptedJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<DataExtractionApiEvents>();
            _services.AddTransient<IDataExtractionApi, DataExtractionApi>();
            _services.AddSingleton<KernelMemoryApiEvents>();
            _services.AddTransient<IKernelMemoryApi, KernelMemoryApi>();
            _services.AddSingleton<LanguageApiEvents>();
            _services.AddTransient<ILanguageApi, LanguageApi>();
            _services.AddSingleton<MiscellaneousApiEvents>();
            _services.AddTransient<IMiscellaneousApi, MiscellaneousApi>();
            _services.AddSingleton<SemanticSearchApiEvents>();
            _services.AddTransient<ISemanticSearchApi, SemanticSearchApi>();
            _services.AddSingleton<TranscriptionApiEvents>();
            _services.AddTransient<ITranscriptionApi, TranscriptionApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IDataExtractionApi, DataExtractionApi>(client));
            builders.Add(_services.AddHttpClient<IKernelMemoryApi, KernelMemoryApi>(client));
            builders.Add(_services.AddHttpClient<ILanguageApi, LanguageApi>(client));
            builders.Add(_services.AddHttpClient<IMiscellaneousApi, MiscellaneousApi>(client));
            builders.Add(_services.AddHttpClient<ISemanticSearchApi, SemanticSearchApi>(client));
            builders.Add(_services.AddHttpClient<ITranscriptionApi, TranscriptionApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
