/*
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataPipelineStatus;
import java.io.File;
import org.openapitools.client.model.HttpValidationProblemDetails;
import org.openapitools.client.model.IngestDocumentResponse;
import org.openapitools.client.model.IngestTextDocumentRequest;
import org.openapitools.client.model.IngestWebPageDocumentRequest;
import org.openapitools.client.model.KMeansCluster;
import org.openapitools.client.model.ListDocumentParameters;
import org.openapitools.client.model.ListDocumentResponse;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryDocumentRequest;
import org.openapitools.client.model.QueryDocumentResponse;
import org.openapitools.client.model.ReRankDocumentsRequest;
import org.openapitools.client.model.ReRankDocumentsResponse;
import org.openapitools.client.model.SemanticSearchQueryResultsClusteringRequest;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SemanticSearchApi
 */
@Disabled
public class SemanticSearchApiTest {

    private final SemanticSearchApi api = new SemanticSearchApi();

    /**
     * Delete specific document by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchDeleteDocumentTest() throws ApiException {
        String documentId = null;
        String index = null;
        api.semanticSearchDeleteDocument(documentId, index);
        // TODO: test validations
    }

    /**
     * Delete specific index by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchDeleteIndexTest() throws ApiException {
        String name = null;
        api.semanticSearchDeleteIndex(name);
        // TODO: test validations
    }

    /**
     * Ingest a File into Semantic Search
     *
     * Uploads and ingests a file document into the semantic search index. Supports optional configuration of index, ingestion pipeline, embedding model, and webhook for processing status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchFileIngestionTest() throws ApiException {
        String documentId2 = null;
        List<File> files = null;
        String documentId = null;
        String index = null;
        List<String> pipeline = null;
        URI webHookUrl = null;
        String embeddingModel = null;
        String index2 = null;
        URI webHookUrl2 = null;
        String embeddingModelName = null;
        Map<String, String> context = null;
        Map<String, List<String>> tags = null;
        List<String> ingestionPipeline = null;
        Boolean languageAutoDetection = null;
        String language = null;
        IngestDocumentResponse response = api.semanticSearchFileIngestion(documentId2, files, documentId, index, pipeline, webHookUrl, embeddingModel, index2, webHookUrl2, embeddingModelName, context, tags, ingestionPipeline, languageAutoDetection, language);
        // TODO: test validations
    }

    /**
     * Get queue status for ingestion job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchIngestionStatusTest() throws ApiException {
        UUID id = null;
        DataPipelineStatus response = api.semanticSearchIngestionStatus(id);
        // TODO: test validations
    }

    /**
     * List - and filter - for ingested documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchListTest() throws ApiException {
        ListDocumentParameters listDocumentParameters = null;
        ListDocumentResponse response = api.semanticSearchList(listDocumentParameters);
        // TODO: test validations
    }

    /**
     * Performs semantic or hybrid search over previously ingested data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchQueryTest() throws ApiException {
        QueryDocumentRequest queryDocumentRequest = null;
        QueryDocumentResponse response = api.semanticSearchQuery(queryDocumentRequest);
        // TODO: test validations
    }

    /**
     * Perform k-means clustering over semantic search log entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchQueryResultsClusteringTest() throws ApiException {
        SemanticSearchQueryResultsClusteringRequest semanticSearchQueryResultsClusteringRequest = null;
        KMeansCluster response = api.semanticSearchQueryResultsClustering(semanticSearchQueryResultsClusteringRequest);
        // TODO: test validations
    }

    /**
     * Rerank documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchRerankTest() throws ApiException {
        ReRankDocumentsRequest reRankDocumentsRequest = null;
        ReRankDocumentsResponse response = api.semanticSearchRerank(reRankDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Ingest Plain Text for Semantic Search
     *
     * Ingests a plain text document into the semantic search index. This endpoint allows associating tags and specifying the target index for enhanced search capabilities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchTextIngestionTest() throws ApiException {
        IngestTextDocumentRequest ingestTextDocumentRequest = null;
        IngestDocumentResponse response = api.semanticSearchTextIngestion(ingestTextDocumentRequest);
        // TODO: test validations
    }

    /**
     * Import web page text into semantic search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void semanticSearchWebpageIngestionTest() throws ApiException {
        IngestWebPageDocumentRequest ingestWebPageDocumentRequest = null;
        IngestDocumentResponse response = api.semanticSearchWebpageIngestion(ingestWebPageDocumentRequest);
        // TODO: test validations
    }

}
