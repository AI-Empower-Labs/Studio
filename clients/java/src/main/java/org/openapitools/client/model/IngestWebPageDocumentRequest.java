/*
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IngestWebPageDocumentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T12:37:37.320941922Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IngestWebPageDocumentRequest {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  @javax.annotation.Nonnull
  private String documentId;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private String index;

  public static final String SERIALIZED_NAME_WEB_HOOK_URL = "webHookUrl";
  @SerializedName(SERIALIZED_NAME_WEB_HOOK_URL)
  @javax.annotation.Nullable
  private URI webHookUrl;

  public static final String SERIALIZED_NAME_EMBEDDING_MODEL_NAME = "embeddingModelName";
  @SerializedName(SERIALIZED_NAME_EMBEDDING_MODEL_NAME)
  @javax.annotation.Nullable
  private String embeddingModelName;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @javax.annotation.Nullable
  private Map<String, String> context;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, List<String>> tags;

  public static final String SERIALIZED_NAME_INGESTION_PIPELINE = "ingestionPipeline";
  @SerializedName(SERIALIZED_NAME_INGESTION_PIPELINE)
  @javax.annotation.Nullable
  private List<String> ingestionPipeline;

  public static final String SERIALIZED_NAME_LANGUAGE_AUTO_DETECTION = "languageAutoDetection";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_AUTO_DETECTION)
  @javax.annotation.Nullable
  private Boolean languageAutoDetection = false;

  /**
   * Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    ARABIC("arabic"),
    
    ARMENIAN("armenian"),
    
    BASQUE("basque"),
    
    CATALAN("catalan"),
    
    DANISH("danish"),
    
    DUTCH("dutch"),
    
    ENGLISH("english"),
    
    FINNISH("finnish"),
    
    FRENCH("french"),
    
    GERMAN("german"),
    
    GREEK("greek"),
    
    HINDI("hindi"),
    
    HUNGARIAN("hungarian"),
    
    INDONESIAN("indonesian"),
    
    IRISH("irish"),
    
    ITALIAN("italian"),
    
    LITHUANIAN("lithuanian"),
    
    NEPALI("nepali"),
    
    NORWEGIAN("norwegian"),
    
    PORTUGUESE("portuguese"),
    
    ROMANIAN("romanian"),
    
    RUSSIAN("russian"),
    
    SERBIAN("serbian"),
    
    SPANISH("spanish"),
    
    SWEDISH("swedish"),
    
    TAMIL("tamil"),
    
    TURKISH("turkish"),
    
    YIDDISH("yiddish"),
    
    SIMPLE("simple");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private LanguageEnum language;

  public IngestWebPageDocumentRequest() {
  }

  public IngestWebPageDocumentRequest url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * Web page to ingest
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public IngestWebPageDocumentRequest documentId(@javax.annotation.Nonnull String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Unique identifier for the document to ingest.
   * @return documentId
   */
  @javax.annotation.Nonnull
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(@javax.annotation.Nonnull String documentId) {
    this.documentId = documentId;
  }


  public IngestWebPageDocumentRequest index(@javax.annotation.Nullable String index) {
    this.index = index;
    return this;
  }

  /**
   * Optional index name where the document will be stored.
   * @return index
   */
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable String index) {
    this.index = index;
  }


  public IngestWebPageDocumentRequest webHookUrl(@javax.annotation.Nullable URI webHookUrl) {
    this.webHookUrl = webHookUrl;
    return this;
  }

  /**
   * Optional webhook URL to notify upon completion.
   * @return webHookUrl
   */
  @javax.annotation.Nullable
  public URI getWebHookUrl() {
    return webHookUrl;
  }

  public void setWebHookUrl(@javax.annotation.Nullable URI webHookUrl) {
    this.webHookUrl = webHookUrl;
  }


  public IngestWebPageDocumentRequest embeddingModelName(@javax.annotation.Nullable String embeddingModelName) {
    this.embeddingModelName = embeddingModelName;
    return this;
  }

  /**
   * Optional name of the embedding model to use during ingestion.
   * @return embeddingModelName
   */
  @javax.annotation.Nullable
  public String getEmbeddingModelName() {
    return embeddingModelName;
  }

  public void setEmbeddingModelName(@javax.annotation.Nullable String embeddingModelName) {
    this.embeddingModelName = embeddingModelName;
  }


  public IngestWebPageDocumentRequest context(@javax.annotation.Nullable Map<String, String> context) {
    this.context = context;
    return this;
  }

  public IngestWebPageDocumentRequest putContextItem(String key, String contextItem) {
    if (this.context == null) {
      this.context = new HashMap<>();
    }
    this.context.put(key, contextItem);
    return this;
  }

  /**
   * Optional key-value pairs for additional context or metadata.
   * @return context
   */
  @javax.annotation.Nullable
  public Map<String, String> getContext() {
    return context;
  }

  public void setContext(@javax.annotation.Nullable Map<String, String> context) {
    this.context = context;
  }


  public IngestWebPageDocumentRequest tags(@javax.annotation.Nullable Map<String, List<String>> tags) {
    this.tags = tags;
    return this;
  }

  public IngestWebPageDocumentRequest putTagsItem(String key, List<String> tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of tags associated with the document. Tags can be language-specific.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, List<String>> tags) {
    this.tags = tags;
  }


  public IngestWebPageDocumentRequest ingestionPipeline(@javax.annotation.Nullable List<String> ingestionPipeline) {
    this.ingestionPipeline = ingestionPipeline;
    return this;
  }

  public IngestWebPageDocumentRequest addIngestionPipelineItem(String ingestionPipelineItem) {
    if (this.ingestionPipeline == null) {
      this.ingestionPipeline = new ArrayList<>();
    }
    this.ingestionPipeline.add(ingestionPipelineItem);
    return this;
  }

  /**
   * Optional list of ingestion pipeline steps. Allows custom processing.
   * @return ingestionPipeline
   */
  @javax.annotation.Nullable
  public List<String> getIngestionPipeline() {
    return ingestionPipeline;
  }

  public void setIngestionPipeline(@javax.annotation.Nullable List<String> ingestionPipeline) {
    this.ingestionPipeline = ingestionPipeline;
  }


  public IngestWebPageDocumentRequest languageAutoDetection(@javax.annotation.Nullable Boolean languageAutoDetection) {
    this.languageAutoDetection = languageAutoDetection;
    return this;
  }

  /**
   * Enable automatic language detection for document content.
   * @return languageAutoDetection
   */
  @javax.annotation.Nullable
  public Boolean getLanguageAutoDetection() {
    return languageAutoDetection;
  }

  public void setLanguageAutoDetection(@javax.annotation.Nullable Boolean languageAutoDetection) {
    this.languageAutoDetection = languageAutoDetection;
  }


  public IngestWebPageDocumentRequest language(@javax.annotation.Nullable LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * Force a specific language for full-text search. Use &#39;simple&#39; for no language or leave empty.
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable LanguageEnum language) {
    this.language = language;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngestWebPageDocumentRequest ingestWebPageDocumentRequest = (IngestWebPageDocumentRequest) o;
    return Objects.equals(this.url, ingestWebPageDocumentRequest.url) &&
        Objects.equals(this.documentId, ingestWebPageDocumentRequest.documentId) &&
        Objects.equals(this.index, ingestWebPageDocumentRequest.index) &&
        Objects.equals(this.webHookUrl, ingestWebPageDocumentRequest.webHookUrl) &&
        Objects.equals(this.embeddingModelName, ingestWebPageDocumentRequest.embeddingModelName) &&
        Objects.equals(this.context, ingestWebPageDocumentRequest.context) &&
        Objects.equals(this.tags, ingestWebPageDocumentRequest.tags) &&
        Objects.equals(this.ingestionPipeline, ingestWebPageDocumentRequest.ingestionPipeline) &&
        Objects.equals(this.languageAutoDetection, ingestWebPageDocumentRequest.languageAutoDetection) &&
        Objects.equals(this.language, ingestWebPageDocumentRequest.language);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, documentId, index, webHookUrl, embeddingModelName, context, tags, ingestionPipeline, languageAutoDetection, language);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngestWebPageDocumentRequest {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    webHookUrl: ").append(toIndentedString(webHookUrl)).append("\n");
    sb.append("    embeddingModelName: ").append(toIndentedString(embeddingModelName)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    ingestionPipeline: ").append(toIndentedString(ingestionPipeline)).append("\n");
    sb.append("    languageAutoDetection: ").append(toIndentedString(languageAutoDetection)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("documentId");
    openapiFields.add("index");
    openapiFields.add("webHookUrl");
    openapiFields.add("embeddingModelName");
    openapiFields.add("context");
    openapiFields.add("tags");
    openapiFields.add("ingestionPipeline");
    openapiFields.add("languageAutoDetection");
    openapiFields.add("language");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("documentId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngestWebPageDocumentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngestWebPageDocumentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngestWebPageDocumentRequest is not found in the empty JSON string", IngestWebPageDocumentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngestWebPageDocumentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngestWebPageDocumentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IngestWebPageDocumentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if ((jsonObj.get("webHookUrl") != null && !jsonObj.get("webHookUrl").isJsonNull()) && !jsonObj.get("webHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webHookUrl").toString()));
      }
      if ((jsonObj.get("embeddingModelName") != null && !jsonObj.get("embeddingModelName").isJsonNull()) && !jsonObj.get("embeddingModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddingModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddingModelName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ingestionPipeline") != null && !jsonObj.get("ingestionPipeline").isJsonNull() && !jsonObj.get("ingestionPipeline").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingestionPipeline` to be an array in the JSON string but got `%s`", jsonObj.get("ingestionPipeline").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngestWebPageDocumentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngestWebPageDocumentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngestWebPageDocumentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngestWebPageDocumentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IngestWebPageDocumentRequest>() {
           @Override
           public void write(JsonWriter out, IngestWebPageDocumentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngestWebPageDocumentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngestWebPageDocumentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngestWebPageDocumentRequest
   * @throws IOException if the JSON string is invalid with respect to IngestWebPageDocumentRequest
   */
  public static IngestWebPageDocumentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngestWebPageDocumentRequest.class);
  }

  /**
   * Convert an instance of IngestWebPageDocumentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

