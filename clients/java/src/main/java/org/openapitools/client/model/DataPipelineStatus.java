/*
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataPipelineStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-18T14:05:27.871542961Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class DataPipelineStatus {
  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Boolean failed;

  public static final String SERIALIZED_NAME_EMPTY = "empty";
  @SerializedName(SERIALIZED_NAME_EMPTY)
  private Boolean empty;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "document_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, List<String>> tags;

  public static final String SERIALIZED_NAME_CREATION = "creation";
  @SerializedName(SERIALIZED_NAME_CREATION)
  private OffsetDateTime creation;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "last_update";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<String> steps;

  public static final String SERIALIZED_NAME_REMAINING_STEPS = "remaining_steps";
  @SerializedName(SERIALIZED_NAME_REMAINING_STEPS)
  private List<String> remainingSteps;

  public static final String SERIALIZED_NAME_COMPLETED_STEPS = "completed_steps";
  @SerializedName(SERIALIZED_NAME_COMPLETED_STEPS)
  private List<String> completedSteps;

  public DataPipelineStatus() {
  }

  public DataPipelineStatus completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

   /**
   * Get completed
   * @return completed
  **/
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public DataPipelineStatus failed(Boolean failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @javax.annotation.Nullable
  public Boolean getFailed() {
    return failed;
  }

  public void setFailed(Boolean failed) {
    this.failed = failed;
  }


  public DataPipelineStatus empty(Boolean empty) {
    this.empty = empty;
    return this;
  }

   /**
   * Get empty
   * @return empty
  **/
  @javax.annotation.Nullable
  public Boolean getEmpty() {
    return empty;
  }

  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }


  public DataPipelineStatus index(String index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }


  public DataPipelineStatus documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

   /**
   * Get documentId
   * @return documentId
  **/
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public DataPipelineStatus tags(Map<String, List<String>> tags) {
    this.tags = tags;
    return this;
  }

  public DataPipelineStatus putTagsItem(String key, List<String> tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public Map<String, List<String>> getTags() {
    return tags;
  }

  public void setTags(Map<String, List<String>> tags) {
    this.tags = tags;
  }


  public DataPipelineStatus creation(OffsetDateTime creation) {
    this.creation = creation;
    return this;
  }

   /**
   * Get creation
   * @return creation
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreation() {
    return creation;
  }

  public void setCreation(OffsetDateTime creation) {
    this.creation = creation;
  }


  public DataPipelineStatus lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

   /**
   * Get lastUpdate
   * @return lastUpdate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public DataPipelineStatus steps(List<String> steps) {
    this.steps = steps;
    return this;
  }

  public DataPipelineStatus addStepsItem(String stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  public List<String> getSteps() {
    return steps;
  }

  public void setSteps(List<String> steps) {
    this.steps = steps;
  }


  public DataPipelineStatus remainingSteps(List<String> remainingSteps) {
    this.remainingSteps = remainingSteps;
    return this;
  }

  public DataPipelineStatus addRemainingStepsItem(String remainingStepsItem) {
    if (this.remainingSteps == null) {
      this.remainingSteps = new ArrayList<>();
    }
    this.remainingSteps.add(remainingStepsItem);
    return this;
  }

   /**
   * Get remainingSteps
   * @return remainingSteps
  **/
  @javax.annotation.Nullable
  public List<String> getRemainingSteps() {
    return remainingSteps;
  }

  public void setRemainingSteps(List<String> remainingSteps) {
    this.remainingSteps = remainingSteps;
  }


  public DataPipelineStatus completedSteps(List<String> completedSteps) {
    this.completedSteps = completedSteps;
    return this;
  }

  public DataPipelineStatus addCompletedStepsItem(String completedStepsItem) {
    if (this.completedSteps == null) {
      this.completedSteps = new ArrayList<>();
    }
    this.completedSteps.add(completedStepsItem);
    return this;
  }

   /**
   * Get completedSteps
   * @return completedSteps
  **/
  @javax.annotation.Nullable
  public List<String> getCompletedSteps() {
    return completedSteps;
  }

  public void setCompletedSteps(List<String> completedSteps) {
    this.completedSteps = completedSteps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataPipelineStatus dataPipelineStatus = (DataPipelineStatus) o;
    return Objects.equals(this.completed, dataPipelineStatus.completed) &&
        Objects.equals(this.failed, dataPipelineStatus.failed) &&
        Objects.equals(this.empty, dataPipelineStatus.empty) &&
        Objects.equals(this.index, dataPipelineStatus.index) &&
        Objects.equals(this.documentId, dataPipelineStatus.documentId) &&
        Objects.equals(this.tags, dataPipelineStatus.tags) &&
        Objects.equals(this.creation, dataPipelineStatus.creation) &&
        Objects.equals(this.lastUpdate, dataPipelineStatus.lastUpdate) &&
        Objects.equals(this.steps, dataPipelineStatus.steps) &&
        Objects.equals(this.remainingSteps, dataPipelineStatus.remainingSteps) &&
        Objects.equals(this.completedSteps, dataPipelineStatus.completedSteps);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, failed, empty, index, documentId, tags, creation, lastUpdate, steps, remainingSteps, completedSteps);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataPipelineStatus {\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    creation: ").append(toIndentedString(creation)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    remainingSteps: ").append(toIndentedString(remainingSteps)).append("\n");
    sb.append("    completedSteps: ").append(toIndentedString(completedSteps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completed");
    openapiFields.add("failed");
    openapiFields.add("empty");
    openapiFields.add("index");
    openapiFields.add("document_id");
    openapiFields.add("tags");
    openapiFields.add("creation");
    openapiFields.add("last_update");
    openapiFields.add("steps");
    openapiFields.add("remaining_steps");
    openapiFields.add("completed_steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataPipelineStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataPipelineStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataPipelineStatus is not found in the empty JSON string", DataPipelineStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataPipelineStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataPipelineStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if ((jsonObj.get("document_id") != null && !jsonObj.get("document_id").isJsonNull()) && !jsonObj.get("document_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull() && !jsonObj.get("steps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("remaining_steps") != null && !jsonObj.get("remaining_steps").isJsonNull() && !jsonObj.get("remaining_steps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remaining_steps` to be an array in the JSON string but got `%s`", jsonObj.get("remaining_steps").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("completed_steps") != null && !jsonObj.get("completed_steps").isJsonNull() && !jsonObj.get("completed_steps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_steps` to be an array in the JSON string but got `%s`", jsonObj.get("completed_steps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataPipelineStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataPipelineStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataPipelineStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataPipelineStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DataPipelineStatus>() {
           @Override
           public void write(JsonWriter out, DataPipelineStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataPipelineStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataPipelineStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataPipelineStatus
  * @throws IOException if the JSON string is invalid with respect to DataPipelineStatus
  */
  public static DataPipelineStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataPipelineStatus.class);
  }

 /**
  * Convert an instance of DataPipelineStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

