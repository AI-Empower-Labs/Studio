/*
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DocumentFilters;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryDocumentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T12:37:37.320941922Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class QueryDocumentRequest {
  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  @javax.annotation.Nullable
  private String query;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private String index;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private List<DocumentFilters> filter;

  /**
   * Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;
   */
  @JsonAdapter(SearchModeEnum.Adapter.class)
  public enum SearchModeEnum {
    HYBRID("hybrid"),
    
    SEMANTIC("semantic");

    private String value;

    SearchModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchModeEnum fromValue(String value) {
      for (SearchModeEnum b : SearchModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SearchModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_MODE = "searchMode";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODE)
  @javax.annotation.Nullable
  private SearchModeEnum searchMode;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGE_DETECTION = "languageDetection";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DETECTION)
  @javax.annotation.Nullable
  private Boolean languageDetection;

  public static final String SERIALIZED_NAME_FTS_MIN_SCORE = "ftsMinScore";
  @SerializedName(SERIALIZED_NAME_FTS_MIN_SCORE)
  @javax.annotation.Nullable
  private Float ftsMinScore;

  public static final String SERIALIZED_NAME_FTS_WEIGHT = "ftsWeight";
  @SerializedName(SERIALIZED_NAME_FTS_WEIGHT)
  @javax.annotation.Nullable
  private Float ftsWeight;

  public static final String SERIALIZED_NAME_SEMANTIC_MIN_RELEVANCE = "semanticMinRelevance";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_MIN_RELEVANCE)
  @javax.annotation.Nullable
  private Double semanticMinRelevance;

  public static final String SERIALIZED_NAME_SEMANTIC_WEIGHT = "semanticWeight";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_WEIGHT)
  @javax.annotation.Nullable
  private Float semanticWeight;

  public static final String SERIALIZED_NAME_SMOOTHING_FACTOR_K = "smoothingFactorK";
  @SerializedName(SERIALIZED_NAME_SMOOTHING_FACTOR_K)
  @javax.annotation.Nullable
  private Float smoothingFactorK;

  public static final String SERIALIZED_NAME_MIN_RELEVANCE = "minRelevance";
  @SerializedName(SERIALIZED_NAME_MIN_RELEVANCE)
  @javax.annotation.Nullable
  private Double minRelevance;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_EMBEDDING_MODEL = "embeddingModel";
  @SerializedName(SERIALIZED_NAME_EMBEDDING_MODEL)
  @javax.annotation.Nullable
  private String embeddingModel;

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  @javax.annotation.Nullable
  private Map<String, Object> args;

  public QueryDocumentRequest() {
  }

  public QueryDocumentRequest query(@javax.annotation.Nullable String query) {
    this.query = query;
    return this;
  }

  /**
   * Semantic query to find matching documents
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(@javax.annotation.Nullable String query) {
    this.query = query;
  }


  public QueryDocumentRequest index(@javax.annotation.Nullable String index) {
    this.index = index;
    return this;
  }

  /**
   * Optional index to specify which index to search in. Defaults to &#39;default&#39;
   * @return index
   */
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable String index) {
    this.index = index;
  }


  public QueryDocumentRequest filter(@javax.annotation.Nullable List<DocumentFilters> filter) {
    this.filter = filter;
    return this;
  }

  public QueryDocumentRequest addFilterItem(DocumentFilters filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<>();
    }
    this.filter.add(filterItem);
    return this;
  }

  /**
   * Optional filtering of document id(s) and/or tags
   * @return filter
   */
  @javax.annotation.Nullable
  public List<DocumentFilters> getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable List<DocumentFilters> filter) {
    this.filter = filter;
  }


  public QueryDocumentRequest searchMode(@javax.annotation.Nullable SearchModeEnum searchMode) {
    this.searchMode = searchMode;
    return this;
  }

  /**
   * Optional search mode defining the context or process used in the query. Supported values are &#39;hybrid&#39;, &#39;semantic&#39;
   * @return searchMode
   */
  @javax.annotation.Nullable
  public SearchModeEnum getSearchMode() {
    return searchMode;
  }

  public void setSearchMode(@javax.annotation.Nullable SearchModeEnum searchMode) {
    this.searchMode = searchMode;
  }


  public QueryDocumentRequest language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Specifies the language of the content.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public QueryDocumentRequest languageDetection(@javax.annotation.Nullable Boolean languageDetection) {
    this.languageDetection = languageDetection;
    return this;
  }

  /**
   * Indicates whether language detection is enabled.
   * @return languageDetection
   */
  @javax.annotation.Nullable
  public Boolean getLanguageDetection() {
    return languageDetection;
  }

  public void setLanguageDetection(@javax.annotation.Nullable Boolean languageDetection) {
    this.languageDetection = languageDetection;
  }


  public QueryDocumentRequest ftsMinScore(@javax.annotation.Nullable Float ftsMinScore) {
    this.ftsMinScore = ftsMinScore;
    return this;
  }

  /**
   * Minimum score for full-text search.
   * @return ftsMinScore
   */
  @javax.annotation.Nullable
  public Float getFtsMinScore() {
    return ftsMinScore;
  }

  public void setFtsMinScore(@javax.annotation.Nullable Float ftsMinScore) {
    this.ftsMinScore = ftsMinScore;
  }


  public QueryDocumentRequest ftsWeight(@javax.annotation.Nullable Float ftsWeight) {
    this.ftsWeight = ftsWeight;
    return this;
  }

  /**
   * Weight for full-text search.
   * @return ftsWeight
   */
  @javax.annotation.Nullable
  public Float getFtsWeight() {
    return ftsWeight;
  }

  public void setFtsWeight(@javax.annotation.Nullable Float ftsWeight) {
    this.ftsWeight = ftsWeight;
  }


  public QueryDocumentRequest semanticMinRelevance(@javax.annotation.Nullable Double semanticMinRelevance) {
    this.semanticMinRelevance = semanticMinRelevance;
    return this;
  }

  /**
   * Minimum relevance score for semantic search.
   * @return semanticMinRelevance
   */
  @javax.annotation.Nullable
  public Double getSemanticMinRelevance() {
    return semanticMinRelevance;
  }

  public void setSemanticMinRelevance(@javax.annotation.Nullable Double semanticMinRelevance) {
    this.semanticMinRelevance = semanticMinRelevance;
  }


  public QueryDocumentRequest semanticWeight(@javax.annotation.Nullable Float semanticWeight) {
    this.semanticWeight = semanticWeight;
    return this;
  }

  /**
   * Weight applied for semantic search.
   * @return semanticWeight
   */
  @javax.annotation.Nullable
  public Float getSemanticWeight() {
    return semanticWeight;
  }

  public void setSemanticWeight(@javax.annotation.Nullable Float semanticWeight) {
    this.semanticWeight = semanticWeight;
  }


  public QueryDocumentRequest smoothingFactorK(@javax.annotation.Nullable Float smoothingFactorK) {
    this.smoothingFactorK = smoothingFactorK;
    return this;
  }

  /**
   * Smoothing factor (k) used in calculations.
   * @return smoothingFactorK
   */
  @javax.annotation.Nullable
  public Float getSmoothingFactorK() {
    return smoothingFactorK;
  }

  public void setSmoothingFactorK(@javax.annotation.Nullable Float smoothingFactorK) {
    this.smoothingFactorK = smoothingFactorK;
  }


  public QueryDocumentRequest minRelevance(@javax.annotation.Nullable Double minRelevance) {
    this.minRelevance = minRelevance;
    return this;
  }

  /**
   * Optional filter to specify minimum relevance. Typically values between 0 and 1
   * @return minRelevance
   */
  @javax.annotation.Nullable
  public Double getMinRelevance() {
    return minRelevance;
  }

  public void setMinRelevance(@javax.annotation.Nullable Double minRelevance) {
    this.minRelevance = minRelevance;
  }


  public QueryDocumentRequest limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Optional filter for specifying maximum number of entries to return. Defaults to 3
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public QueryDocumentRequest embeddingModel(@javax.annotation.Nullable String embeddingModel) {
    this.embeddingModel = embeddingModel;
    return this;
  }

  /**
   * Embedding model to use in query
   * @return embeddingModel
   */
  @javax.annotation.Nullable
  public String getEmbeddingModel() {
    return embeddingModel;
  }

  public void setEmbeddingModel(@javax.annotation.Nullable String embeddingModel) {
    this.embeddingModel = embeddingModel;
  }


  public QueryDocumentRequest args(@javax.annotation.Nullable Map<String, Object> args) {
    this.args = args;
    return this;
  }

  public QueryDocumentRequest putArgsItem(String key, Object argsItem) {
    if (this.args == null) {
      this.args = new HashMap<>();
    }
    this.args.put(key, argsItem);
    return this;
  }

  /**
   * Get args
   * @return args
   */
  @javax.annotation.Nullable
  public Map<String, Object> getArgs() {
    return args;
  }

  public void setArgs(@javax.annotation.Nullable Map<String, Object> args) {
    this.args = args;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryDocumentRequest queryDocumentRequest = (QueryDocumentRequest) o;
    return Objects.equals(this.query, queryDocumentRequest.query) &&
        Objects.equals(this.index, queryDocumentRequest.index) &&
        Objects.equals(this.filter, queryDocumentRequest.filter) &&
        Objects.equals(this.searchMode, queryDocumentRequest.searchMode) &&
        Objects.equals(this.language, queryDocumentRequest.language) &&
        Objects.equals(this.languageDetection, queryDocumentRequest.languageDetection) &&
        Objects.equals(this.ftsMinScore, queryDocumentRequest.ftsMinScore) &&
        Objects.equals(this.ftsWeight, queryDocumentRequest.ftsWeight) &&
        Objects.equals(this.semanticMinRelevance, queryDocumentRequest.semanticMinRelevance) &&
        Objects.equals(this.semanticWeight, queryDocumentRequest.semanticWeight) &&
        Objects.equals(this.smoothingFactorK, queryDocumentRequest.smoothingFactorK) &&
        Objects.equals(this.minRelevance, queryDocumentRequest.minRelevance) &&
        Objects.equals(this.limit, queryDocumentRequest.limit) &&
        Objects.equals(this.embeddingModel, queryDocumentRequest.embeddingModel) &&
        Objects.equals(this.args, queryDocumentRequest.args);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, index, filter, searchMode, language, languageDetection, ftsMinScore, ftsWeight, semanticMinRelevance, semanticWeight, smoothingFactorK, minRelevance, limit, embeddingModel, args);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryDocumentRequest {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    searchMode: ").append(toIndentedString(searchMode)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languageDetection: ").append(toIndentedString(languageDetection)).append("\n");
    sb.append("    ftsMinScore: ").append(toIndentedString(ftsMinScore)).append("\n");
    sb.append("    ftsWeight: ").append(toIndentedString(ftsWeight)).append("\n");
    sb.append("    semanticMinRelevance: ").append(toIndentedString(semanticMinRelevance)).append("\n");
    sb.append("    semanticWeight: ").append(toIndentedString(semanticWeight)).append("\n");
    sb.append("    smoothingFactorK: ").append(toIndentedString(smoothingFactorK)).append("\n");
    sb.append("    minRelevance: ").append(toIndentedString(minRelevance)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    embeddingModel: ").append(toIndentedString(embeddingModel)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("query");
    openapiFields.add("index");
    openapiFields.add("filter");
    openapiFields.add("searchMode");
    openapiFields.add("language");
    openapiFields.add("languageDetection");
    openapiFields.add("ftsMinScore");
    openapiFields.add("ftsWeight");
    openapiFields.add("semanticMinRelevance");
    openapiFields.add("semanticWeight");
    openapiFields.add("smoothingFactorK");
    openapiFields.add("minRelevance");
    openapiFields.add("limit");
    openapiFields.add("embeddingModel");
    openapiFields.add("args");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryDocumentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryDocumentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryDocumentRequest is not found in the empty JSON string", QueryDocumentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryDocumentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryDocumentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        JsonArray jsonArrayfilter = jsonObj.getAsJsonArray("filter");
        if (jsonArrayfilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filter` to be an array in the JSON string but got `%s`", jsonObj.get("filter").toString()));
          }

          // validate the optional field `filter` (array)
          for (int i = 0; i < jsonArrayfilter.size(); i++) {
            DocumentFilters.validateJsonElement(jsonArrayfilter.get(i));
          };
        }
      }
      if ((jsonObj.get("searchMode") != null && !jsonObj.get("searchMode").isJsonNull()) && !jsonObj.get("searchMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchMode").toString()));
      }
      // validate the optional field `searchMode`
      if (jsonObj.get("searchMode") != null && !jsonObj.get("searchMode").isJsonNull()) {
        SearchModeEnum.validateJsonElement(jsonObj.get("searchMode"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("embeddingModel") != null && !jsonObj.get("embeddingModel").isJsonNull()) && !jsonObj.get("embeddingModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddingModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddingModel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryDocumentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryDocumentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryDocumentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryDocumentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryDocumentRequest>() {
           @Override
           public void write(JsonWriter out, QueryDocumentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryDocumentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryDocumentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryDocumentRequest
   * @throws IOException if the JSON string is invalid with respect to QueryDocumentRequest
   */
  public static QueryDocumentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryDocumentRequest.class);
  }

  /**
   * Convert an instance of QueryDocumentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

