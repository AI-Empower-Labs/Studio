/*
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentPartition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T12:37:37.320941922Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class DocumentPartition {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nullable
  private String text;

  public static final String SERIALIZED_NAME_FULL_TEXT_SEARCH_RANK = "fullTextSearchRank";
  @SerializedName(SERIALIZED_NAME_FULL_TEXT_SEARCH_RANK)
  @javax.annotation.Nullable
  private Float fullTextSearchRank;

  public static final String SERIALIZED_NAME_SEMANTIC_SIMILARITY = "semanticSimilarity";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_SIMILARITY)
  @javax.annotation.Nullable
  private Float semanticSimilarity;

  public static final String SERIALIZED_NAME_FULL_TEXT_SEARCH_RRF = "fullTextSearchRrf";
  @SerializedName(SERIALIZED_NAME_FULL_TEXT_SEARCH_RRF)
  @javax.annotation.Nullable
  private Float fullTextSearchRrf;

  public static final String SERIALIZED_NAME_SEMANTIC_RRF = "semanticRrf";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_RRF)
  @javax.annotation.Nullable
  private Float semanticRrf;

  public static final String SERIALIZED_NAME_RRF_SCORE = "rrfScore";
  @SerializedName(SERIALIZED_NAME_RRF_SCORE)
  @javax.annotation.Nullable
  private Float rrfScore;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  @javax.annotation.Nullable
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, List<String>> tags;

  public DocumentPartition() {
  }

  public DocumentPartition text(@javax.annotation.Nullable String text) {
    this.text = text;
    return this;
  }

  /**
   * Content of the document partition, aka chunk/block of text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nullable String text) {
    this.text = text;
  }


  public DocumentPartition fullTextSearchRank(@javax.annotation.Nullable Float fullTextSearchRank) {
    this.fullTextSearchRank = fullTextSearchRank;
    return this;
  }

  /**
   * Rank value calculated from full-text search, used to determine the relevance of search results.
   * @return fullTextSearchRank
   */
  @javax.annotation.Nullable
  public Float getFullTextSearchRank() {
    return fullTextSearchRank;
  }

  public void setFullTextSearchRank(@javax.annotation.Nullable Float fullTextSearchRank) {
    this.fullTextSearchRank = fullTextSearchRank;
  }


  public DocumentPartition semanticSimilarity(@javax.annotation.Nullable Float semanticSimilarity) {
    this.semanticSimilarity = semanticSimilarity;
    return this;
  }

  /**
   * Represents the semantic similarity score associated with a record.
   * @return semanticSimilarity
   */
  @javax.annotation.Nullable
  public Float getSemanticSimilarity() {
    return semanticSimilarity;
  }

  public void setSemanticSimilarity(@javax.annotation.Nullable Float semanticSimilarity) {
    this.semanticSimilarity = semanticSimilarity;
  }


  public DocumentPartition fullTextSearchRrf(@javax.annotation.Nullable Float fullTextSearchRrf) {
    this.fullTextSearchRrf = fullTextSearchRrf;
    return this;
  }

  /**
   * Reciprocal rank fusion (RRF) score specifically derived from full-text search relevance.
   * @return fullTextSearchRrf
   */
  @javax.annotation.Nullable
  public Float getFullTextSearchRrf() {
    return fullTextSearchRrf;
  }

  public void setFullTextSearchRrf(@javax.annotation.Nullable Float fullTextSearchRrf) {
    this.fullTextSearchRrf = fullTextSearchRrf;
  }


  public DocumentPartition semanticRrf(@javax.annotation.Nullable Float semanticRrf) {
    this.semanticRrf = semanticRrf;
    return this;
  }

  /**
   * Reciprocal Rank Fusion (RRF) score based on semantic similarity
   * @return semanticRrf
   */
  @javax.annotation.Nullable
  public Float getSemanticRrf() {
    return semanticRrf;
  }

  public void setSemanticRrf(@javax.annotation.Nullable Float semanticRrf) {
    this.semanticRrf = semanticRrf;
  }


  public DocumentPartition rrfScore(@javax.annotation.Nullable Float rrfScore) {
    this.rrfScore = rrfScore;
    return this;
  }

  /**
   * Represents the combined Reciprocal Rank Fusion (RRF) score, which integrates results from multiple ranking methods such as semantic similarity and full-text search to enhance result relevance.
   * @return rrfScore
   */
  @javax.annotation.Nullable
  public Float getRrfScore() {
    return rrfScore;
  }

  public void setRrfScore(@javax.annotation.Nullable Float rrfScore) {
    this.rrfScore = rrfScore;
  }


  public DocumentPartition language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Language of partition if any. Optional.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public DocumentPartition lastUpdate(@javax.annotation.Nullable OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Timestamp about the file/text partition.
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(@javax.annotation.Nullable OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public DocumentPartition tags(@javax.annotation.Nullable Map<String, List<String>> tags) {
    this.tags = tags;
    return this;
  }

  public DocumentPartition putTagsItem(String key, List<String> tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * List of document tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, List<String>> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentPartition documentPartition = (DocumentPartition) o;
    return Objects.equals(this.text, documentPartition.text) &&
        Objects.equals(this.fullTextSearchRank, documentPartition.fullTextSearchRank) &&
        Objects.equals(this.semanticSimilarity, documentPartition.semanticSimilarity) &&
        Objects.equals(this.fullTextSearchRrf, documentPartition.fullTextSearchRrf) &&
        Objects.equals(this.semanticRrf, documentPartition.semanticRrf) &&
        Objects.equals(this.rrfScore, documentPartition.rrfScore) &&
        Objects.equals(this.language, documentPartition.language) &&
        Objects.equals(this.lastUpdate, documentPartition.lastUpdate) &&
        Objects.equals(this.tags, documentPartition.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, fullTextSearchRank, semanticSimilarity, fullTextSearchRrf, semanticRrf, rrfScore, language, lastUpdate, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentPartition {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    fullTextSearchRank: ").append(toIndentedString(fullTextSearchRank)).append("\n");
    sb.append("    semanticSimilarity: ").append(toIndentedString(semanticSimilarity)).append("\n");
    sb.append("    fullTextSearchRrf: ").append(toIndentedString(fullTextSearchRrf)).append("\n");
    sb.append("    semanticRrf: ").append(toIndentedString(semanticRrf)).append("\n");
    sb.append("    rrfScore: ").append(toIndentedString(rrfScore)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("text");
    openapiFields.add("fullTextSearchRank");
    openapiFields.add("semanticSimilarity");
    openapiFields.add("fullTextSearchRrf");
    openapiFields.add("semanticRrf");
    openapiFields.add("rrfScore");
    openapiFields.add("language");
    openapiFields.add("lastUpdate");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentPartition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentPartition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentPartition is not found in the empty JSON string", DocumentPartition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentPartition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentPartition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentPartition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentPartition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentPartition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentPartition.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentPartition>() {
           @Override
           public void write(JsonWriter out, DocumentPartition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentPartition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentPartition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentPartition
   * @throws IOException if the JSON string is invalid with respect to DocumentPartition
   */
  public static DocumentPartition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentPartition.class);
  }

  /**
   * Convert an instance of DocumentPartition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

