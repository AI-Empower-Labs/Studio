/*
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SemanticSearchQueryResultsClusteringRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T12:37:37.320941922Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class SemanticSearchQueryResultsClusteringRequest {
  public static final String SERIALIZED_NAME_CLUSTER_COUNT = "clusterCount";
  @SerializedName(SERIALIZED_NAME_CLUSTER_COUNT)
  @javax.annotation.Nullable
  private Integer clusterCount = 3;

  public static final String SERIALIZED_NAME_MAX_DEGREE_OF_PARALLELISM = "maxDegreeOfParallelism";
  @SerializedName(SERIALIZED_NAME_MAX_DEGREE_OF_PARALLELISM)
  @javax.annotation.Nullable
  private Integer maxDegreeOfParallelism = 1;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private String index;

  public static final String SERIALIZED_NAME_MIN_RELEVANCE = "minRelevance";
  @SerializedName(SERIALIZED_NAME_MIN_RELEVANCE)
  @javax.annotation.Nullable
  private BigDecimal minRelevance;

  public static final String SERIALIZED_NAME_MAX_RELEVANCE = "maxRelevance";
  @SerializedName(SERIALIZED_NAME_MAX_RELEVANCE)
  @javax.annotation.Nullable
  private BigDecimal maxRelevance;

  public static final String SERIALIZED_NAME_LLM_MODEL = "llmModel";
  @SerializedName(SERIALIZED_NAME_LLM_MODEL)
  @javax.annotation.Nullable
  private String llmModel;

  public static final String SERIALIZED_NAME_EMBEDDING_MODEL = "embeddingModel";
  @SerializedName(SERIALIZED_NAME_EMBEDDING_MODEL)
  @javax.annotation.Nullable
  private String embeddingModel;

  public SemanticSearchQueryResultsClusteringRequest() {
  }

  public SemanticSearchQueryResultsClusteringRequest clusterCount(@javax.annotation.Nullable Integer clusterCount) {
    this.clusterCount = clusterCount;
    return this;
  }

  /**
   * The number of clusters to be used in k-means clustering.
   * minimum: 2
   * maximum: 100
   * @return clusterCount
   */
  @javax.annotation.Nullable
  public Integer getClusterCount() {
    return clusterCount;
  }

  public void setClusterCount(@javax.annotation.Nullable Integer clusterCount) {
    this.clusterCount = clusterCount;
  }


  public SemanticSearchQueryResultsClusteringRequest maxDegreeOfParallelism(@javax.annotation.Nullable Integer maxDegreeOfParallelism) {
    this.maxDegreeOfParallelism = maxDegreeOfParallelism;
    return this;
  }

  /**
   * The Maximum Degrees Of Parallelism
   * minimum: 1
   * maximum: 100
   * @return maxDegreeOfParallelism
   */
  @javax.annotation.Nullable
  public Integer getMaxDegreeOfParallelism() {
    return maxDegreeOfParallelism;
  }

  public void setMaxDegreeOfParallelism(@javax.annotation.Nullable Integer maxDegreeOfParallelism) {
    this.maxDegreeOfParallelism = maxDegreeOfParallelism;
  }


  public SemanticSearchQueryResultsClusteringRequest index(@javax.annotation.Nullable String index) {
    this.index = index;
    return this;
  }

  /**
   * Optional index to specify which index to search in. Defaults to &#39;default&#39;.
   * @return index
   */
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable String index) {
    this.index = index;
  }


  public SemanticSearchQueryResultsClusteringRequest minRelevance(@javax.annotation.Nullable BigDecimal minRelevance) {
    this.minRelevance = minRelevance;
    return this;
  }

  /**
   * The minimum relevance value used for querying the search result audit.
   * @return minRelevance
   */
  @javax.annotation.Nullable
  public BigDecimal getMinRelevance() {
    return minRelevance;
  }

  public void setMinRelevance(@javax.annotation.Nullable BigDecimal minRelevance) {
    this.minRelevance = minRelevance;
  }


  public SemanticSearchQueryResultsClusteringRequest maxRelevance(@javax.annotation.Nullable BigDecimal maxRelevance) {
    this.maxRelevance = maxRelevance;
    return this;
  }

  /**
   * The maximum relevance value to be used in the search query.
   * @return maxRelevance
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxRelevance() {
    return maxRelevance;
  }

  public void setMaxRelevance(@javax.annotation.Nullable BigDecimal maxRelevance) {
    this.maxRelevance = maxRelevance;
  }


  public SemanticSearchQueryResultsClusteringRequest llmModel(@javax.annotation.Nullable String llmModel) {
    this.llmModel = llmModel;
    return this;
  }

  /**
   * Specifies the name of the LLM (Language Model) to be used in the KMeans clustering algorithm.
   * @return llmModel
   */
  @javax.annotation.Nullable
  public String getLlmModel() {
    return llmModel;
  }

  public void setLlmModel(@javax.annotation.Nullable String llmModel) {
    this.llmModel = llmModel;
  }


  public SemanticSearchQueryResultsClusteringRequest embeddingModel(@javax.annotation.Nullable String embeddingModel) {
    this.embeddingModel = embeddingModel;
    return this;
  }

  /**
   * The name of the embedding model used for clustering.
   * @return embeddingModel
   */
  @javax.annotation.Nullable
  public String getEmbeddingModel() {
    return embeddingModel;
  }

  public void setEmbeddingModel(@javax.annotation.Nullable String embeddingModel) {
    this.embeddingModel = embeddingModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SemanticSearchQueryResultsClusteringRequest semanticSearchQueryResultsClusteringRequest = (SemanticSearchQueryResultsClusteringRequest) o;
    return Objects.equals(this.clusterCount, semanticSearchQueryResultsClusteringRequest.clusterCount) &&
        Objects.equals(this.maxDegreeOfParallelism, semanticSearchQueryResultsClusteringRequest.maxDegreeOfParallelism) &&
        Objects.equals(this.index, semanticSearchQueryResultsClusteringRequest.index) &&
        Objects.equals(this.minRelevance, semanticSearchQueryResultsClusteringRequest.minRelevance) &&
        Objects.equals(this.maxRelevance, semanticSearchQueryResultsClusteringRequest.maxRelevance) &&
        Objects.equals(this.llmModel, semanticSearchQueryResultsClusteringRequest.llmModel) &&
        Objects.equals(this.embeddingModel, semanticSearchQueryResultsClusteringRequest.embeddingModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterCount, maxDegreeOfParallelism, index, minRelevance, maxRelevance, llmModel, embeddingModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SemanticSearchQueryResultsClusteringRequest {\n");
    sb.append("    clusterCount: ").append(toIndentedString(clusterCount)).append("\n");
    sb.append("    maxDegreeOfParallelism: ").append(toIndentedString(maxDegreeOfParallelism)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    minRelevance: ").append(toIndentedString(minRelevance)).append("\n");
    sb.append("    maxRelevance: ").append(toIndentedString(maxRelevance)).append("\n");
    sb.append("    llmModel: ").append(toIndentedString(llmModel)).append("\n");
    sb.append("    embeddingModel: ").append(toIndentedString(embeddingModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterCount");
    openapiFields.add("maxDegreeOfParallelism");
    openapiFields.add("index");
    openapiFields.add("minRelevance");
    openapiFields.add("maxRelevance");
    openapiFields.add("llmModel");
    openapiFields.add("embeddingModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SemanticSearchQueryResultsClusteringRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SemanticSearchQueryResultsClusteringRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SemanticSearchQueryResultsClusteringRequest is not found in the empty JSON string", SemanticSearchQueryResultsClusteringRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SemanticSearchQueryResultsClusteringRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SemanticSearchQueryResultsClusteringRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if ((jsonObj.get("llmModel") != null && !jsonObj.get("llmModel").isJsonNull()) && !jsonObj.get("llmModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `llmModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("llmModel").toString()));
      }
      if ((jsonObj.get("embeddingModel") != null && !jsonObj.get("embeddingModel").isJsonNull()) && !jsonObj.get("embeddingModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddingModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddingModel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SemanticSearchQueryResultsClusteringRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SemanticSearchQueryResultsClusteringRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SemanticSearchQueryResultsClusteringRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SemanticSearchQueryResultsClusteringRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SemanticSearchQueryResultsClusteringRequest>() {
           @Override
           public void write(JsonWriter out, SemanticSearchQueryResultsClusteringRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SemanticSearchQueryResultsClusteringRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SemanticSearchQueryResultsClusteringRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SemanticSearchQueryResultsClusteringRequest
   * @throws IOException if the JSON string is invalid with respect to SemanticSearchQueryResultsClusteringRequest
   */
  public static SemanticSearchQueryResultsClusteringRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SemanticSearchQueryResultsClusteringRequest.class);
  }

  /**
   * Convert an instance of SemanticSearchQueryResultsClusteringRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

