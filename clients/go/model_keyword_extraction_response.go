/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeywordExtractionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeywordExtractionResponse{}

// KeywordExtractionResponse struct for KeywordExtractionResponse
type KeywordExtractionResponse struct {
	Keywords []string `json:"keywords,omitempty"`
}

// NewKeywordExtractionResponse instantiates a new KeywordExtractionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeywordExtractionResponse() *KeywordExtractionResponse {
	this := KeywordExtractionResponse{}
	return &this
}

// NewKeywordExtractionResponseWithDefaults instantiates a new KeywordExtractionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordExtractionResponseWithDefaults() *KeywordExtractionResponse {
	this := KeywordExtractionResponse{}
	return &this
}

// GetKeywords returns the Keywords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeywordExtractionResponse) GetKeywords() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeywordExtractionResponse) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *KeywordExtractionResponse) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *KeywordExtractionResponse) SetKeywords(v []string) {
	o.Keywords = v
}

func (o KeywordExtractionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeywordExtractionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Keywords != nil {
		toSerialize["keywords"] = o.Keywords
	}
	return toSerialize, nil
}

type NullableKeywordExtractionResponse struct {
	value *KeywordExtractionResponse
	isSet bool
}

func (v NullableKeywordExtractionResponse) Get() *KeywordExtractionResponse {
	return v.value
}

func (v *NullableKeywordExtractionResponse) Set(val *KeywordExtractionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeywordExtractionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeywordExtractionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeywordExtractionResponse(val *KeywordExtractionResponse) *NullableKeywordExtractionResponse {
	return &NullableKeywordExtractionResponse{value: val, isSet: true}
}

func (v NullableKeywordExtractionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeywordExtractionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


