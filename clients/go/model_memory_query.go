/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MemoryQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemoryQuery{}

// MemoryQuery struct for MemoryQuery
type MemoryQuery struct {
	Index NullableString `json:"index,omitempty"`
	Question NullableString `json:"question,omitempty"`
	Filters []map[string][]string `json:"filters,omitempty"`
	MinRelevance *float64 `json:"minRelevance,omitempty"`
}

// NewMemoryQuery instantiates a new MemoryQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryQuery() *MemoryQuery {
	this := MemoryQuery{}
	return &this
}

// NewMemoryQueryWithDefaults instantiates a new MemoryQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryQueryWithDefaults() *MemoryQuery {
	this := MemoryQuery{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryQuery) GetIndex() string {
	if o == nil || IsNil(o.Index.Get()) {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryQuery) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *MemoryQuery) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *MemoryQuery) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *MemoryQuery) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *MemoryQuery) UnsetIndex() {
	o.Index.Unset()
}

// GetQuestion returns the Question field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryQuery) GetQuestion() string {
	if o == nil || IsNil(o.Question.Get()) {
		var ret string
		return ret
	}
	return *o.Question.Get()
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryQuery) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Question.Get(), o.Question.IsSet()
}

// HasQuestion returns a boolean if a field has been set.
func (o *MemoryQuery) HasQuestion() bool {
	if o != nil && o.Question.IsSet() {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given NullableString and assigns it to the Question field.
func (o *MemoryQuery) SetQuestion(v string) {
	o.Question.Set(&v)
}
// SetQuestionNil sets the value for Question to be an explicit nil
func (o *MemoryQuery) SetQuestionNil() {
	o.Question.Set(nil)
}

// UnsetQuestion ensures that no value is present for Question, not even an explicit nil
func (o *MemoryQuery) UnsetQuestion() {
	o.Question.Unset()
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryQuery) GetFilters() []map[string][]string {
	if o == nil {
		var ret []map[string][]string
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryQuery) GetFiltersOk() ([]map[string][]string, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *MemoryQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []map[string][]string and assigns it to the Filters field.
func (o *MemoryQuery) SetFilters(v []map[string][]string) {
	o.Filters = v
}

// GetMinRelevance returns the MinRelevance field value if set, zero value otherwise.
func (o *MemoryQuery) GetMinRelevance() float64 {
	if o == nil || IsNil(o.MinRelevance) {
		var ret float64
		return ret
	}
	return *o.MinRelevance
}

// GetMinRelevanceOk returns a tuple with the MinRelevance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryQuery) GetMinRelevanceOk() (*float64, bool) {
	if o == nil || IsNil(o.MinRelevance) {
		return nil, false
	}
	return o.MinRelevance, true
}

// HasMinRelevance returns a boolean if a field has been set.
func (o *MemoryQuery) HasMinRelevance() bool {
	if o != nil && !IsNil(o.MinRelevance) {
		return true
	}

	return false
}

// SetMinRelevance gets a reference to the given float64 and assigns it to the MinRelevance field.
func (o *MemoryQuery) SetMinRelevance(v float64) {
	o.MinRelevance = &v
}

func (o MemoryQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemoryQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Question.IsSet() {
		toSerialize["question"] = o.Question.Get()
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.MinRelevance) {
		toSerialize["minRelevance"] = o.MinRelevance
	}
	return toSerialize, nil
}

type NullableMemoryQuery struct {
	value *MemoryQuery
	isSet bool
}

func (v NullableMemoryQuery) Get() *MemoryQuery {
	return v.value
}

func (v *NullableMemoryQuery) Set(val *MemoryQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryQuery(val *MemoryQuery) *NullableMemoryQuery {
	return &NullableMemoryQuery{value: val, isSet: true}
}

func (v NullableMemoryQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


