/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReRankDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReRankDocument{}

// ReRankDocument struct for ReRankDocument
type ReRankDocument struct {
	Document NullableString `json:"document,omitempty"`
	Index *int32 `json:"index,omitempty"`
	RelevanceScore *float32 `json:"relevance_score,omitempty"`
}

// NewReRankDocument instantiates a new ReRankDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReRankDocument() *ReRankDocument {
	this := ReRankDocument{}
	return &this
}

// NewReRankDocumentWithDefaults instantiates a new ReRankDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReRankDocumentWithDefaults() *ReRankDocument {
	this := ReRankDocument{}
	return &this
}

// GetDocument returns the Document field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReRankDocument) GetDocument() string {
	if o == nil || IsNil(o.Document.Get()) {
		var ret string
		return ret
	}
	return *o.Document.Get()
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReRankDocument) GetDocumentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Document.Get(), o.Document.IsSet()
}

// HasDocument returns a boolean if a field has been set.
func (o *ReRankDocument) HasDocument() bool {
	if o != nil && o.Document.IsSet() {
		return true
	}

	return false
}

// SetDocument gets a reference to the given NullableString and assigns it to the Document field.
func (o *ReRankDocument) SetDocument(v string) {
	o.Document.Set(&v)
}
// SetDocumentNil sets the value for Document to be an explicit nil
func (o *ReRankDocument) SetDocumentNil() {
	o.Document.Set(nil)
}

// UnsetDocument ensures that no value is present for Document, not even an explicit nil
func (o *ReRankDocument) UnsetDocument() {
	o.Document.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ReRankDocument) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReRankDocument) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ReRankDocument) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ReRankDocument) SetIndex(v int32) {
	o.Index = &v
}

// GetRelevanceScore returns the RelevanceScore field value if set, zero value otherwise.
func (o *ReRankDocument) GetRelevanceScore() float32 {
	if o == nil || IsNil(o.RelevanceScore) {
		var ret float32
		return ret
	}
	return *o.RelevanceScore
}

// GetRelevanceScoreOk returns a tuple with the RelevanceScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReRankDocument) GetRelevanceScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.RelevanceScore) {
		return nil, false
	}
	return o.RelevanceScore, true
}

// HasRelevanceScore returns a boolean if a field has been set.
func (o *ReRankDocument) HasRelevanceScore() bool {
	if o != nil && !IsNil(o.RelevanceScore) {
		return true
	}

	return false
}

// SetRelevanceScore gets a reference to the given float32 and assigns it to the RelevanceScore field.
func (o *ReRankDocument) SetRelevanceScore(v float32) {
	o.RelevanceScore = &v
}

func (o ReRankDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReRankDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Document.IsSet() {
		toSerialize["document"] = o.Document.Get()
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.RelevanceScore) {
		toSerialize["relevance_score"] = o.RelevanceScore
	}
	return toSerialize, nil
}

type NullableReRankDocument struct {
	value *ReRankDocument
	isSet bool
}

func (v NullableReRankDocument) Get() *ReRankDocument {
	return v.value
}

func (v *NullableReRankDocument) Set(val *ReRankDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableReRankDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableReRankDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReRankDocument(val *ReRankDocument) *NullableReRankDocument {
	return &NullableReRankDocument{value: val, isSet: true}
}

func (v NullableReRankDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReRankDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


