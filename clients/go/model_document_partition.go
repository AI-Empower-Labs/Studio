/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DocumentPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentPartition{}

// DocumentPartition struct for DocumentPartition
type DocumentPartition struct {
	// Content of the document partition, aka chunk/block of text.
	Text NullableString `json:"text,omitempty"`
	// Rank value calculated from full-text search, used to determine the relevance of search results.
	FullTextSearchRank NullableFloat32 `json:"fullTextSearchRank,omitempty"`
	// Represents the semantic similarity score associated with a record.
	SemanticSimilarity NullableFloat32 `json:"semanticSimilarity,omitempty"`
	// Reciprocal rank fusion (RRF) score specifically derived from full-text search relevance.
	FullTextSearchRrf NullableFloat32 `json:"fullTextSearchRrf,omitempty"`
	// Reciprocal Rank Fusion (RRF) score based on semantic similarity
	SemanticRrf NullableFloat32 `json:"semanticRrf,omitempty"`
	// Represents the combined Reciprocal Rank Fusion (RRF) score, which integrates results from multiple ranking methods such as semantic similarity and full-text search to enhance result relevance.
	RrfScore NullableFloat32 `json:"rrfScore,omitempty"`
	// Language of partition if any. Optional.
	Language NullableString `json:"language,omitempty"`
	// Timestamp about the file/text partition.
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
	// List of document tags
	Tags map[string][]string `json:"tags,omitempty"`
}

// NewDocumentPartition instantiates a new DocumentPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentPartition() *DocumentPartition {
	this := DocumentPartition{}
	return &this
}

// NewDocumentPartitionWithDefaults instantiates a new DocumentPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentPartitionWithDefaults() *DocumentPartition {
	this := DocumentPartition{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetText() string {
	if o == nil || IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *DocumentPartition) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableString and assigns it to the Text field.
func (o *DocumentPartition) SetText(v string) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *DocumentPartition) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *DocumentPartition) UnsetText() {
	o.Text.Unset()
}

// GetFullTextSearchRank returns the FullTextSearchRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetFullTextSearchRank() float32 {
	if o == nil || IsNil(o.FullTextSearchRank.Get()) {
		var ret float32
		return ret
	}
	return *o.FullTextSearchRank.Get()
}

// GetFullTextSearchRankOk returns a tuple with the FullTextSearchRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetFullTextSearchRankOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTextSearchRank.Get(), o.FullTextSearchRank.IsSet()
}

// HasFullTextSearchRank returns a boolean if a field has been set.
func (o *DocumentPartition) HasFullTextSearchRank() bool {
	if o != nil && o.FullTextSearchRank.IsSet() {
		return true
	}

	return false
}

// SetFullTextSearchRank gets a reference to the given NullableFloat32 and assigns it to the FullTextSearchRank field.
func (o *DocumentPartition) SetFullTextSearchRank(v float32) {
	o.FullTextSearchRank.Set(&v)
}
// SetFullTextSearchRankNil sets the value for FullTextSearchRank to be an explicit nil
func (o *DocumentPartition) SetFullTextSearchRankNil() {
	o.FullTextSearchRank.Set(nil)
}

// UnsetFullTextSearchRank ensures that no value is present for FullTextSearchRank, not even an explicit nil
func (o *DocumentPartition) UnsetFullTextSearchRank() {
	o.FullTextSearchRank.Unset()
}

// GetSemanticSimilarity returns the SemanticSimilarity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetSemanticSimilarity() float32 {
	if o == nil || IsNil(o.SemanticSimilarity.Get()) {
		var ret float32
		return ret
	}
	return *o.SemanticSimilarity.Get()
}

// GetSemanticSimilarityOk returns a tuple with the SemanticSimilarity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetSemanticSimilarityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SemanticSimilarity.Get(), o.SemanticSimilarity.IsSet()
}

// HasSemanticSimilarity returns a boolean if a field has been set.
func (o *DocumentPartition) HasSemanticSimilarity() bool {
	if o != nil && o.SemanticSimilarity.IsSet() {
		return true
	}

	return false
}

// SetSemanticSimilarity gets a reference to the given NullableFloat32 and assigns it to the SemanticSimilarity field.
func (o *DocumentPartition) SetSemanticSimilarity(v float32) {
	o.SemanticSimilarity.Set(&v)
}
// SetSemanticSimilarityNil sets the value for SemanticSimilarity to be an explicit nil
func (o *DocumentPartition) SetSemanticSimilarityNil() {
	o.SemanticSimilarity.Set(nil)
}

// UnsetSemanticSimilarity ensures that no value is present for SemanticSimilarity, not even an explicit nil
func (o *DocumentPartition) UnsetSemanticSimilarity() {
	o.SemanticSimilarity.Unset()
}

// GetFullTextSearchRrf returns the FullTextSearchRrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetFullTextSearchRrf() float32 {
	if o == nil || IsNil(o.FullTextSearchRrf.Get()) {
		var ret float32
		return ret
	}
	return *o.FullTextSearchRrf.Get()
}

// GetFullTextSearchRrfOk returns a tuple with the FullTextSearchRrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetFullTextSearchRrfOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullTextSearchRrf.Get(), o.FullTextSearchRrf.IsSet()
}

// HasFullTextSearchRrf returns a boolean if a field has been set.
func (o *DocumentPartition) HasFullTextSearchRrf() bool {
	if o != nil && o.FullTextSearchRrf.IsSet() {
		return true
	}

	return false
}

// SetFullTextSearchRrf gets a reference to the given NullableFloat32 and assigns it to the FullTextSearchRrf field.
func (o *DocumentPartition) SetFullTextSearchRrf(v float32) {
	o.FullTextSearchRrf.Set(&v)
}
// SetFullTextSearchRrfNil sets the value for FullTextSearchRrf to be an explicit nil
func (o *DocumentPartition) SetFullTextSearchRrfNil() {
	o.FullTextSearchRrf.Set(nil)
}

// UnsetFullTextSearchRrf ensures that no value is present for FullTextSearchRrf, not even an explicit nil
func (o *DocumentPartition) UnsetFullTextSearchRrf() {
	o.FullTextSearchRrf.Unset()
}

// GetSemanticRrf returns the SemanticRrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetSemanticRrf() float32 {
	if o == nil || IsNil(o.SemanticRrf.Get()) {
		var ret float32
		return ret
	}
	return *o.SemanticRrf.Get()
}

// GetSemanticRrfOk returns a tuple with the SemanticRrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetSemanticRrfOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SemanticRrf.Get(), o.SemanticRrf.IsSet()
}

// HasSemanticRrf returns a boolean if a field has been set.
func (o *DocumentPartition) HasSemanticRrf() bool {
	if o != nil && o.SemanticRrf.IsSet() {
		return true
	}

	return false
}

// SetSemanticRrf gets a reference to the given NullableFloat32 and assigns it to the SemanticRrf field.
func (o *DocumentPartition) SetSemanticRrf(v float32) {
	o.SemanticRrf.Set(&v)
}
// SetSemanticRrfNil sets the value for SemanticRrf to be an explicit nil
func (o *DocumentPartition) SetSemanticRrfNil() {
	o.SemanticRrf.Set(nil)
}

// UnsetSemanticRrf ensures that no value is present for SemanticRrf, not even an explicit nil
func (o *DocumentPartition) UnsetSemanticRrf() {
	o.SemanticRrf.Unset()
}

// GetRrfScore returns the RrfScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetRrfScore() float32 {
	if o == nil || IsNil(o.RrfScore.Get()) {
		var ret float32
		return ret
	}
	return *o.RrfScore.Get()
}

// GetRrfScoreOk returns a tuple with the RrfScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetRrfScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RrfScore.Get(), o.RrfScore.IsSet()
}

// HasRrfScore returns a boolean if a field has been set.
func (o *DocumentPartition) HasRrfScore() bool {
	if o != nil && o.RrfScore.IsSet() {
		return true
	}

	return false
}

// SetRrfScore gets a reference to the given NullableFloat32 and assigns it to the RrfScore field.
func (o *DocumentPartition) SetRrfScore(v float32) {
	o.RrfScore.Set(&v)
}
// SetRrfScoreNil sets the value for RrfScore to be an explicit nil
func (o *DocumentPartition) SetRrfScoreNil() {
	o.RrfScore.Set(nil)
}

// UnsetRrfScore ensures that no value is present for RrfScore, not even an explicit nil
func (o *DocumentPartition) UnsetRrfScore() {
	o.RrfScore.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *DocumentPartition) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *DocumentPartition) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *DocumentPartition) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *DocumentPartition) UnsetLanguage() {
	o.Language.Unset()
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *DocumentPartition) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPartition) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *DocumentPartition) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *DocumentPartition) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentPartition) GetTags() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentPartition) GetTagsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DocumentPartition) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string][]string and assigns it to the Tags field.
func (o *DocumentPartition) SetTags(v map[string][]string) {
	o.Tags = v
}

func (o DocumentPartition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	if o.FullTextSearchRank.IsSet() {
		toSerialize["fullTextSearchRank"] = o.FullTextSearchRank.Get()
	}
	if o.SemanticSimilarity.IsSet() {
		toSerialize["semanticSimilarity"] = o.SemanticSimilarity.Get()
	}
	if o.FullTextSearchRrf.IsSet() {
		toSerialize["fullTextSearchRrf"] = o.FullTextSearchRrf.Get()
	}
	if o.SemanticRrf.IsSet() {
		toSerialize["semanticRrf"] = o.SemanticRrf.Get()
	}
	if o.RrfScore.IsSet() {
		toSerialize["rrfScore"] = o.RrfScore.Get()
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDocumentPartition struct {
	value *DocumentPartition
	isSet bool
}

func (v NullableDocumentPartition) Get() *DocumentPartition {
	return v.value
}

func (v *NullableDocumentPartition) Set(val *DocumentPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentPartition(val *DocumentPartition) *NullableDocumentPartition {
	return &NullableDocumentPartition{value: val, isSet: true}
}

func (v NullableDocumentPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


