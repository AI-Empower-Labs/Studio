/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MemoryAnswer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemoryAnswer{}

// MemoryAnswer struct for MemoryAnswer
type MemoryAnswer struct {
	Question NullableString `json:"question,omitempty"`
	NoResult *bool `json:"noResult,omitempty"`
	NoResultReason NullableString `json:"noResultReason,omitempty"`
	Text NullableString `json:"text,omitempty"`
	RelevantSources []Citation `json:"relevantSources,omitempty"`
}

// NewMemoryAnswer instantiates a new MemoryAnswer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryAnswer() *MemoryAnswer {
	this := MemoryAnswer{}
	return &this
}

// NewMemoryAnswerWithDefaults instantiates a new MemoryAnswer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryAnswerWithDefaults() *MemoryAnswer {
	this := MemoryAnswer{}
	return &this
}

// GetQuestion returns the Question field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryAnswer) GetQuestion() string {
	if o == nil || IsNil(o.Question.Get()) {
		var ret string
		return ret
	}
	return *o.Question.Get()
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryAnswer) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Question.Get(), o.Question.IsSet()
}

// HasQuestion returns a boolean if a field has been set.
func (o *MemoryAnswer) HasQuestion() bool {
	if o != nil && o.Question.IsSet() {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given NullableString and assigns it to the Question field.
func (o *MemoryAnswer) SetQuestion(v string) {
	o.Question.Set(&v)
}
// SetQuestionNil sets the value for Question to be an explicit nil
func (o *MemoryAnswer) SetQuestionNil() {
	o.Question.Set(nil)
}

// UnsetQuestion ensures that no value is present for Question, not even an explicit nil
func (o *MemoryAnswer) UnsetQuestion() {
	o.Question.Unset()
}

// GetNoResult returns the NoResult field value if set, zero value otherwise.
func (o *MemoryAnswer) GetNoResult() bool {
	if o == nil || IsNil(o.NoResult) {
		var ret bool
		return ret
	}
	return *o.NoResult
}

// GetNoResultOk returns a tuple with the NoResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryAnswer) GetNoResultOk() (*bool, bool) {
	if o == nil || IsNil(o.NoResult) {
		return nil, false
	}
	return o.NoResult, true
}

// HasNoResult returns a boolean if a field has been set.
func (o *MemoryAnswer) HasNoResult() bool {
	if o != nil && !IsNil(o.NoResult) {
		return true
	}

	return false
}

// SetNoResult gets a reference to the given bool and assigns it to the NoResult field.
func (o *MemoryAnswer) SetNoResult(v bool) {
	o.NoResult = &v
}

// GetNoResultReason returns the NoResultReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryAnswer) GetNoResultReason() string {
	if o == nil || IsNil(o.NoResultReason.Get()) {
		var ret string
		return ret
	}
	return *o.NoResultReason.Get()
}

// GetNoResultReasonOk returns a tuple with the NoResultReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryAnswer) GetNoResultReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoResultReason.Get(), o.NoResultReason.IsSet()
}

// HasNoResultReason returns a boolean if a field has been set.
func (o *MemoryAnswer) HasNoResultReason() bool {
	if o != nil && o.NoResultReason.IsSet() {
		return true
	}

	return false
}

// SetNoResultReason gets a reference to the given NullableString and assigns it to the NoResultReason field.
func (o *MemoryAnswer) SetNoResultReason(v string) {
	o.NoResultReason.Set(&v)
}
// SetNoResultReasonNil sets the value for NoResultReason to be an explicit nil
func (o *MemoryAnswer) SetNoResultReasonNil() {
	o.NoResultReason.Set(nil)
}

// UnsetNoResultReason ensures that no value is present for NoResultReason, not even an explicit nil
func (o *MemoryAnswer) UnsetNoResultReason() {
	o.NoResultReason.Unset()
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryAnswer) GetText() string {
	if o == nil || IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryAnswer) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *MemoryAnswer) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableString and assigns it to the Text field.
func (o *MemoryAnswer) SetText(v string) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *MemoryAnswer) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *MemoryAnswer) UnsetText() {
	o.Text.Unset()
}

// GetRelevantSources returns the RelevantSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemoryAnswer) GetRelevantSources() []Citation {
	if o == nil {
		var ret []Citation
		return ret
	}
	return o.RelevantSources
}

// GetRelevantSourcesOk returns a tuple with the RelevantSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemoryAnswer) GetRelevantSourcesOk() ([]Citation, bool) {
	if o == nil || IsNil(o.RelevantSources) {
		return nil, false
	}
	return o.RelevantSources, true
}

// HasRelevantSources returns a boolean if a field has been set.
func (o *MemoryAnswer) HasRelevantSources() bool {
	if o != nil && !IsNil(o.RelevantSources) {
		return true
	}

	return false
}

// SetRelevantSources gets a reference to the given []Citation and assigns it to the RelevantSources field.
func (o *MemoryAnswer) SetRelevantSources(v []Citation) {
	o.RelevantSources = v
}

func (o MemoryAnswer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemoryAnswer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Question.IsSet() {
		toSerialize["question"] = o.Question.Get()
	}
	if !IsNil(o.NoResult) {
		toSerialize["noResult"] = o.NoResult
	}
	if o.NoResultReason.IsSet() {
		toSerialize["noResultReason"] = o.NoResultReason.Get()
	}
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	if o.RelevantSources != nil {
		toSerialize["relevantSources"] = o.RelevantSources
	}
	return toSerialize, nil
}

type NullableMemoryAnswer struct {
	value *MemoryAnswer
	isSet bool
}

func (v NullableMemoryAnswer) Get() *MemoryAnswer {
	return v.value
}

func (v *NullableMemoryAnswer) Set(val *MemoryAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryAnswer(val *MemoryAnswer) *NullableMemoryAnswer {
	return &NullableMemoryAnswer{value: val, isSet: true}
}

func (v NullableMemoryAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


