/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DocumentCitation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentCitation{}

// DocumentCitation struct for DocumentCitation
type DocumentCitation struct {
	// Link to the source, if available.
	Link NullableString `json:"link,omitempty"`
	// Link to the source, if available.
	Index NullableString `json:"index,omitempty"`
	// Link to the source, if available.
	DocumentId NullableString `json:"documentId,omitempty"`
	// Link to the source, if available.
	FileId NullableString `json:"fileId,omitempty"`
	// Type of source, e.g. PDF, Word, Chat, etc.
	SourceContentType NullableString `json:"sourceContentType,omitempty"`
	// Name of the source, e.g. file name.
	SourceName NullableString `json:"sourceName,omitempty"`
	// URL of the source, used for web pages and external data
	SourceUrl NullableString `json:"sourceUrl,omitempty"`
	// List of chunks/blocks of text used.
	Partitions []DocumentPartition `json:"partitions,omitempty"`
}

// NewDocumentCitation instantiates a new DocumentCitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentCitation() *DocumentCitation {
	this := DocumentCitation{}
	return &this
}

// NewDocumentCitationWithDefaults instantiates a new DocumentCitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentCitationWithDefaults() *DocumentCitation {
	this := DocumentCitation{}
	return &this
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetLink() string {
	if o == nil || IsNil(o.Link.Get()) {
		var ret string
		return ret
	}
	return *o.Link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Link.Get(), o.Link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *DocumentCitation) HasLink() bool {
	if o != nil && o.Link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given NullableString and assigns it to the Link field.
func (o *DocumentCitation) SetLink(v string) {
	o.Link.Set(&v)
}
// SetLinkNil sets the value for Link to be an explicit nil
func (o *DocumentCitation) SetLinkNil() {
	o.Link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *DocumentCitation) UnsetLink() {
	o.Link.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetIndex() string {
	if o == nil || IsNil(o.Index.Get()) {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *DocumentCitation) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *DocumentCitation) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *DocumentCitation) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *DocumentCitation) UnsetIndex() {
	o.Index.Unset()
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId.Get()) {
		var ret string
		return ret
	}
	return *o.DocumentId.Get()
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentId.Get(), o.DocumentId.IsSet()
}

// HasDocumentId returns a boolean if a field has been set.
func (o *DocumentCitation) HasDocumentId() bool {
	if o != nil && o.DocumentId.IsSet() {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given NullableString and assigns it to the DocumentId field.
func (o *DocumentCitation) SetDocumentId(v string) {
	o.DocumentId.Set(&v)
}
// SetDocumentIdNil sets the value for DocumentId to be an explicit nil
func (o *DocumentCitation) SetDocumentIdNil() {
	o.DocumentId.Set(nil)
}

// UnsetDocumentId ensures that no value is present for DocumentId, not even an explicit nil
func (o *DocumentCitation) UnsetDocumentId() {
	o.DocumentId.Unset()
}

// GetFileId returns the FileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetFileId() string {
	if o == nil || IsNil(o.FileId.Get()) {
		var ret string
		return ret
	}
	return *o.FileId.Get()
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileId.Get(), o.FileId.IsSet()
}

// HasFileId returns a boolean if a field has been set.
func (o *DocumentCitation) HasFileId() bool {
	if o != nil && o.FileId.IsSet() {
		return true
	}

	return false
}

// SetFileId gets a reference to the given NullableString and assigns it to the FileId field.
func (o *DocumentCitation) SetFileId(v string) {
	o.FileId.Set(&v)
}
// SetFileIdNil sets the value for FileId to be an explicit nil
func (o *DocumentCitation) SetFileIdNil() {
	o.FileId.Set(nil)
}

// UnsetFileId ensures that no value is present for FileId, not even an explicit nil
func (o *DocumentCitation) UnsetFileId() {
	o.FileId.Unset()
}

// GetSourceContentType returns the SourceContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetSourceContentType() string {
	if o == nil || IsNil(o.SourceContentType.Get()) {
		var ret string
		return ret
	}
	return *o.SourceContentType.Get()
}

// GetSourceContentTypeOk returns a tuple with the SourceContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetSourceContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceContentType.Get(), o.SourceContentType.IsSet()
}

// HasSourceContentType returns a boolean if a field has been set.
func (o *DocumentCitation) HasSourceContentType() bool {
	if o != nil && o.SourceContentType.IsSet() {
		return true
	}

	return false
}

// SetSourceContentType gets a reference to the given NullableString and assigns it to the SourceContentType field.
func (o *DocumentCitation) SetSourceContentType(v string) {
	o.SourceContentType.Set(&v)
}
// SetSourceContentTypeNil sets the value for SourceContentType to be an explicit nil
func (o *DocumentCitation) SetSourceContentTypeNil() {
	o.SourceContentType.Set(nil)
}

// UnsetSourceContentType ensures that no value is present for SourceContentType, not even an explicit nil
func (o *DocumentCitation) UnsetSourceContentType() {
	o.SourceContentType.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *DocumentCitation) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *DocumentCitation) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *DocumentCitation) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *DocumentCitation) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SourceUrl.Get()
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetSourceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceUrl.Get(), o.SourceUrl.IsSet()
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *DocumentCitation) HasSourceUrl() bool {
	if o != nil && o.SourceUrl.IsSet() {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given NullableString and assigns it to the SourceUrl field.
func (o *DocumentCitation) SetSourceUrl(v string) {
	o.SourceUrl.Set(&v)
}
// SetSourceUrlNil sets the value for SourceUrl to be an explicit nil
func (o *DocumentCitation) SetSourceUrlNil() {
	o.SourceUrl.Set(nil)
}

// UnsetSourceUrl ensures that no value is present for SourceUrl, not even an explicit nil
func (o *DocumentCitation) UnsetSourceUrl() {
	o.SourceUrl.Unset()
}

// GetPartitions returns the Partitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentCitation) GetPartitions() []DocumentPartition {
	if o == nil {
		var ret []DocumentPartition
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentCitation) GetPartitionsOk() ([]DocumentPartition, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *DocumentCitation) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []DocumentPartition and assigns it to the Partitions field.
func (o *DocumentCitation) SetPartitions(v []DocumentPartition) {
	o.Partitions = v
}

func (o DocumentCitation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentCitation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Link.IsSet() {
		toSerialize["link"] = o.Link.Get()
	}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.DocumentId.IsSet() {
		toSerialize["documentId"] = o.DocumentId.Get()
	}
	if o.FileId.IsSet() {
		toSerialize["fileId"] = o.FileId.Get()
	}
	if o.SourceContentType.IsSet() {
		toSerialize["sourceContentType"] = o.SourceContentType.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.SourceUrl.IsSet() {
		toSerialize["sourceUrl"] = o.SourceUrl.Get()
	}
	if o.Partitions != nil {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

type NullableDocumentCitation struct {
	value *DocumentCitation
	isSet bool
}

func (v NullableDocumentCitation) Get() *DocumentCitation {
	return v.value
}

func (v *NullableDocumentCitation) Set(val *DocumentCitation) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentCitation) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentCitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentCitation(val *DocumentCitation) *NullableDocumentCitation {
	return &NullableDocumentCitation{value: val, isSet: true}
}

func (v NullableDocumentCitation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentCitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


