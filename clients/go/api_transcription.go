/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TranscriptionAPIService TranscriptionAPI service
type TranscriptionAPIService service

type ApiTranscriptionAsynchronousRequest struct {
	ctx context.Context
	ApiService *TranscriptionAPIService
	files []*os.File
	model *string
	language *string
	prompt *string
	temperature *float64
	webHookUrl *string
	translateTo *string
	splitOnWord *bool
	languageDetection *bool
	enableNoiseReduction *bool
}

// The file object to ingest.
func (r ApiTranscriptionAsynchronousRequest) Files(files []*os.File) ApiTranscriptionAsynchronousRequest {
	r.files = files
	return r
}

// Model to use for transcription (Optional, default &#x3D; Base)
func (r ApiTranscriptionAsynchronousRequest) Model(model string) ApiTranscriptionAsynchronousRequest {
	r.model = &model
	return r
}

// The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
func (r ApiTranscriptionAsynchronousRequest) Language(language string) ApiTranscriptionAsynchronousRequest {
	r.language = &language
	return r
}

// An optional text to guide the model&#39;s style or continue a previous audio segment. The prompt should match the audio language.  (optional)
func (r ApiTranscriptionAsynchronousRequest) Prompt(prompt string) ApiTranscriptionAsynchronousRequest {
	r.prompt = &prompt
	return r
}

// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0M)
func (r ApiTranscriptionAsynchronousRequest) Temperature(temperature float64) ApiTranscriptionAsynchronousRequest {
	r.temperature = &temperature
	return r
}

// Url to call when transcription has completed or failed. (optional)
func (r ApiTranscriptionAsynchronousRequest) WebHookUrl(webHookUrl string) ApiTranscriptionAsynchronousRequest {
	r.webHookUrl = &webHookUrl
	return r
}

// The language to translate transcription into. Supplying the language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
func (r ApiTranscriptionAsynchronousRequest) TranslateTo(translateTo string) ApiTranscriptionAsynchronousRequest {
	r.translateTo = &translateTo
	return r
}

// Split into word segments. (optional, default is false)
func (r ApiTranscriptionAsynchronousRequest) SplitOnWord(splitOnWord bool) ApiTranscriptionAsynchronousRequest {
	r.splitOnWord = &splitOnWord
	return r
}

// Enable transcription language detection (Optional. default is false)
func (r ApiTranscriptionAsynchronousRequest) LanguageDetection(languageDetection bool) ApiTranscriptionAsynchronousRequest {
	r.languageDetection = &languageDetection
	return r
}

// Enable noise reduction from audio stream before transcription (Optional. default is false)
func (r ApiTranscriptionAsynchronousRequest) EnableNoiseReduction(enableNoiseReduction bool) ApiTranscriptionAsynchronousRequest {
	r.enableNoiseReduction = &enableNoiseReduction
	return r
}

func (r ApiTranscriptionAsynchronousRequest) Execute() (*TranscriptionAudioUploadResult, *http.Response, error) {
	return r.ApiService.TranscriptionAsynchronousExecute(r)
}

/*
TranscriptionAsynchronous Upload audio file for asynchronous transcription

This service is designed to convert spoken words from audio or video files into written text, utilizing sophisticated speech recognition algorithms for accurate transcription. It offers a range of features that cater to various needs and use cases, making it particularly valuable for journalists, researchers, podcasters, and professionals dealing with meetings, interviews, lectures, or presentations.

### Key features and capabilities include:

* Support for Various File Formats: Accepts a wide range of audio and video file formats, ensuring flexibility in file uploads.
* Advanced Processing Steps: Incorporates noise reduction, speaker diarization, and speech-to-text conversion for clear and differentiated transcriptions.
* Asynchronous Background Processing: Allows for non-blocking, efficient handling of transcription tasks, suitable for large files or batches of files.
* Webhook Callback URL: Offers real-time updates on the transcription process via a provided webhook, enabling immediate reaction to task completion or failure.
* /api/transcribe GET Endpoint: Provides an alternative for users to manually check the status of their transcription requests, allowing flexibility in monitoring.
* Automatic Text Translation Feature: An optional service that translates the transcribed text into a specified target language, enhancing the utility for multi-lingual contexts.
* Multi-File and Multi-Channel Support: Supports concurrent file uploads and accurate transcription of multi-channel recordings, ideal for complex audio environments.
* The transcription output is meticulously formatted to clearly distinguish between channels and speakers, including timestamps and labels for easy navigation and reference. This structured approach ensures that even in challenging audio environments with multiple speakers or channels, the transcription service can provide clear, accurate, and useful text representations of the spoken content.

This service integrates into applications via API calls, offering developers a powerful tool to enhance their applications with audio-to-text conversion capabilities. The inclusion of features like language detection, support for multiple languages, and customization options for specific vocabulary or industry terms further extends its applicability across various domains and industries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTranscriptionAsynchronousRequest
*/
func (a *TranscriptionAPIService) TranscriptionAsynchronous(ctx context.Context) ApiTranscriptionAsynchronousRequest {
	return ApiTranscriptionAsynchronousRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TranscriptionAudioUploadResult
func (a *TranscriptionAPIService) TranscriptionAsynchronousExecute(r ApiTranscriptionAsynchronousRequest) (*TranscriptionAudioUploadResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TranscriptionAudioUploadResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TranscriptionAPIService.TranscriptionAsynchronous")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/transcribe/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.files == nil {
		return localVarReturnValue, nil, reportError("files is required and must be specified")
	}

	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.prompt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prompt", r.prompt, "")
	}
	if r.temperature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "temperature", r.temperature, "")
	} else {
		var defaultValue float64 = 0
		r.temperature = &defaultValue
	}
	if r.webHookUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "webHookUrl", r.webHookUrl, "")
	}
	if r.translateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translateTo", r.translateTo, "")
	}
	if r.splitOnWord != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "splitOnWord", r.splitOnWord, "")
	} else {
		var defaultValue bool = false
		r.splitOnWord = &defaultValue
	}
	if r.languageDetection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "languageDetection", r.languageDetection, "")
	} else {
		var defaultValue bool = false
		r.languageDetection = &defaultValue
	}
	if r.enableNoiseReduction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableNoiseReduction", r.enableNoiseReduction, "")
	} else {
		var defaultValue bool = false
		r.enableNoiseReduction = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var filesLocalVarFormFileName string
	var filesLocalVarFileName     string
	var filesLocalVarFileBytes    []byte

	filesLocalVarFormFileName = "files"
	filesLocalVarFile := r.files

	if filesLocalVarFile != nil {
		// loop through the array to prepare multiple files upload
		for _, filesLocalVarFileValue := range filesLocalVarFile {
			fbs, _ := io.ReadAll(filesLocalVarFileValue)

			filesLocalVarFileBytes = fbs
			filesLocalVarFileName = filesLocalVarFileValue.Name()
			filesLocalVarFileValue.Close()
			formFiles = append(formFiles, formFile{fileBytes: filesLocalVarFileBytes, fileName: filesLocalVarFileName, formFileName: filesLocalVarFormFileName})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HttpValidationProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTranscriptionGetByIdRequest struct {
	ctx context.Context
	ApiService *TranscriptionAPIService
	id *string
}

func (r ApiTranscriptionGetByIdRequest) Id(id string) ApiTranscriptionGetByIdRequest {
	r.id = &id
	return r
}

func (r ApiTranscriptionGetByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.TranscriptionGetByIdExecute(r)
}

/*
TranscriptionGetById Get transcription status and data

The /api/transcribe GET endpoint is a crucial component of the audio transcription service, designed to offer users a way to check the status of their transcription requests. This endpoint caters to the needs of users who prefer polling to monitor their requests over relying on webhook callbacks for real-time updates. Here's a detailed description of its functionality and how it integrates within the service:

### Purpose and Functionality
The primary purpose of the /api/transcribe GET endpoint is to provide users with the ability to manually inquire about the current status of their audio or video file transcription tasks. This endpoint supports a polling mechanism, where users can send a GET request at their convenience to receive the latest update on their transcription process.

### How It Works
Request: To utilize this endpoint, users initiate a GET request, including a unique identifier for the transcription task as a parameter. This identifier is provided by the service when the transcription request is first submitted.
Response: In response to the GET request, the endpoint returns data about the transcription task's status. The response indicate that the transcription is still processing, has been completed, or has failed.

### Response Details
The response from the /api/transcribe GET endpoint includes several pieces of information that are crucial for users to understand the status and outcome of their transcription requests:

Status: Indicates the current state of the transcription task (e.g., Queued, Completed, Failed).
Completion Details: If the transcription is completed, the response include details the resulting transcript.

### Use Cases
This endpoint is particularly useful for scenarios where users need or prefer to periodically check the status of their requests rather than implement real-time update mechanisms via webhooks. It provides flexibility in handling transcription tasks, allowing users to:

### Advantages
The /api/transcribe GET endpoint offers several advantages, including simplicity in implementation, flexibility in usage, and the ability to integrate easily into various application workflows. It provides a straightforward method for users to remain informed about their transcription tasks without the need for complex callback systems, making it an essential feature for many applications and services requiring transcription capabilities.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTranscriptionGetByIdRequest
*/
func (a *TranscriptionAPIService) TranscriptionGetById(ctx context.Context) ApiTranscriptionGetByIdRequest {
	return ApiTranscriptionGetByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TranscriptionAPIService) TranscriptionGetByIdExecute(r ApiTranscriptionGetByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TranscriptionAPIService.TranscriptionGetById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/transcribe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HttpValidationProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
