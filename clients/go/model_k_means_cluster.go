/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KMeansCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KMeansCluster{}

// KMeansCluster Response object for K-Means Clustering containing cluster size and centroids array
type KMeansCluster struct {
	// Number of points in the cluster
	ClusterSize int32 `json:"clusterSize"`
	// List of cluster centroids
	Centroids []Centroid `json:"centroids"`
}

type _KMeansCluster KMeansCluster

// NewKMeansCluster instantiates a new KMeansCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKMeansCluster(clusterSize int32, centroids []Centroid) *KMeansCluster {
	this := KMeansCluster{}
	this.ClusterSize = clusterSize
	this.Centroids = centroids
	return &this
}

// NewKMeansClusterWithDefaults instantiates a new KMeansCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKMeansClusterWithDefaults() *KMeansCluster {
	this := KMeansCluster{}
	return &this
}

// GetClusterSize returns the ClusterSize field value
func (o *KMeansCluster) GetClusterSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClusterSize
}

// GetClusterSizeOk returns a tuple with the ClusterSize field value
// and a boolean to check if the value has been set.
func (o *KMeansCluster) GetClusterSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterSize, true
}

// SetClusterSize sets field value
func (o *KMeansCluster) SetClusterSize(v int32) {
	o.ClusterSize = v
}

// GetCentroids returns the Centroids field value
func (o *KMeansCluster) GetCentroids() []Centroid {
	if o == nil {
		var ret []Centroid
		return ret
	}

	return o.Centroids
}

// GetCentroidsOk returns a tuple with the Centroids field value
// and a boolean to check if the value has been set.
func (o *KMeansCluster) GetCentroidsOk() ([]Centroid, bool) {
	if o == nil {
		return nil, false
	}
	return o.Centroids, true
}

// SetCentroids sets field value
func (o *KMeansCluster) SetCentroids(v []Centroid) {
	o.Centroids = v
}

func (o KMeansCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KMeansCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterSize"] = o.ClusterSize
	toSerialize["centroids"] = o.Centroids
	return toSerialize, nil
}

func (o *KMeansCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterSize",
		"centroids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKMeansCluster := _KMeansCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKMeansCluster)

	if err != nil {
		return err
	}

	*o = KMeansCluster(varKMeansCluster)

	return err
}

type NullableKMeansCluster struct {
	value *KMeansCluster
	isSet bool
}

func (v NullableKMeansCluster) Get() *KMeansCluster {
	return v.value
}

func (v *NullableKMeansCluster) Set(val *KMeansCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableKMeansCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableKMeansCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKMeansCluster(val *KMeansCluster) *NullableKMeansCluster {
	return &NullableKMeansCluster{value: val, isSet: true}
}

func (v NullableKMeansCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKMeansCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


