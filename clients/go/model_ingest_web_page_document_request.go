/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestWebPageDocumentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestWebPageDocumentRequest{}

// IngestWebPageDocumentRequest struct for IngestWebPageDocumentRequest
type IngestWebPageDocumentRequest struct {
	// Web page to ingest
	Url string `json:"url"`
	// Unique identifier for the document to ingest.
	DocumentId string `json:"documentId"`
	// Optional index name where the document will be stored.
	Index NullableString `json:"index,omitempty"`
	// Optional webhook URL to notify upon completion.
	WebHookUrl NullableString `json:"webHookUrl,omitempty"`
	// Optional name of the embedding model to use during ingestion.
	EmbeddingModelName NullableString `json:"embeddingModelName,omitempty"`
	// Optional key-value pairs for additional context or metadata.
	Context map[string]string `json:"context,omitempty"`
	// A collection of tags associated with the document. Tags can be language-specific.
	Tags map[string][]string `json:"tags,omitempty"`
	// Optional list of ingestion pipeline steps. Allows custom processing.
	IngestionPipeline []string `json:"ingestionPipeline,omitempty"`
	// Enable automatic language detection for document content.
	LanguageAutoDetection *bool `json:"languageAutoDetection,omitempty"`
	// Force a specific language for full-text search. Use 'simple' for no language or leave empty.
	Language NullableString `json:"language,omitempty"`
}

type _IngestWebPageDocumentRequest IngestWebPageDocumentRequest

// NewIngestWebPageDocumentRequest instantiates a new IngestWebPageDocumentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestWebPageDocumentRequest(url string, documentId string) *IngestWebPageDocumentRequest {
	this := IngestWebPageDocumentRequest{}
	this.Url = url
	this.DocumentId = documentId
	var languageAutoDetection bool = false
	this.LanguageAutoDetection = &languageAutoDetection
	return &this
}

// NewIngestWebPageDocumentRequestWithDefaults instantiates a new IngestWebPageDocumentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestWebPageDocumentRequestWithDefaults() *IngestWebPageDocumentRequest {
	this := IngestWebPageDocumentRequest{}
	var languageAutoDetection bool = false
	this.LanguageAutoDetection = &languageAutoDetection
	return &this
}

// GetUrl returns the Url field value
func (o *IngestWebPageDocumentRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *IngestWebPageDocumentRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *IngestWebPageDocumentRequest) SetUrl(v string) {
	o.Url = v
}

// GetDocumentId returns the DocumentId field value
func (o *IngestWebPageDocumentRequest) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *IngestWebPageDocumentRequest) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *IngestWebPageDocumentRequest) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetIndex() string {
	if o == nil || IsNil(o.Index.Get()) {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *IngestWebPageDocumentRequest) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *IngestWebPageDocumentRequest) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *IngestWebPageDocumentRequest) UnsetIndex() {
	o.Index.Unset()
}

// GetWebHookUrl returns the WebHookUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetWebHookUrl() string {
	if o == nil || IsNil(o.WebHookUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebHookUrl.Get()
}

// GetWebHookUrlOk returns a tuple with the WebHookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetWebHookUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebHookUrl.Get(), o.WebHookUrl.IsSet()
}

// HasWebHookUrl returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasWebHookUrl() bool {
	if o != nil && o.WebHookUrl.IsSet() {
		return true
	}

	return false
}

// SetWebHookUrl gets a reference to the given NullableString and assigns it to the WebHookUrl field.
func (o *IngestWebPageDocumentRequest) SetWebHookUrl(v string) {
	o.WebHookUrl.Set(&v)
}
// SetWebHookUrlNil sets the value for WebHookUrl to be an explicit nil
func (o *IngestWebPageDocumentRequest) SetWebHookUrlNil() {
	o.WebHookUrl.Set(nil)
}

// UnsetWebHookUrl ensures that no value is present for WebHookUrl, not even an explicit nil
func (o *IngestWebPageDocumentRequest) UnsetWebHookUrl() {
	o.WebHookUrl.Unset()
}

// GetEmbeddingModelName returns the EmbeddingModelName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetEmbeddingModelName() string {
	if o == nil || IsNil(o.EmbeddingModelName.Get()) {
		var ret string
		return ret
	}
	return *o.EmbeddingModelName.Get()
}

// GetEmbeddingModelNameOk returns a tuple with the EmbeddingModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetEmbeddingModelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmbeddingModelName.Get(), o.EmbeddingModelName.IsSet()
}

// HasEmbeddingModelName returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasEmbeddingModelName() bool {
	if o != nil && o.EmbeddingModelName.IsSet() {
		return true
	}

	return false
}

// SetEmbeddingModelName gets a reference to the given NullableString and assigns it to the EmbeddingModelName field.
func (o *IngestWebPageDocumentRequest) SetEmbeddingModelName(v string) {
	o.EmbeddingModelName.Set(&v)
}
// SetEmbeddingModelNameNil sets the value for EmbeddingModelName to be an explicit nil
func (o *IngestWebPageDocumentRequest) SetEmbeddingModelNameNil() {
	o.EmbeddingModelName.Set(nil)
}

// UnsetEmbeddingModelName ensures that no value is present for EmbeddingModelName, not even an explicit nil
func (o *IngestWebPageDocumentRequest) UnsetEmbeddingModelName() {
	o.EmbeddingModelName.Unset()
}

// GetContext returns the Context field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetContext() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetContextOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return &o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]string and assigns it to the Context field.
func (o *IngestWebPageDocumentRequest) SetContext(v map[string]string) {
	o.Context = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetTags() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetTagsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string][]string and assigns it to the Tags field.
func (o *IngestWebPageDocumentRequest) SetTags(v map[string][]string) {
	o.Tags = v
}

// GetIngestionPipeline returns the IngestionPipeline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetIngestionPipeline() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IngestionPipeline
}

// GetIngestionPipelineOk returns a tuple with the IngestionPipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetIngestionPipelineOk() ([]string, bool) {
	if o == nil || IsNil(o.IngestionPipeline) {
		return nil, false
	}
	return o.IngestionPipeline, true
}

// HasIngestionPipeline returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasIngestionPipeline() bool {
	if o != nil && !IsNil(o.IngestionPipeline) {
		return true
	}

	return false
}

// SetIngestionPipeline gets a reference to the given []string and assigns it to the IngestionPipeline field.
func (o *IngestWebPageDocumentRequest) SetIngestionPipeline(v []string) {
	o.IngestionPipeline = v
}

// GetLanguageAutoDetection returns the LanguageAutoDetection field value if set, zero value otherwise.
func (o *IngestWebPageDocumentRequest) GetLanguageAutoDetection() bool {
	if o == nil || IsNil(o.LanguageAutoDetection) {
		var ret bool
		return ret
	}
	return *o.LanguageAutoDetection
}

// GetLanguageAutoDetectionOk returns a tuple with the LanguageAutoDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestWebPageDocumentRequest) GetLanguageAutoDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.LanguageAutoDetection) {
		return nil, false
	}
	return o.LanguageAutoDetection, true
}

// HasLanguageAutoDetection returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasLanguageAutoDetection() bool {
	if o != nil && !IsNil(o.LanguageAutoDetection) {
		return true
	}

	return false
}

// SetLanguageAutoDetection gets a reference to the given bool and assigns it to the LanguageAutoDetection field.
func (o *IngestWebPageDocumentRequest) SetLanguageAutoDetection(v bool) {
	o.LanguageAutoDetection = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestWebPageDocumentRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestWebPageDocumentRequest) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *IngestWebPageDocumentRequest) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *IngestWebPageDocumentRequest) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *IngestWebPageDocumentRequest) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *IngestWebPageDocumentRequest) UnsetLanguage() {
	o.Language.Unset()
}

func (o IngestWebPageDocumentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestWebPageDocumentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["documentId"] = o.DocumentId
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.WebHookUrl.IsSet() {
		toSerialize["webHookUrl"] = o.WebHookUrl.Get()
	}
	if o.EmbeddingModelName.IsSet() {
		toSerialize["embeddingModelName"] = o.EmbeddingModelName.Get()
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.IngestionPipeline != nil {
		toSerialize["ingestionPipeline"] = o.IngestionPipeline
	}
	if !IsNil(o.LanguageAutoDetection) {
		toSerialize["languageAutoDetection"] = o.LanguageAutoDetection
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	return toSerialize, nil
}

func (o *IngestWebPageDocumentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"documentId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestWebPageDocumentRequest := _IngestWebPageDocumentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestWebPageDocumentRequest)

	if err != nil {
		return err
	}

	*o = IngestWebPageDocumentRequest(varIngestWebPageDocumentRequest)

	return err
}

type NullableIngestWebPageDocumentRequest struct {
	value *IngestWebPageDocumentRequest
	isSet bool
}

func (v NullableIngestWebPageDocumentRequest) Get() *IngestWebPageDocumentRequest {
	return v.value
}

func (v *NullableIngestWebPageDocumentRequest) Set(val *IngestWebPageDocumentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestWebPageDocumentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestWebPageDocumentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestWebPageDocumentRequest(val *IngestWebPageDocumentRequest) *NullableIngestWebPageDocumentRequest {
	return &NullableIngestWebPageDocumentRequest{value: val, isSet: true}
}

func (v NullableIngestWebPageDocumentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestWebPageDocumentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


