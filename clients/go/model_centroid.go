/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Centroid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Centroid{}

// Centroid A cluster centroid with its coordinate and associated data points
type Centroid struct {
	Coordinate *Coordinate `json:"coordinate,omitempty"`
	// Data points assigned to this centroid
	DataPoints []Coordinate `json:"dataPoints,omitempty"`
}

// NewCentroid instantiates a new Centroid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentroid() *Centroid {
	this := Centroid{}
	return &this
}

// NewCentroidWithDefaults instantiates a new Centroid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentroidWithDefaults() *Centroid {
	this := Centroid{}
	return &this
}

// GetCoordinate returns the Coordinate field value if set, zero value otherwise.
func (o *Centroid) GetCoordinate() Coordinate {
	if o == nil || IsNil(o.Coordinate) {
		var ret Coordinate
		return ret
	}
	return *o.Coordinate
}

// GetCoordinateOk returns a tuple with the Coordinate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Centroid) GetCoordinateOk() (*Coordinate, bool) {
	if o == nil || IsNil(o.Coordinate) {
		return nil, false
	}
	return o.Coordinate, true
}

// HasCoordinate returns a boolean if a field has been set.
func (o *Centroid) HasCoordinate() bool {
	if o != nil && !IsNil(o.Coordinate) {
		return true
	}

	return false
}

// SetCoordinate gets a reference to the given Coordinate and assigns it to the Coordinate field.
func (o *Centroid) SetCoordinate(v Coordinate) {
	o.Coordinate = &v
}

// GetDataPoints returns the DataPoints field value if set, zero value otherwise.
func (o *Centroid) GetDataPoints() []Coordinate {
	if o == nil || IsNil(o.DataPoints) {
		var ret []Coordinate
		return ret
	}
	return o.DataPoints
}

// GetDataPointsOk returns a tuple with the DataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Centroid) GetDataPointsOk() ([]Coordinate, bool) {
	if o == nil || IsNil(o.DataPoints) {
		return nil, false
	}
	return o.DataPoints, true
}

// HasDataPoints returns a boolean if a field has been set.
func (o *Centroid) HasDataPoints() bool {
	if o != nil && !IsNil(o.DataPoints) {
		return true
	}

	return false
}

// SetDataPoints gets a reference to the given []Coordinate and assigns it to the DataPoints field.
func (o *Centroid) SetDataPoints(v []Coordinate) {
	o.DataPoints = v
}

func (o Centroid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Centroid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Coordinate) {
		toSerialize["coordinate"] = o.Coordinate
	}
	if !IsNil(o.DataPoints) {
		toSerialize["dataPoints"] = o.DataPoints
	}
	return toSerialize, nil
}

type NullableCentroid struct {
	value *Centroid
	isSet bool
}

func (v NullableCentroid) Get() *Centroid {
	return v.value
}

func (v *NullableCentroid) Set(val *Centroid) {
	v.value = val
	v.isSet = true
}

func (v NullableCentroid) IsSet() bool {
	return v.isSet
}

func (v *NullableCentroid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentroid(val *Centroid) *NullableCentroid {
	return &NullableCentroid{value: val, isSet: true}
}

func (v NullableCentroid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentroid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


