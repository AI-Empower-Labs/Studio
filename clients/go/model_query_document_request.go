/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryDocumentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryDocumentRequest{}

// QueryDocumentRequest struct for QueryDocumentRequest
type QueryDocumentRequest struct {
	// Semantic query to find matching documents
	Query NullableString `json:"query,omitempty"`
	// Optional index to specify which index to search in. Defaults to 'default'
	Index NullableString `json:"index,omitempty"`
	// Optional filtering of document id(s) and/or tags
	Filter []DocumentFilters `json:"filter,omitempty"`
	// Optional search mode defining the context or process used in the query. Supported values are 'hybrid', 'semantic'
	SearchMode NullableString `json:"searchMode,omitempty"`
	// Specifies the language of the content.
	Language NullableString `json:"language,omitempty"`
	// Indicates whether language detection is enabled.
	LanguageDetection NullableBool `json:"languageDetection,omitempty"`
	// Minimum score for full-text search.
	FtsMinScore NullableFloat32 `json:"ftsMinScore,omitempty"`
	// Weight for full-text search.
	FtsWeight NullableFloat32 `json:"ftsWeight,omitempty"`
	// Minimum relevance score for semantic search.
	SemanticMinRelevance NullableFloat64 `json:"semanticMinRelevance,omitempty"`
	// Weight applied for semantic search.
	SemanticWeight NullableFloat32 `json:"semanticWeight,omitempty"`
	// Smoothing factor (k) used in calculations.
	SmoothingFactorK NullableFloat32 `json:"smoothingFactorK,omitempty"`
	// Optional filter to specify minimum relevance. Typically values between 0 and 1
	MinRelevance NullableFloat64 `json:"minRelevance,omitempty"`
	// Optional filter for specifying maximum number of entries to return. Defaults to 3
	Limit NullableInt32 `json:"limit,omitempty"`
	// Embedding model to use in query
	EmbeddingModel NullableString `json:"embeddingModel,omitempty"`
	Args map[string]interface{} `json:"args,omitempty"`
}

// NewQueryDocumentRequest instantiates a new QueryDocumentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDocumentRequest() *QueryDocumentRequest {
	this := QueryDocumentRequest{}
	return &this
}

// NewQueryDocumentRequestWithDefaults instantiates a new QueryDocumentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDocumentRequestWithDefaults() *QueryDocumentRequest {
	this := QueryDocumentRequest{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetQuery() string {
	if o == nil || IsNil(o.Query.Get()) {
		var ret string
		return ret
	}
	return *o.Query.Get()
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Query.Get(), o.Query.IsSet()
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasQuery() bool {
	if o != nil && o.Query.IsSet() {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NullableString and assigns it to the Query field.
func (o *QueryDocumentRequest) SetQuery(v string) {
	o.Query.Set(&v)
}
// SetQueryNil sets the value for Query to be an explicit nil
func (o *QueryDocumentRequest) SetQueryNil() {
	o.Query.Set(nil)
}

// UnsetQuery ensures that no value is present for Query, not even an explicit nil
func (o *QueryDocumentRequest) UnsetQuery() {
	o.Query.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetIndex() string {
	if o == nil || IsNil(o.Index.Get()) {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *QueryDocumentRequest) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *QueryDocumentRequest) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *QueryDocumentRequest) UnsetIndex() {
	o.Index.Unset()
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetFilter() []DocumentFilters {
	if o == nil {
		var ret []DocumentFilters
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetFilterOk() ([]DocumentFilters, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []DocumentFilters and assigns it to the Filter field.
func (o *QueryDocumentRequest) SetFilter(v []DocumentFilters) {
	o.Filter = v
}

// GetSearchMode returns the SearchMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetSearchMode() string {
	if o == nil || IsNil(o.SearchMode.Get()) {
		var ret string
		return ret
	}
	return *o.SearchMode.Get()
}

// GetSearchModeOk returns a tuple with the SearchMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetSearchModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchMode.Get(), o.SearchMode.IsSet()
}

// HasSearchMode returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasSearchMode() bool {
	if o != nil && o.SearchMode.IsSet() {
		return true
	}

	return false
}

// SetSearchMode gets a reference to the given NullableString and assigns it to the SearchMode field.
func (o *QueryDocumentRequest) SetSearchMode(v string) {
	o.SearchMode.Set(&v)
}
// SetSearchModeNil sets the value for SearchMode to be an explicit nil
func (o *QueryDocumentRequest) SetSearchModeNil() {
	o.SearchMode.Set(nil)
}

// UnsetSearchMode ensures that no value is present for SearchMode, not even an explicit nil
func (o *QueryDocumentRequest) UnsetSearchMode() {
	o.SearchMode.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *QueryDocumentRequest) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *QueryDocumentRequest) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *QueryDocumentRequest) UnsetLanguage() {
	o.Language.Unset()
}

// GetLanguageDetection returns the LanguageDetection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetLanguageDetection() bool {
	if o == nil || IsNil(o.LanguageDetection.Get()) {
		var ret bool
		return ret
	}
	return *o.LanguageDetection.Get()
}

// GetLanguageDetectionOk returns a tuple with the LanguageDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetLanguageDetectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LanguageDetection.Get(), o.LanguageDetection.IsSet()
}

// HasLanguageDetection returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasLanguageDetection() bool {
	if o != nil && o.LanguageDetection.IsSet() {
		return true
	}

	return false
}

// SetLanguageDetection gets a reference to the given NullableBool and assigns it to the LanguageDetection field.
func (o *QueryDocumentRequest) SetLanguageDetection(v bool) {
	o.LanguageDetection.Set(&v)
}
// SetLanguageDetectionNil sets the value for LanguageDetection to be an explicit nil
func (o *QueryDocumentRequest) SetLanguageDetectionNil() {
	o.LanguageDetection.Set(nil)
}

// UnsetLanguageDetection ensures that no value is present for LanguageDetection, not even an explicit nil
func (o *QueryDocumentRequest) UnsetLanguageDetection() {
	o.LanguageDetection.Unset()
}

// GetFtsMinScore returns the FtsMinScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetFtsMinScore() float32 {
	if o == nil || IsNil(o.FtsMinScore.Get()) {
		var ret float32
		return ret
	}
	return *o.FtsMinScore.Get()
}

// GetFtsMinScoreOk returns a tuple with the FtsMinScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetFtsMinScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FtsMinScore.Get(), o.FtsMinScore.IsSet()
}

// HasFtsMinScore returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasFtsMinScore() bool {
	if o != nil && o.FtsMinScore.IsSet() {
		return true
	}

	return false
}

// SetFtsMinScore gets a reference to the given NullableFloat32 and assigns it to the FtsMinScore field.
func (o *QueryDocumentRequest) SetFtsMinScore(v float32) {
	o.FtsMinScore.Set(&v)
}
// SetFtsMinScoreNil sets the value for FtsMinScore to be an explicit nil
func (o *QueryDocumentRequest) SetFtsMinScoreNil() {
	o.FtsMinScore.Set(nil)
}

// UnsetFtsMinScore ensures that no value is present for FtsMinScore, not even an explicit nil
func (o *QueryDocumentRequest) UnsetFtsMinScore() {
	o.FtsMinScore.Unset()
}

// GetFtsWeight returns the FtsWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetFtsWeight() float32 {
	if o == nil || IsNil(o.FtsWeight.Get()) {
		var ret float32
		return ret
	}
	return *o.FtsWeight.Get()
}

// GetFtsWeightOk returns a tuple with the FtsWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetFtsWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FtsWeight.Get(), o.FtsWeight.IsSet()
}

// HasFtsWeight returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasFtsWeight() bool {
	if o != nil && o.FtsWeight.IsSet() {
		return true
	}

	return false
}

// SetFtsWeight gets a reference to the given NullableFloat32 and assigns it to the FtsWeight field.
func (o *QueryDocumentRequest) SetFtsWeight(v float32) {
	o.FtsWeight.Set(&v)
}
// SetFtsWeightNil sets the value for FtsWeight to be an explicit nil
func (o *QueryDocumentRequest) SetFtsWeightNil() {
	o.FtsWeight.Set(nil)
}

// UnsetFtsWeight ensures that no value is present for FtsWeight, not even an explicit nil
func (o *QueryDocumentRequest) UnsetFtsWeight() {
	o.FtsWeight.Unset()
}

// GetSemanticMinRelevance returns the SemanticMinRelevance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetSemanticMinRelevance() float64 {
	if o == nil || IsNil(o.SemanticMinRelevance.Get()) {
		var ret float64
		return ret
	}
	return *o.SemanticMinRelevance.Get()
}

// GetSemanticMinRelevanceOk returns a tuple with the SemanticMinRelevance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetSemanticMinRelevanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SemanticMinRelevance.Get(), o.SemanticMinRelevance.IsSet()
}

// HasSemanticMinRelevance returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasSemanticMinRelevance() bool {
	if o != nil && o.SemanticMinRelevance.IsSet() {
		return true
	}

	return false
}

// SetSemanticMinRelevance gets a reference to the given NullableFloat64 and assigns it to the SemanticMinRelevance field.
func (o *QueryDocumentRequest) SetSemanticMinRelevance(v float64) {
	o.SemanticMinRelevance.Set(&v)
}
// SetSemanticMinRelevanceNil sets the value for SemanticMinRelevance to be an explicit nil
func (o *QueryDocumentRequest) SetSemanticMinRelevanceNil() {
	o.SemanticMinRelevance.Set(nil)
}

// UnsetSemanticMinRelevance ensures that no value is present for SemanticMinRelevance, not even an explicit nil
func (o *QueryDocumentRequest) UnsetSemanticMinRelevance() {
	o.SemanticMinRelevance.Unset()
}

// GetSemanticWeight returns the SemanticWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetSemanticWeight() float32 {
	if o == nil || IsNil(o.SemanticWeight.Get()) {
		var ret float32
		return ret
	}
	return *o.SemanticWeight.Get()
}

// GetSemanticWeightOk returns a tuple with the SemanticWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetSemanticWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SemanticWeight.Get(), o.SemanticWeight.IsSet()
}

// HasSemanticWeight returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasSemanticWeight() bool {
	if o != nil && o.SemanticWeight.IsSet() {
		return true
	}

	return false
}

// SetSemanticWeight gets a reference to the given NullableFloat32 and assigns it to the SemanticWeight field.
func (o *QueryDocumentRequest) SetSemanticWeight(v float32) {
	o.SemanticWeight.Set(&v)
}
// SetSemanticWeightNil sets the value for SemanticWeight to be an explicit nil
func (o *QueryDocumentRequest) SetSemanticWeightNil() {
	o.SemanticWeight.Set(nil)
}

// UnsetSemanticWeight ensures that no value is present for SemanticWeight, not even an explicit nil
func (o *QueryDocumentRequest) UnsetSemanticWeight() {
	o.SemanticWeight.Unset()
}

// GetSmoothingFactorK returns the SmoothingFactorK field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetSmoothingFactorK() float32 {
	if o == nil || IsNil(o.SmoothingFactorK.Get()) {
		var ret float32
		return ret
	}
	return *o.SmoothingFactorK.Get()
}

// GetSmoothingFactorKOk returns a tuple with the SmoothingFactorK field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetSmoothingFactorKOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmoothingFactorK.Get(), o.SmoothingFactorK.IsSet()
}

// HasSmoothingFactorK returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasSmoothingFactorK() bool {
	if o != nil && o.SmoothingFactorK.IsSet() {
		return true
	}

	return false
}

// SetSmoothingFactorK gets a reference to the given NullableFloat32 and assigns it to the SmoothingFactorK field.
func (o *QueryDocumentRequest) SetSmoothingFactorK(v float32) {
	o.SmoothingFactorK.Set(&v)
}
// SetSmoothingFactorKNil sets the value for SmoothingFactorK to be an explicit nil
func (o *QueryDocumentRequest) SetSmoothingFactorKNil() {
	o.SmoothingFactorK.Set(nil)
}

// UnsetSmoothingFactorK ensures that no value is present for SmoothingFactorK, not even an explicit nil
func (o *QueryDocumentRequest) UnsetSmoothingFactorK() {
	o.SmoothingFactorK.Unset()
}

// GetMinRelevance returns the MinRelevance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetMinRelevance() float64 {
	if o == nil || IsNil(o.MinRelevance.Get()) {
		var ret float64
		return ret
	}
	return *o.MinRelevance.Get()
}

// GetMinRelevanceOk returns a tuple with the MinRelevance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetMinRelevanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinRelevance.Get(), o.MinRelevance.IsSet()
}

// HasMinRelevance returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasMinRelevance() bool {
	if o != nil && o.MinRelevance.IsSet() {
		return true
	}

	return false
}

// SetMinRelevance gets a reference to the given NullableFloat64 and assigns it to the MinRelevance field.
func (o *QueryDocumentRequest) SetMinRelevance(v float64) {
	o.MinRelevance.Set(&v)
}
// SetMinRelevanceNil sets the value for MinRelevance to be an explicit nil
func (o *QueryDocumentRequest) SetMinRelevanceNil() {
	o.MinRelevance.Set(nil)
}

// UnsetMinRelevance ensures that no value is present for MinRelevance, not even an explicit nil
func (o *QueryDocumentRequest) UnsetMinRelevance() {
	o.MinRelevance.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int32
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt32 and assigns it to the Limit field.
func (o *QueryDocumentRequest) SetLimit(v int32) {
	o.Limit.Set(&v)
}
// SetLimitNil sets the value for Limit to be an explicit nil
func (o *QueryDocumentRequest) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *QueryDocumentRequest) UnsetLimit() {
	o.Limit.Unset()
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetEmbeddingModel() string {
	if o == nil || IsNil(o.EmbeddingModel.Get()) {
		var ret string
		return ret
	}
	return *o.EmbeddingModel.Get()
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetEmbeddingModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmbeddingModel.Get(), o.EmbeddingModel.IsSet()
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasEmbeddingModel() bool {
	if o != nil && o.EmbeddingModel.IsSet() {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given NullableString and assigns it to the EmbeddingModel field.
func (o *QueryDocumentRequest) SetEmbeddingModel(v string) {
	o.EmbeddingModel.Set(&v)
}
// SetEmbeddingModelNil sets the value for EmbeddingModel to be an explicit nil
func (o *QueryDocumentRequest) SetEmbeddingModelNil() {
	o.EmbeddingModel.Set(nil)
}

// UnsetEmbeddingModel ensures that no value is present for EmbeddingModel, not even an explicit nil
func (o *QueryDocumentRequest) UnsetEmbeddingModel() {
	o.EmbeddingModel.Unset()
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocumentRequest) GetArgs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocumentRequest) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return map[string]interface{}{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *QueryDocumentRequest) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *QueryDocumentRequest) SetArgs(v map[string]interface{}) {
	o.Args = v
}

func (o QueryDocumentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDocumentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Query.IsSet() {
		toSerialize["query"] = o.Query.Get()
	}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.SearchMode.IsSet() {
		toSerialize["searchMode"] = o.SearchMode.Get()
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if o.LanguageDetection.IsSet() {
		toSerialize["languageDetection"] = o.LanguageDetection.Get()
	}
	if o.FtsMinScore.IsSet() {
		toSerialize["ftsMinScore"] = o.FtsMinScore.Get()
	}
	if o.FtsWeight.IsSet() {
		toSerialize["ftsWeight"] = o.FtsWeight.Get()
	}
	if o.SemanticMinRelevance.IsSet() {
		toSerialize["semanticMinRelevance"] = o.SemanticMinRelevance.Get()
	}
	if o.SemanticWeight.IsSet() {
		toSerialize["semanticWeight"] = o.SemanticWeight.Get()
	}
	if o.SmoothingFactorK.IsSet() {
		toSerialize["smoothingFactorK"] = o.SmoothingFactorK.Get()
	}
	if o.MinRelevance.IsSet() {
		toSerialize["minRelevance"] = o.MinRelevance.Get()
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if o.EmbeddingModel.IsSet() {
		toSerialize["embeddingModel"] = o.EmbeddingModel.Get()
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

type NullableQueryDocumentRequest struct {
	value *QueryDocumentRequest
	isSet bool
}

func (v NullableQueryDocumentRequest) Get() *QueryDocumentRequest {
	return v.value
}

func (v *NullableQueryDocumentRequest) Set(val *QueryDocumentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDocumentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDocumentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDocumentRequest(val *QueryDocumentRequest) *NullableQueryDocumentRequest {
	return &NullableQueryDocumentRequest{value: val, isSet: true}
}

func (v NullableQueryDocumentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDocumentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


