/*
Studio - AI Empower Labs

# Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

API version: v1
Contact: support@aiempowerlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestTextDocumentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestTextDocumentRequest{}

// IngestTextDocumentRequest struct for IngestTextDocumentRequest
type IngestTextDocumentRequest struct {
	// Id that uniquely identifies content. Previously ingested documents with the same id will be overwritten
	DocumentId string `json:"documentId"`
	// Optional value to specify with index the document should be ingested. Defaults to 'default'
	Index NullableString `json:"index,omitempty"`
	// Optionally add tags to ingestion
	Tags map[string][]string `json:"tags,omitempty"`
	// Text to ingest
	Text string `json:"text"`
	// Optional value to specify ingestion pipeline steps. Defaults to server configured defaults.
	Pipeline []string `json:"pipeline,omitempty"`
	// Url to use for webhook callback when operation finishes or fails.
	WebHookUrl NullableString `json:"webHookUrl,omitempty"`
	// Embedding model to use in ingestion. Optional. Default to configured default.
	EmbeddingModel NullableString `json:"embeddingModel,omitempty"`
	Args map[string]interface{} `json:"args,omitempty"`
}

type _IngestTextDocumentRequest IngestTextDocumentRequest

// NewIngestTextDocumentRequest instantiates a new IngestTextDocumentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestTextDocumentRequest(documentId string, text string) *IngestTextDocumentRequest {
	this := IngestTextDocumentRequest{}
	this.DocumentId = documentId
	this.Text = text
	return &this
}

// NewIngestTextDocumentRequestWithDefaults instantiates a new IngestTextDocumentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestTextDocumentRequestWithDefaults() *IngestTextDocumentRequest {
	this := IngestTextDocumentRequest{}
	return &this
}

// GetDocumentId returns the DocumentId field value
func (o *IngestTextDocumentRequest) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *IngestTextDocumentRequest) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *IngestTextDocumentRequest) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestTextDocumentRequest) GetIndex() string {
	if o == nil || IsNil(o.Index.Get()) {
		var ret string
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestTextDocumentRequest) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *IngestTextDocumentRequest) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableString and assigns it to the Index field.
func (o *IngestTextDocumentRequest) SetIndex(v string) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *IngestTextDocumentRequest) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *IngestTextDocumentRequest) UnsetIndex() {
	o.Index.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestTextDocumentRequest) GetTags() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestTextDocumentRequest) GetTagsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IngestTextDocumentRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string][]string and assigns it to the Tags field.
func (o *IngestTextDocumentRequest) SetTags(v map[string][]string) {
	o.Tags = v
}

// GetText returns the Text field value
func (o *IngestTextDocumentRequest) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *IngestTextDocumentRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *IngestTextDocumentRequest) SetText(v string) {
	o.Text = v
}

// GetPipeline returns the Pipeline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestTextDocumentRequest) GetPipeline() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestTextDocumentRequest) GetPipelineOk() ([]string, bool) {
	if o == nil || IsNil(o.Pipeline) {
		return nil, false
	}
	return o.Pipeline, true
}

// HasPipeline returns a boolean if a field has been set.
func (o *IngestTextDocumentRequest) HasPipeline() bool {
	if o != nil && !IsNil(o.Pipeline) {
		return true
	}

	return false
}

// SetPipeline gets a reference to the given []string and assigns it to the Pipeline field.
func (o *IngestTextDocumentRequest) SetPipeline(v []string) {
	o.Pipeline = v
}

// GetWebHookUrl returns the WebHookUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestTextDocumentRequest) GetWebHookUrl() string {
	if o == nil || IsNil(o.WebHookUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebHookUrl.Get()
}

// GetWebHookUrlOk returns a tuple with the WebHookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestTextDocumentRequest) GetWebHookUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebHookUrl.Get(), o.WebHookUrl.IsSet()
}

// HasWebHookUrl returns a boolean if a field has been set.
func (o *IngestTextDocumentRequest) HasWebHookUrl() bool {
	if o != nil && o.WebHookUrl.IsSet() {
		return true
	}

	return false
}

// SetWebHookUrl gets a reference to the given NullableString and assigns it to the WebHookUrl field.
func (o *IngestTextDocumentRequest) SetWebHookUrl(v string) {
	o.WebHookUrl.Set(&v)
}
// SetWebHookUrlNil sets the value for WebHookUrl to be an explicit nil
func (o *IngestTextDocumentRequest) SetWebHookUrlNil() {
	o.WebHookUrl.Set(nil)
}

// UnsetWebHookUrl ensures that no value is present for WebHookUrl, not even an explicit nil
func (o *IngestTextDocumentRequest) UnsetWebHookUrl() {
	o.WebHookUrl.Unset()
}

// GetEmbeddingModel returns the EmbeddingModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestTextDocumentRequest) GetEmbeddingModel() string {
	if o == nil || IsNil(o.EmbeddingModel.Get()) {
		var ret string
		return ret
	}
	return *o.EmbeddingModel.Get()
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestTextDocumentRequest) GetEmbeddingModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmbeddingModel.Get(), o.EmbeddingModel.IsSet()
}

// HasEmbeddingModel returns a boolean if a field has been set.
func (o *IngestTextDocumentRequest) HasEmbeddingModel() bool {
	if o != nil && o.EmbeddingModel.IsSet() {
		return true
	}

	return false
}

// SetEmbeddingModel gets a reference to the given NullableString and assigns it to the EmbeddingModel field.
func (o *IngestTextDocumentRequest) SetEmbeddingModel(v string) {
	o.EmbeddingModel.Set(&v)
}
// SetEmbeddingModelNil sets the value for EmbeddingModel to be an explicit nil
func (o *IngestTextDocumentRequest) SetEmbeddingModelNil() {
	o.EmbeddingModel.Set(nil)
}

// UnsetEmbeddingModel ensures that no value is present for EmbeddingModel, not even an explicit nil
func (o *IngestTextDocumentRequest) UnsetEmbeddingModel() {
	o.EmbeddingModel.Unset()
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestTextDocumentRequest) GetArgs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestTextDocumentRequest) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return map[string]interface{}{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *IngestTextDocumentRequest) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *IngestTextDocumentRequest) SetArgs(v map[string]interface{}) {
	o.Args = v
}

func (o IngestTextDocumentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestTextDocumentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documentId"] = o.DocumentId
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["text"] = o.Text
	if o.Pipeline != nil {
		toSerialize["pipeline"] = o.Pipeline
	}
	if o.WebHookUrl.IsSet() {
		toSerialize["webHookUrl"] = o.WebHookUrl.Get()
	}
	if o.EmbeddingModel.IsSet() {
		toSerialize["embeddingModel"] = o.EmbeddingModel.Get()
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

func (o *IngestTextDocumentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentId",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestTextDocumentRequest := _IngestTextDocumentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestTextDocumentRequest)

	if err != nil {
		return err
	}

	*o = IngestTextDocumentRequest(varIngestTextDocumentRequest)

	return err
}

type NullableIngestTextDocumentRequest struct {
	value *IngestTextDocumentRequest
	isSet bool
}

func (v NullableIngestTextDocumentRequest) Get() *IngestTextDocumentRequest {
	return v.value
}

func (v *NullableIngestTextDocumentRequest) Set(val *IngestTextDocumentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestTextDocumentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestTextDocumentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestTextDocumentRequest(val *IngestTextDocumentRequest) *NullableIngestTextDocumentRequest {
	return &NullableIngestTextDocumentRequest{value: val, isSet: true}
}

func (v NullableIngestTextDocumentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestTextDocumentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


