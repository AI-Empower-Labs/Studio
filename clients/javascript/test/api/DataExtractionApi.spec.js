/**
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StudioAiEmpowerLabs);
  }
}(this, function(expect, StudioAiEmpowerLabs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StudioAiEmpowerLabs.DataExtractionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataExtractionApi', function() {
    describe('apiExtractThematicSimilarityClusterPost', function() {
      it('should call apiExtractThematicSimilarityClusterPost successfully', function(done) {
        //uncomment below and update the code to test apiExtractThematicSimilarityClusterPost
        //instance.apiExtractThematicSimilarityClusterPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('embedding', function() {
      it('should call embedding successfully', function(done) {
        //uncomment below and update the code to test embedding
        //instance.embedding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('keywordExtraction', function() {
      it('should call keywordExtraction successfully', function(done) {
        //uncomment below and update the code to test keywordExtraction
        //instance.keywordExtraction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namedEntityRecognition', function() {
      it('should call namedEntityRecognition successfully', function(done) {
        //uncomment below and update the code to test namedEntityRecognition
        //instance.namedEntityRecognition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('semanticSimilarity', function() {
      it('should call semanticSimilarity successfully', function(done) {
        //uncomment below and update the code to test semanticSimilarity
        //instance.semanticSimilarity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tokenCount', function() {
      it('should call tokenCount successfully', function(done) {
        //uncomment below and update the code to test tokenCount
        //instance.tokenCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tokenize', function() {
      it('should call tokenize successfully', function(done) {
        //uncomment below and update the code to test tokenize
        //instance.tokenize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transcriptionSynchronous', function() {
      it('should call transcriptionSynchronous successfully', function(done) {
        //uncomment below and update the code to test transcriptionSynchronous
        //instance.transcriptionSynchronous(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
