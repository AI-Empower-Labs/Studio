/**
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AskDocumentRequest from '../model/AskDocumentRequest';
import AskDocumentResponse from '../model/AskDocumentResponse';
import DataPipelineStatus from '../model/DataPipelineStatus';
import HttpValidationProblemDetails from '../model/HttpValidationProblemDetails';
import IngestDocumentResponse from '../model/IngestDocumentResponse';
import IngestTextDocumentRequest from '../model/IngestTextDocumentRequest';
import IngestWebPageDocumentRequest from '../model/IngestWebPageDocumentRequest';
import KMeansCluster from '../model/KMeansCluster';
import ListDocumentParameters from '../model/ListDocumentParameters';
import ListDocumentResponse from '../model/ListDocumentResponse';
import ProblemDetails from '../model/ProblemDetails';
import QueryDocumentRequest from '../model/QueryDocumentRequest';
import QueryDocumentResponse from '../model/QueryDocumentResponse';
import ReRankDocumentsRequest from '../model/ReRankDocumentsRequest';
import ReRankDocumentsResponse from '../model/ReRankDocumentsResponse';
import SemanticSearchQueryResultsClusteringRequest from '../model/SemanticSearchQueryResultsClusteringRequest';

/**
* SemanticSearch service.
* @module api/SemanticSearchApi
* @version v1
*/
export default class SemanticSearchApi {

    /**
    * Constructs a new SemanticSearchApi. 
    * @alias module:api/SemanticSearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the semanticSearchAsk operation.
     * @callback module:api/SemanticSearchApi~semanticSearchAskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AskDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ask questions over ingested documents
     * @param {module:model/AskDocumentRequest} askDocumentRequest 
     * @param {module:api/SemanticSearchApi~semanticSearchAskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AskDocumentResponse}
     */
    semanticSearchAsk(askDocumentRequest, callback) {
      let postBody = askDocumentRequest;
      // verify the required parameter 'askDocumentRequest' is set
      if (askDocumentRequest === undefined || askDocumentRequest === null) {
        throw new Error("Missing the required parameter 'askDocumentRequest' when calling semanticSearchAsk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = AskDocumentResponse;
      return this.apiClient.callApi(
        '/api/semantic/ask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchDeleteDocument operation.
     * @callback module:api/SemanticSearchApi~semanticSearchDeleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific document by id
     * @param {String} documentId 
     * @param {String} index 
     * @param {module:api/SemanticSearchApi~semanticSearchDeleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    semanticSearchDeleteDocument(documentId, index, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling semanticSearchDeleteDocument");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling semanticSearchDeleteDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        'index': index
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/semantic/{documentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchDeleteIndex operation.
     * @callback module:api/SemanticSearchApi~semanticSearchDeleteIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific index by name
     * @param {String} name 
     * @param {module:api/SemanticSearchApi~semanticSearchDeleteIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    semanticSearchDeleteIndex(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling semanticSearchDeleteIndex");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/semantic/index', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchFileIngestion operation.
     * @callback module:api/SemanticSearchApi~semanticSearchFileIngestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import file document into semantic search
     * @param {Array.<File>} files The file object to ingest.
     * @param {Object} opts Optional parameters
     * @param {String} [documentId] Id that uniquely identifies content within an index. Previously ingested documents with the same id will be overwritten schema.
     * @param {String} [index] Optional value to specify with index the document should be ingested. Defaults to 'default'.
     * @param {Array.<String>} [pipeline] Optional value to specify ingestion pipeline steps. Defaults to server configured defaults.
     * @param {String} [webHookUrl] Url to use for webhook callback when operation finishes or fails.
     * @param {String} [embeddingModel] Embedding model to use in ingestion. Optional. Default to configured default.
     * @param {Object.<String, {String: Object}>} [args] 
     * @param {Object.<String, {String: Object}>} [tags] Tags to associate with ingestion
     * @param {module:api/SemanticSearchApi~semanticSearchFileIngestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestDocumentResponse}
     */
    semanticSearchFileIngestion(files, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling semanticSearchFileIngestion");
      }

      let pathParams = {
      };
      let queryParams = {
        'documentId': opts['documentId'],
        'index': opts['index'],
        'pipeline': this.apiClient.buildCollectionParam(opts['pipeline'], 'multi'),
        'webHookUrl': opts['webHookUrl'],
        'embeddingModel': opts['embeddingModel']
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough'),
        'args': opts['args'],
        'tags': opts['tags']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = IngestDocumentResponse;
      return this.apiClient.callApi(
        '/api/semantic/ingest/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchIngestionStatus operation.
     * @callback module:api/SemanticSearchApi~semanticSearchIngestionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataPipelineStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get queue status for ingestion job
     * @param {String} id 
     * @param {module:api/SemanticSearchApi~semanticSearchIngestionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataPipelineStatus}
     */
    semanticSearchIngestionStatus(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling semanticSearchIngestionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = DataPipelineStatus;
      return this.apiClient.callApi(
        '/api/semantic/ingest/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchList operation.
     * @callback module:api/SemanticSearchApi~semanticSearchListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List - and filter - for ingested documents
     * @param {module:model/ListDocumentParameters} listDocumentParameters 
     * @param {module:api/SemanticSearchApi~semanticSearchListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDocumentResponse}
     */
    semanticSearchList(listDocumentParameters, callback) {
      let postBody = listDocumentParameters;
      // verify the required parameter 'listDocumentParameters' is set
      if (listDocumentParameters === undefined || listDocumentParameters === null) {
        throw new Error("Missing the required parameter 'listDocumentParameters' when calling semanticSearchList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListDocumentResponse;
      return this.apiClient.callApi(
        '/api/semantic/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchQuery operation.
     * @callback module:api/SemanticSearchApi~semanticSearchQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query ingested documents using semantic search
     * @param {module:model/QueryDocumentRequest} queryDocumentRequest 
     * @param {module:api/SemanticSearchApi~semanticSearchQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryDocumentResponse}
     */
    semanticSearchQuery(queryDocumentRequest, callback) {
      let postBody = queryDocumentRequest;
      // verify the required parameter 'queryDocumentRequest' is set
      if (queryDocumentRequest === undefined || queryDocumentRequest === null) {
        throw new Error("Missing the required parameter 'queryDocumentRequest' when calling semanticSearchQuery");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = QueryDocumentResponse;
      return this.apiClient.callApi(
        '/api/semantic/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchQueryResultsClustering operation.
     * @callback module:api/SemanticSearchApi~semanticSearchQueryResultsClusteringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KMeansCluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform k-means clustering over semantic search log entries
     * @param {module:model/SemanticSearchQueryResultsClusteringRequest} semanticSearchQueryResultsClusteringRequest 
     * @param {module:api/SemanticSearchApi~semanticSearchQueryResultsClusteringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KMeansCluster}
     */
    semanticSearchQueryResultsClustering(semanticSearchQueryResultsClusteringRequest, callback) {
      let postBody = semanticSearchQueryResultsClusteringRequest;
      // verify the required parameter 'semanticSearchQueryResultsClusteringRequest' is set
      if (semanticSearchQueryResultsClusteringRequest === undefined || semanticSearchQueryResultsClusteringRequest === null) {
        throw new Error("Missing the required parameter 'semanticSearchQueryResultsClusteringRequest' when calling semanticSearchQueryResultsClustering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/csv', 'application/problem+json'];
      let returnType = KMeansCluster;
      return this.apiClient.callApi(
        '/api/semantic/query-results-clustering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchRerank operation.
     * @callback module:api/SemanticSearchApi~semanticSearchRerankCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReRankDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rerank documents
     * @param {module:model/ReRankDocumentsRequest} reRankDocumentsRequest 
     * @param {module:api/SemanticSearchApi~semanticSearchRerankCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReRankDocumentsResponse}
     */
    semanticSearchRerank(reRankDocumentsRequest, callback) {
      let postBody = reRankDocumentsRequest;
      // verify the required parameter 'reRankDocumentsRequest' is set
      if (reRankDocumentsRequest === undefined || reRankDocumentsRequest === null) {
        throw new Error("Missing the required parameter 'reRankDocumentsRequest' when calling semanticSearchRerank");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ReRankDocumentsResponse;
      return this.apiClient.callApi(
        '/api/semantic/rerank', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchTextIngestion operation.
     * @callback module:api/SemanticSearchApi~semanticSearchTextIngestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import plain text into semantic search
     * @param {module:model/IngestTextDocumentRequest} ingestTextDocumentRequest 
     * @param {module:api/SemanticSearchApi~semanticSearchTextIngestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestDocumentResponse}
     */
    semanticSearchTextIngestion(ingestTextDocumentRequest, callback) {
      let postBody = ingestTextDocumentRequest;
      // verify the required parameter 'ingestTextDocumentRequest' is set
      if (ingestTextDocumentRequest === undefined || ingestTextDocumentRequest === null) {
        throw new Error("Missing the required parameter 'ingestTextDocumentRequest' when calling semanticSearchTextIngestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = IngestDocumentResponse;
      return this.apiClient.callApi(
        '/api/semantic/ingest/text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the semanticSearchWebpageIngestion operation.
     * @callback module:api/SemanticSearchApi~semanticSearchWebpageIngestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import web page text into semantic search
     * @param {module:model/IngestWebPageDocumentRequest} ingestWebPageDocumentRequest 
     * @param {module:api/SemanticSearchApi~semanticSearchWebpageIngestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestDocumentResponse}
     */
    semanticSearchWebpageIngestion(ingestWebPageDocumentRequest, callback) {
      let postBody = ingestWebPageDocumentRequest;
      // verify the required parameter 'ingestWebPageDocumentRequest' is set
      if (ingestWebPageDocumentRequest === undefined || ingestWebPageDocumentRequest === null) {
        throw new Error("Missing the required parameter 'ingestWebPageDocumentRequest' when calling semanticSearchWebpageIngestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = IngestDocumentResponse;
      return this.apiClient.callApi(
        '/api/semantic/ingest/webpage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
