/**
 * Studio - AI Empower Labs
 * # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@aiempowerlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DetectLanguageResponse from '../model/DetectLanguageResponse';
import GetLanguageResponse from '../model/GetLanguageResponse';
import HttpValidationProblemDetails from '../model/HttpValidationProblemDetails';
import Translate from '../model/Translate';
import TranslateResponse from '../model/TranslateResponse';

/**
* Language service.
* @module api/LanguageApi
* @version v1
*/
export default class LanguageApi {

    /**
    * Constructs a new LanguageApi. 
    * @alias module:api/LanguageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the languageDetection operation.
     * @callback module:api/LanguageApi~languageDetectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectLanguageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects language of a text
     * Accepts text input and returns information about the language in which the text is written.  The response from the endpoint includes the detected language represented by a language code (e.g., EN for English, ES for Spanish) and may also provide a confidence score indicating the likelihood that the detected language is correct. This type of endpoint is useful for applications requiring automatic language recognition, such as content localization, multilingual support systems, and global data analysis tools.
     * @param {String} text 
     * @param {module:api/LanguageApi~languageDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectLanguageResponse}
     */
    languageDetection(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling languageDetection");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = DetectLanguageResponse;
      return this.apiClient.callApi(
        '/api/language/detect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languageGetLanguageList operation.
     * @callback module:api/LanguageApi~languageGetLanguageListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLanguageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of supported languages for translation
     * Returns a list of supported languages, and translation targets
     * @param {module:api/LanguageApi~languageGetLanguageListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLanguageResponse}
     */
    languageGetLanguageList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = GetLanguageResponse;
      return this.apiClient.callApi(
        '/api/language', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languageTranslate operation.
     * @callback module:api/LanguageApi~languageTranslateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranslateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translation of text from one language to another
     * This endpoint provides a simplified interface for text translation, making it accessible for various applications, including web and mobile apps that require multilingual support.
     * @param {module:model/Translate} translate 
     * @param {module:api/LanguageApi~languageTranslateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranslateResponse}
     */
    languageTranslate(translate, callback) {
      let postBody = translate;
      // verify the required parameter 'translate' is set
      if (translate === undefined || translate === null) {
        throw new Error("Missing the required parameter 'translate' when calling languageTranslate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TranslateResponse;
      return this.apiClient.callApi(
        '/api/language/translate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
