/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.TranscriptionApi
import org.openapitools.client.models.HttpValidationProblemDetails
import org.openapitools.client.models.ProblemDetails
import org.openapitools.client.models.TranscriptionAudioUploadResult

class TranscriptionApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TranscriptionApi
        //val apiInstance = TranscriptionApi()

        // to test transcriptionAsynchronous
        should("test transcriptionAsynchronous") {
            // uncomment below to test transcriptionAsynchronous
            //val files : kotlin.collections.List<java.io.File> = /path/to/file.txt // kotlin.collections.List<java.io.File> | The file object to ingest.
            //val model : kotlin.String = model_example // kotlin.String | Model to use for transcription (Optional, default = Base)
            //val language : kotlin.String = language_example // kotlin.String | The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
            //val prompt : kotlin.String = prompt_example // kotlin.String | An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.  (optional)
            //val temperature : kotlin.Double = 1.2 // kotlin.Double | The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0M)
            //val webHookUrl : java.net.URI = webHookUrl_example // java.net.URI | Url to call when transcription has completed or failed. (optional)
            //val translateTo : kotlin.String = translateTo_example // kotlin.String | The language to translate transcription into. Supplying the language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
            //val splitOnWord : kotlin.Boolean = true // kotlin.Boolean | Split into word segments. (optional, default is false)
            //val languageDetection : kotlin.Boolean = true // kotlin.Boolean | Enable transcription language detection (Optional. default is false)
            //val enableNoiseReduction : kotlin.Boolean = true // kotlin.Boolean | Enable noise reduction from audio stream before transcription (Optional. default is false)
            //val result : TranscriptionAudioUploadResult = apiInstance.transcriptionAsynchronous(files, model, language, prompt, temperature, webHookUrl, translateTo, splitOnWord, languageDetection, enableNoiseReduction)
            //result shouldBe ("TODO")
        }

        // to test transcriptionGetById
        should("test transcriptionGetById") {
            // uncomment below to test transcriptionGetById
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //apiInstance.transcriptionGetById(id)
        }

    }
}
