/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.DataExtractionApi
import org.openapitools.client.models.ApiExtractThematicSimilarityClusterPostRequest
import org.openapitools.client.models.EmbeddingRequest
import org.openapitools.client.models.EmbeddingResponse
import org.openapitools.client.models.HttpValidationProblemDetails
import org.openapitools.client.models.KMeansCluster
import org.openapitools.client.models.KeywordExtractionRequestBody
import org.openapitools.client.models.KeywordExtractionResponse
import org.openapitools.client.models.NamedEntityRecognitionRequest
import org.openapitools.client.models.NamedEntityRecognitionResponse
import org.openapitools.client.models.ProblemDetails
import org.openapitools.client.models.SemanticSimilarityRequest
import org.openapitools.client.models.SemanticSimilarityResponse
import org.openapitools.client.models.TokenCountRequest
import org.openapitools.client.models.TokenCountResponse
import org.openapitools.client.models.TokenizerRequest
import org.openapitools.client.models.TokenizerResponse
import org.openapitools.client.models.TranscriptionResponse

class DataExtractionApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DataExtractionApi
        //val apiInstance = DataExtractionApi()

        // to test apiExtractThematicSimilarityClusterPost
        should("test apiExtractThematicSimilarityClusterPost") {
            // uncomment below to test apiExtractThematicSimilarityClusterPost
            //val apiExtractThematicSimilarityClusterPostRequest : ApiExtractThematicSimilarityClusterPostRequest =  // ApiExtractThematicSimilarityClusterPostRequest | 
            //val result : KMeansCluster = apiInstance.apiExtractThematicSimilarityClusterPost(apiExtractThematicSimilarityClusterPostRequest)
            //result shouldBe ("TODO")
        }

        // to test embedding
        should("test embedding") {
            // uncomment below to test embedding
            //val embeddingRequest : EmbeddingRequest = {"model":"multilingual-e5-large","text":["Hello world","AI Empower Labs rocks!"]} // EmbeddingRequest | 
            //val result : EmbeddingResponse = apiInstance.embedding(embeddingRequest)
            //result shouldBe ("TODO")
        }

        // to test keywordExtraction
        should("test keywordExtraction") {
            // uncomment below to test keywordExtraction
            //val keywordExtractionRequestBody : KeywordExtractionRequestBody = {"text":"Hello world! Get in touch with AI Empower Labs from Malmö Sweden via www.AIEmpowerLabs.com or email info@AIEmpowerLabs.com"} // KeywordExtractionRequestBody | 
            //val result : KeywordExtractionResponse = apiInstance.keywordExtraction(keywordExtractionRequestBody)
            //result shouldBe ("TODO")
        }

        // to test namedEntityRecognition
        should("test namedEntityRecognition") {
            // uncomment below to test namedEntityRecognition
            //val namedEntityRecognitionRequest : NamedEntityRecognitionRequest = {"text":"Hello world! Get in touch with AI Empower Labs from Malmö Sweden via www.AIEmpowerLabs.com or email info@AIEmpowerLabs.com","entities":["email","location","organisation","url"]} // NamedEntityRecognitionRequest | 
            //val result : NamedEntityRecognitionResponse = apiInstance.namedEntityRecognition(namedEntityRecognitionRequest)
            //result shouldBe ("TODO")
        }

        // to test semanticSimilarity
        should("test semanticSimilarity") {
            // uncomment below to test semanticSimilarity
            //val semanticSimilarityRequest : SemanticSimilarityRequest = {"query":"Machine learning is so easy","documents":["Deep learning is so straightforward","This is so difficult, like rocket science","I can't believe how much I struggled with this"],"model":"multilingual-e5-large"} // SemanticSimilarityRequest | 
            //val result : SemanticSimilarityResponse = apiInstance.semanticSimilarity(semanticSimilarityRequest)
            //result shouldBe ("TODO")
        }

        // to test tokenCount
        should("test tokenCount") {
            // uncomment below to test tokenCount
            //val tokenCountRequest : TokenCountRequest = {"name":"multilingual-e5-large","text":["Hello world","AI Empower Labs rocks!"]} // TokenCountRequest | 
            //val result : TokenCountResponse = apiInstance.tokenCount(tokenCountRequest)
            //result shouldBe ("TODO")
        }

        // to test tokenize
        should("test tokenize") {
            // uncomment below to test tokenize
            //val tokenizerRequest : TokenizerRequest = {"name":"multilingual-e5-large","text":["Hello world","AI Empower Labs rocks!"]} // TokenizerRequest | 
            //val result : TokenizerResponse = apiInstance.tokenize(tokenizerRequest)
            //result shouldBe ("TODO")
        }

        // to test transcriptionSynchronous
        should("test transcriptionSynchronous") {
            // uncomment below to test transcriptionSynchronous
            //val files : kotlin.collections.List<java.io.File> = /path/to/file.txt // kotlin.collections.List<java.io.File> | The file object to ingest.
            //val model : kotlin.String = model_example // kotlin.String | Model to use for transcription (Optional, default = Base)
            //val language : kotlin.String = language_example // kotlin.String | The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.  (optional)
            //val prompt : kotlin.String = prompt_example // kotlin.String | An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.  (optional)
            //val temperature : kotlin.Double = 1.2 // kotlin.Double | The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.  (optional, default to 0M)
            //val splitOnWord : kotlin.Boolean = true // kotlin.Boolean | Split into word segments. (optional, default is false)
            //val languageDetection : kotlin.Boolean = true // kotlin.Boolean | Enable transcription language detection (Optional. default is false)
            //val enableNoiseReduction : kotlin.Boolean = true // kotlin.Boolean | Enable noise reduction from audio stream before transcription (Optional. default is false)
            //val result : TranscriptionResponse = apiInstance.transcriptionSynchronous(files, model, language, prompt, temperature, splitOnWord, languageDetection, enableNoiseReduction)
            //result shouldBe ("TODO")
        }

    }
}
