# coding: utf-8

"""
    Studio - AI Empower Labs

    # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

    The version of the OpenAPI document: v1
    Contact: support@aiempowerlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.citation import Citation
from typing import Optional, Set
from typing_extensions import Self

class MemoryAnswer(BaseModel):
    """
    MemoryAnswer
    """ # noqa: E501
    question: Optional[StrictStr] = None
    no_result: Optional[StrictBool] = Field(default=None, alias="noResult")
    no_result_reason: Optional[StrictStr] = Field(default=None, alias="noResultReason")
    text: Optional[StrictStr] = None
    relevant_sources: Optional[List[Citation]] = Field(default=None, alias="relevantSources")
    __properties: ClassVar[List[str]] = ["question", "noResult", "noResultReason", "text", "relevantSources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MemoryAnswer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in relevant_sources (list)
        _items = []
        if self.relevant_sources:
            for _item_relevant_sources in self.relevant_sources:
                if _item_relevant_sources:
                    _items.append(_item_relevant_sources.to_dict())
            _dict['relevantSources'] = _items
        # set to None if question (nullable) is None
        # and model_fields_set contains the field
        if self.question is None and "question" in self.model_fields_set:
            _dict['question'] = None

        # set to None if no_result_reason (nullable) is None
        # and model_fields_set contains the field
        if self.no_result_reason is None and "no_result_reason" in self.model_fields_set:
            _dict['noResultReason'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if relevant_sources (nullable) is None
        # and model_fields_set contains the field
        if self.relevant_sources is None and "relevant_sources" in self.model_fields_set:
            _dict['relevantSources'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MemoryAnswer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "question": obj.get("question"),
            "noResult": obj.get("noResult"),
            "noResultReason": obj.get("noResultReason"),
            "text": obj.get("text"),
            "relevantSources": [Citation.from_dict(_item) for _item in obj["relevantSources"]] if obj.get("relevantSources") is not None else None
        })
        return _obj


