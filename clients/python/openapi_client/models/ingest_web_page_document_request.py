# coding: utf-8

"""
    Studio - AI Empower Labs

    # Studio API Documentation  ## Introduction Welcome to Studio by AI Empower Labs API documentation! We are thrilled to offer developers around the world access to our cutting-edge artificial intelligence technology and semantic search. Our API is designed to empower your applications with state-of-the-art AI capabilities, including but not limited to natural language processing, audio transcription, embedding, and predictive analytics.  Our mission is to make AI technology accessible and easy to integrate, enabling you to enhance your applications, improve user experiences, and innovate in your field. Whether you're building complex systems, developing mobile apps, or creating web services, our API provides you with the tools you need to incorporate AI functionalities seamlessly.  Support and Feedback We are committed to providing exceptional support to our developer community. If you have any questions, encounter any issues, or have feedback on how we can improve our API, please don't hesitate to contact our support team @ support@AIEmpowerLabs.com.  Terms of Use Please review our terms of use and privacy policy before integrating our API into your application. By using our API, you agree to comply with these terms.

    The version of the OpenAPI document: v1
    Contact: support@aiempowerlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IngestWebPageDocumentRequest(BaseModel):
    """
    IngestWebPageDocumentRequest
    """ # noqa: E501
    url: StrictStr = Field(description="Web page to ingest")
    document_id: StrictStr = Field(description="Unique identifier for the document to ingest.", alias="documentId")
    index: Optional[StrictStr] = Field(default=None, description="Optional index name where the document will be stored.")
    web_hook_url: Optional[StrictStr] = Field(default=None, description="Optional webhook URL to notify upon completion.", alias="webHookUrl")
    embedding_model_name: Optional[StrictStr] = Field(default=None, description="Optional name of the embedding model to use during ingestion.", alias="embeddingModelName")
    context: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional key-value pairs for additional context or metadata.")
    tags: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="A collection of tags associated with the document. Tags can be language-specific.")
    ingestion_pipeline: Optional[List[StrictStr]] = Field(default=None, description="Optional list of ingestion pipeline steps. Allows custom processing.", alias="ingestionPipeline")
    language_auto_detection: Optional[StrictBool] = Field(default=False, description="Enable automatic language detection for document content.", alias="languageAutoDetection")
    language: Optional[StrictStr] = Field(default=None, description="Force a specific language for full-text search. Use 'simple' for no language or leave empty.")
    __properties: ClassVar[List[str]] = ["url", "documentId", "index", "webHookUrl", "embeddingModelName", "context", "tags", "ingestionPipeline", "languageAutoDetection", "language"]

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['arabic', 'armenian', 'basque', 'catalan', 'danish', 'dutch', 'english', 'finnish', 'french', 'german', 'greek', 'hindi', 'hungarian', 'indonesian', 'irish', 'italian', 'lithuanian', 'nepali', 'norwegian', 'portuguese', 'romanian', 'russian', 'serbian', 'spanish', 'swedish', 'tamil', 'turkish', 'yiddish', 'simple']):
            raise ValueError("must be one of enum values ('arabic', 'armenian', 'basque', 'catalan', 'danish', 'dutch', 'english', 'finnish', 'french', 'german', 'greek', 'hindi', 'hungarian', 'indonesian', 'irish', 'italian', 'lithuanian', 'nepali', 'norwegian', 'portuguese', 'romanian', 'russian', 'serbian', 'spanish', 'swedish', 'tamil', 'turkish', 'yiddish', 'simple')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IngestWebPageDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if index (nullable) is None
        # and model_fields_set contains the field
        if self.index is None and "index" in self.model_fields_set:
            _dict['index'] = None

        # set to None if web_hook_url (nullable) is None
        # and model_fields_set contains the field
        if self.web_hook_url is None and "web_hook_url" in self.model_fields_set:
            _dict['webHookUrl'] = None

        # set to None if embedding_model_name (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_model_name is None and "embedding_model_name" in self.model_fields_set:
            _dict['embeddingModelName'] = None

        # set to None if context (nullable) is None
        # and model_fields_set contains the field
        if self.context is None and "context" in self.model_fields_set:
            _dict['context'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if ingestion_pipeline (nullable) is None
        # and model_fields_set contains the field
        if self.ingestion_pipeline is None and "ingestion_pipeline" in self.model_fields_set:
            _dict['ingestionPipeline'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IngestWebPageDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "documentId": obj.get("documentId"),
            "index": obj.get("index"),
            "webHookUrl": obj.get("webHookUrl"),
            "embeddingModelName": obj.get("embeddingModelName"),
            "context": obj.get("context"),
            "tags": obj.get("tags"),
            "ingestionPipeline": obj.get("ingestionPipeline"),
            "languageAutoDetection": obj.get("languageAutoDetection") if obj.get("languageAutoDetection") is not None else False,
            "language": obj.get("language")
        })
        return _obj


