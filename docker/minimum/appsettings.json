{
    "AllowedHosts": "*",
    "ConnectionStrings": {
        "postgres": "Host=postgres;Port=5432;User Id=postgres;Database=postgres;SearchPath=public;Password=password;Pooling=true",
        "libraTranslate": "http://translation:5000"
    },
    "AiStudioOptions": {
        "Llm": {
            "llama3": {
                "Default": "true",
                "BaseAddress": "http://llama3:11434/v1",
                "ContextSize": "8192",
                "DisplayName": "llama3 7B",
                "SupportsChatCompletionsResponseFormat": "true"
            }
        },
        "Embedding": {
            "multilingual-e5-large": {
                "Default": true,
                "Type": "AiEmpowerLabs",
                "BaseAddress": "http://embedding:8080",
                "MaxTokens": 512,
                "Dimensions": 1024
            }
        },
        "Tokenization": {
            "multilingual-e5-large": {
                "BaseAddress": "http://embedding:8080"
            }
        },
        "Transcription": {
            "AiEmpowerLabs": {
                "Default": "true",
                "BaseAddress": "http://transcription:8080"
            }
        }
    },
    "KernelMemory": {
        "DataIngestion": {
            "DefaultSteps": [
                "extract",
                "sanitize",
                "extract_audio",
                "partition",
                "gen_embeddings",
                "save_records"
            ],
            "TextPartitioning": {
                "MaxTokensPerParagraph": 512,
                "MaxTokensPerLine": 200,
                "OverlappingTokens": 80
            }
        },
        "Retrieval": {
            "SearchClient": {
                // Maximum number of tokens accepted by the LLM used to generate answers.
                // The number includes the tokens used for the answer, e.g. when using
                // GPT4-32k, set this number to 32768.
                // If the value is not set or less than one, SearchClient will use the
                // max amount of tokens supported by the model in use.
                "MaxAskPromptSize": -1,
                // Maximum number of relevant sources to consider when generating an answer.
                // The value is also used as the max number of results returned by SearchAsync
                // when passing a limit less or equal to zero.
                "MaxMatchesCount": 100,
                // How many tokens to reserve for the answer generated by the LLM.
                // E.g. if the LLM supports max 4000 tokens, and AnswerTokens is 300, then
                // the prompt sent to LLM will contain max 3700 tokens, composed by
                // prompt + question + grounding information retrieved from memory.
                "AnswerTokens": 300,
                // Text to return when the LLM cannot produce an answer.
                "EmptyAnswer": "INFO NOT FOUND!"
            }
        },
        "Services": {
            "Postgres": {
                "TableNamePrefix": "memory_",
                "Columns": {
                    "id": "pk",
                    "embedding": "embedding",
                    "tags": "labels",
                    "content": "chunk",
                    "payload": "extras"
                },
                "CreateTableSql": [
                    "BEGIN;                                                                      ",
                    "SELECT pg_advisory_xact_lock(%%lock_id%%);                                  ",
                    "CREATE TABLE IF NOT EXISTS %%table_name%% (                                 ",
                    "  pk          TEXT NOT NULL PRIMARY KEY,                                    ",
                    "  embedding   vector(%%vector_size%%),                                      ",
                    "  labels      TEXT[] DEFAULT '{}'::TEXT[] NOT NULL,                         ",
                    "  chunk       TEXT DEFAULT '' NOT NULL,                                     ",
                    "  extras      JSONB DEFAULT '{}'::JSONB NOT NULL,                           ",
                    "  my_field1   TEXT DEFAULT '',                                              ",
                    "  _update     TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP            ",
                    ");                                                                          ",
                    "CREATE INDEX ON %%table_name%% USING GIN(labels);                           ",
                    "CREATE INDEX ON %%table_name%% USING hnsw (embedding vector_cosine_ops); ",
                    "COMMIT;                                                                     "
                ]
            }
        }
    },
    "Serilog": {
        "Using": [
            "Serilog.Sinks.Console",
            "Serilog.Enrichers.Environment",
            "Serilog.Enrichers.Thread",
            "Serilog.Exceptions",
            "Serilog.Sinks.PostgreSQL.Configuration"
        ],
        "MinimumLevel": {
            "Default": "Information",
            "Override": {
                "Npgsql": "Warning"
            }
        },
        "WriteTo": [
            {
                "Name": "Console",
                "Args": {
                    "restrictedToMinimumLevel": "Information",
                    "OutputTemplate": "[{Level:u4}] |{SourceContext,30}({EventId})| {Message:lj}{NewLine}{Exception}"
                }
            },
            {
                "Name": "PostgreSQL",
                "Args": {
                    "connectionString": "postgres",
                    "tableName": "log",
                    "needAutoCreateTable": true
                }
            }
        ],
        "Properties": {
            "Application": "Studio"
        },
        "Enrich": [
            "FromLogContext",
            "WithEnvironmentUserName",
            "WithThreadId",
            "WithExceptionDetails"
        ]
    },
    "Columns": {
        "message": "RenderedMessageColumnWriter",
        "message_template": "MessageTemplateColumnWriter",
        "level": {
            "Name": "LevelColumnWriter",
            "Args": {
                "renderAsText": true,
                "dbType": "Varchar"
            }
        },
        "raise_date": "TimestampColumnWriter",
        "exception": "ExceptionColumnWriter",
        "properties": "LogEventSerializedColumnWriter",
        "props_test": {
            "Name": "PropertiesColumnWriter",
            "Args": {
                "dbType": "Json"
            }
        },
        "machine_name": {
            "Name": "SinglePropertyColumnWriter",
            "Args": {
                "propertyName": "MachineName",
                "writeMethod": "Raw"
            }
        }
    }
}
